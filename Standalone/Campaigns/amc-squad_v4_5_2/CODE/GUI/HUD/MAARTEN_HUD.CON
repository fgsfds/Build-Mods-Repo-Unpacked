/*
-------------------------------------------------------------------------------
===============================================================================

         -ooo:             +oo-            `+oo.       ./+oooooooooo+/:
        /NMMMN+            NMMNo`         -dMMM/      .mMMNmmmmmmmmmMMNo
       /NMd:mMMo           NMMNMd:      `oNMNMM/      :MMM/.........mMMh
      oNMd. -mMMy`         NMN:mMNs`   -hMm/mMM/      :MMM:         ::-.
    `sMMh`   .dMMh`        NMN .sNMd:`oNMh. mMM/      :MMM:
   `yMMMdhhhhhmMMMd.       NMN   /mMNdMm+`  mMM/      :MMM:         ss+:
  `hMMdhhhhhhhhhmMMm-      NMN    .yMMh.    mMM/      :MMM/.........mMMh
 .dMMs`         .hMMm:     NMN      :/`     mMM/      .mMMNmmmmmmmmmMMNo
 :oo+            `+oo+     +o+              +oo.       ./++ooooooooo+/:

###############################################################################
+ The AMC Squad
+ CON code by James Stanfield, Cedric "Sangman" Haegeman, Dino Bollinger,
+              Mikko Sandt, Cedric "Zaxtor" Lutes and Dan "Danarama" Gaskill
-------------------------------------------------------------------------------
* See AMC_MAIN.CON for a full list of script authors.

Feel free to use any code in the game for your own uses; just make
sure to mention the authors and/or "The AMC Squad" in your credits.
--------------------------------------------------------------------------------
NOTES:

--------------------------------------------------------------------------------
*/

define MAX_ARMOUR 100
var hud_ammo_temp 0 1

define MAX_SPIRIT_BASE 100
define MAX_SPIRIT_OVER 200

define MAX_FIRE_BASE 100
define MAX_FIRE_OVER 200

// Instantly change the ammo counter when switching weapons
appendevent EVENT_CHANGEWEAPON
    ifg RETURN -1 getp[].ammo_amount RETURN hud_ammo_temp
endevent

defstate maarten_hud

    /** Basis for all cutoff metrics: 1280 * 720 resolution **/

    switch cur_weap
    case 0:
        ifn temp_weap 0
        {
            ife temp_weap 11
               ifand AMMO_TYPES[cur_weap] 2
            {
                set hud_disp_pammo silver_ammo
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 27 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 silver_ammo 0 27 1024 0 0 xdim ydim
            }
            else ife temp_weap 11
               ifand AMMO_TYPES[cur_weap] 32768
            {
                set hud_disp_pammo incend_ammo
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 27 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 silver_ammo 0 27 1024 0 0 xdim ydim
            }
            else ife temp_weap 13
               ifand AMMO_TYPES[cur_weap] 16
            {
                set hud_disp_pammo silver_bolts
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 27 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 silver_bolts 0 27 1024 0 0 xdim ydim
            }
            else ife temp_weap 13
               ifand AMMO_TYPES[cur_weap] 16384
            {
                set hud_disp_pammo void_bolts
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 27 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 silver_bolts 0 27 1024 0 0 xdim ydim
            }
            else ife temp_weap 12
               ifand AMMO_TYPES[cur_weap] 8
            {
                set hud_disp_pammo tesla_ammo
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 1 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 tesla_ammo 0 1 1024 0 0 xdim ydim
            }
            else ife temp_weap 6
               ifand AMMO_TYPES[cur_weap] 1
            {
                set hud_disp_pammo explosive_shells
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 2 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 explosive_shells 0 2 1024 0 0 xdim ydim
            }
            else ife temp_weap 10
               ifand AMMO_TYPES[cur_weap] 1
            {
                set hud_disp_pammo explosive_shells
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 2 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 explosive_shells 0 2 1024 0 0 xdim ydim
            }
            else ife temp_weap 6
               ifand AMMO_TYPES[cur_weap] 4
            {
                set hud_disp_pammo flechete_shells
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 8 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 flechete_shells 0 8 1024 0 0 xdim ydim
            }
            else ife temp_weap 6
               ifand AMMO_TYPES[cur_weap] 64
            {
                set hud_disp_pammo magnum_shells
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 8 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 magnum_shells 0 7 1024 0 0 xdim ydim
            }
            else ife temp_weap 6
               ifand AMMO_TYPES[cur_weap] 1024
            {
                set hud_disp_pammo dragon_shells
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 8 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 dragon_shells 0 19 1024 0 0 xdim ydim
            }
            else ife temp_weap 10
               ifand AMMO_TYPES[cur_weap] 4
            {
                set hud_disp_pammo flechete_shells
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 8 1024 0 0 xdim ydim
                //digitalnumber 6155 37 145 flechete_shells 0 8 1024 0 0 xdim ydim
            }
			else ife cur_weap 0
			{
				set ammo_forweaponidx 0
				state ammo_getdefs
				set hud_disp_pammo ammo_normalammoremaining
			}
            else
            {
                getp[].ammo_amount cur_weap hud_disp_pammo
                //rotatesprite 35 145 NNORMALSIZE 0 3823 0 0 1024 0 0 xdim ydim
                //getp[].ammo_amount cur_weap hud_disp_pammo
                //digitalnumber 6155 37 145 hud_disp_pammo 0 0 1024 0 0 xdim ydim
            }
        }
        break
    case 1
		break
    case 2
        //rotatesprite 35 145 NNORMALSIZE 0 3823 0 0 1024 0 0 xdim ydim
        ifand AMMO_TYPES[cur_weap] 16 set hud_disp_pammo silver_bolts
		else ifand AMMO_TYPES[cur_weap] 16384 set hud_disp_pammo void_bolts
        else getp[].ammo_amount cur_weap hud_disp_pammo
        //digitalnumber 6155 37 145 hud_disp_pammo 0 0 1024 0 0 xdim ydim
        break
	case 7
        ifand AMMO_TYPES[cur_weap] 1 set hud_disp_pammo explosive_shells
        else ifand AMMO_TYPES[cur_weap] 4 set hud_disp_pammo flechete_shells
        else ifand AMMO_TYPES[cur_weap] 64 set hud_disp_pammo magnum_shells
        else ifand AMMO_TYPES[cur_weap] 1024 set hud_disp_pammo dragon_shells
	    else getp[].ammo_amount cur_weap hud_disp_pammo
        break
    case 3
    case 4
    case 5
    case 6
    case 8
    case 9
    case 10
    case 11
        //rotatesprite 35 145 NNORMALSIZE 0 3823 0 0 1024 0 0 xdim ydim
        getp[].ammo_amount cur_weap hud_disp_pammo
        //digitalnumber 6155 37 145 hud_disp_pammo 0 0 1024 0 0 xdim ydim
        break
    endswitch

    // Update gradual health increase/decrease display
    ifg hud_hp_temp PHEALTH sub hud_hp_temp 1
    else ifl hud_hp_temp PHEALTH add hud_hp_temp 1

    // use for-loop to speed up the counter
    for hud_disp_temp2 range 2
    {
        // Update gradual ammo increase/decrease display
        ifg hud_ammo_temp hud_disp_pammo sub hud_ammo_temp 1;
        else ifl hud_ammo_temp hud_disp_pammo add hud_ammo_temp 1;
    }

    //health bg + count
	ifn CURSED 0
    {
        rotatesprite 50 170 24582 0 28938 0 30 264 0 0 xdim ydim
        digitalnumberz 28928 54 173 hud_hp_temp 0 49 264 0 0 xdim ydim 24582

        // Curse icon
        add hud_disp_temp5 1
        ifg hud_disp_temp5 2048 set hud_disp_temp5 0
		ifl CURSED 0 set hud_disp_temp6 128
		else ifg CURSED 128 set hud_disp_temp6 128
        else set hud_disp_temp6 CURSED
        mulvar hud_disp_temp6 -1
        add hud_disp_temp6 30
        rotatespritea 50 134 8192 hud_disp_temp5 22772 hud_disp_temp6 18 264 -255 0 0 xdim ydim
    }
    else
    {
        rotatesprite 50 170 24582 0 28938 0 0 264 0 0 xdim ydim

        scalevar hud_disp_temp pmax_health 1 5
        ife userdef[].god 1
            rotatesprite 49 173 HALFSIZE 0 28948 0 7 264 0 0 xdim ydim
        else ifg hud_hp_temp pmax_health
            digitalnumberz 28928 55 173 hud_hp_temp disp_pulse 1 264 0 0 xdim ydim 24582
        else ifg hud_hp_temp hud_disp_temp
            digitalnumberz 28928 55 173 hud_hp_temp 0 7 264 0 0 xdim ydim 24582
        else
            digitalnumberz 28928 55 173 hud_hp_temp 0 10 264 0 0 xdim ydim 24582
    }

    // change color of ammo counter depending on mana
    switch p_curr_mana
        // gold (no mana)
        case 0: set hud_disp_temp 7; break;
        // blue mana
        case 1: set hud_disp_temp 16; break;
        // green mana
        case 2: set hud_disp_temp 14; break;
        // orange mana
        case 3: set hud_disp_temp 10; break;
        // purple mana
        case 4: set hud_disp_temp 49; break;
        // gold (no mana)
        default: set hud_disp_temp 7; break;
    endswitch

    // Ammo bg + counter
    rotatesprite 270 170 24582 0 28939 0 0 520 0 0 xdim ydim
    ife cur_weap 0
    {
        switch temp_weap
        case 0:
        case 19:
        case 20:
        case 36:
        case 37:
            rotatesprite 271 173 HALFSIZE 0 28948 0 7 520 0 0 xdim ydim
            break;
        default:
            digitalnumberz 28928 275 173 hud_ammo_temp 0 hud_disp_temp 520 0 0 xdim ydim 24582
            break;
        endswitch
    }
    else ife cur_weap 1
        rotatesprite 271 173 HALFSIZE 0 28948 0 7 520 0 0 xdim ydim
    else
        digitalnumberz 28928 275 173 hud_ammo_temp 0 hud_disp_temp 520 0 0 xdim ydim 24582

    // ammo panel display check (-1 : none, 0 : one, 1 : two)
    state ammo_panel_check
    ife hud_disp_temp9 0 ife cur_weap 1 set hud_disp_temp9 -1

    // secondary ammo
    ife hud_disp_temp9 1
    {
        ife cur_weap 0
        {
            // alt ammo bg and count
            rotatesprite 215 173 HALFSIZE 0 28940 0 0 520 0 0 xdim ydim
            set hud_disp_temp2 0
            switch temp_weap
            case 25
                ifand AMMO_TYPES[cur_weap] 32
                {
                    rotatesprite 215 167 QUARTERSIZE 0 FORTYMM_SHELLS 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_shells
                }
                else ifand AMMO_TYPES[cur_weap] 128
                {
                    rotatesprite 215 167 QUARTERSIZE 0 5463 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_MIA_shells
                }
                else ifand AMMO_TYPES[cur_weap] 256
                {
                    rotatesprite 215 167 QUARTERSIZE 0 5476 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_plasma
                }
                else
                {
                    rotatesprite 215 167 QUARTERSIZE 0 FORTYMM_NADES 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_grenades
                }
            break
            case 26
                ifand AMMO_TYPES[cur_weap] 512
                {
                    rotatesprite 215 167 QUARTERSIZE 0 FORTYMM_SLUGS 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_slug
                }
                else ifand AMMO_TYPES[cur_weap] 2048
                {
                    rotatesprite 215 167 QUARTERSIZE 0 FORTYMM_ELECTRO 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_electro
                }
                else ifand AMMO_TYPES[cur_weap] 4096
                {
                    rotatesprite 215 167 QUARTERSIZE 0 FORTYMM_CRYO 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_cryo
                }
                else
                {
                    rotatesprite 215 167 QUARTERSIZE 0 FORTYMM_CASELESS 0 0 520 0 0 xdim ydim
                    set hud_disp_temp2 fortymm_caseless
                }
            break
            case 30
                rotatesprite 215 167 20000 0 MICRO_TORPEDO_PACK 0 0 520 0 0 xdim ydim
                set hud_disp_temp2 micro_torpedo
            break
            endswitch
        }
        digitalnumberz 28928 218 179 hud_disp_temp2 0 7 520 0 0 xdim ydim QUARTERSIZE
    }

    // orange mana bar
    ifg p_orange_mana 0
    {
        // top: 580, bottom 635

        // get interval
        scalevar hud_disp_temp2 ydim 580 720
        scalevar hud_disp_temp ydim 635 720
        set hud_disp_temp3 hud_disp_temp
        sub hud_disp_temp3 hud_disp_temp2

        // compute the position and display the bar
        scalevar hud_disp_temp2 hud_disp_temp3 p_orange_mana max_orange_mana
        sub hud_disp_temp hud_disp_temp2
        rotatesprite 269 170 24182 0 28942 0 0 520 0 hud_disp_temp xdim ydim
    }

    // blue mana bar
    ifg p_blue_mana 0
    {
        // top: 560, bottom 650

        scalevar hud_disp_temp2 ydim 560 720
        scalevar hud_disp_temp ydim 650 720

        set hud_disp_temp3 hud_disp_temp
        sub hud_disp_temp3 hud_disp_temp2
        scalevar hud_disp_temp2 hud_disp_temp3 p_blue_mana max_blue_mana

        sub hud_disp_temp hud_disp_temp2
        rotatesprite 270 169 24500 0 28943 0 0 520 0 hud_disp_temp xdim ydim
    }

    // green mana bar
    ifg p_green_mana 0
    {
        // top: 560, bottom 650

        scalevar hud_disp_temp2 ydim 560 720
        scalevar hud_disp_temp ydim 650 720

        set hud_disp_temp3 hud_disp_temp
        sub hud_disp_temp3 hud_disp_temp2
        scalevar hud_disp_temp2 hud_disp_temp3 p_green_mana max_green_mana

        sub hud_disp_temp hud_disp_temp2
        rotatesprite 269 169 24500 0 28944 0 0 520 0 hud_disp_temp xdim ydim
    }

    // purple mana bar
    ifg p_purple_mana 0
    {
        // get interval
        scalevar hud_disp_temp2 ydim 580 720
        scalevar hud_disp_temp ydim 635 720
        set hud_disp_temp3 hud_disp_temp
        sub hud_disp_temp3 hud_disp_temp2

        // compute the position and display the bar
        scalevar hud_disp_temp2 hud_disp_temp3 p_purple_mana max_purple_mana
        sub hud_disp_temp hud_disp_temp2
        rotatesprite 270 168 24182 0 28945 0 0 520 0 hud_disp_temp xdim ydim
    }

    ifg PARMOUR 0
    {
        ifg PARMOUR MAX_ARMOUR
        {
            rotatesprite 95 180 QUARTERSIZE 0 c_heavy_armour 0 0 264 0 0 xdim ydim
            digitalnumberz 28928 97 192 PARMOUR disp_pulse 1 264 0 0 xdim ydim 12000
        }
        else
        {
            rotatesprite 95 180 QUARTERSIZE 0 c_armour 0 0 264 0 0 xdim ydim
            digitalnumberz 28928 97 192 PARMOUR 0 12 264 0 0 xdim ydim 12000
        }

    }

    // Armour Display
    ifg P_HAS_SHIELD 0
    {
        rotatesprite 116 173 24582 0 28941 0 0 264 0 0 xdim ydim

        ifg P_ENERGYSHIELD 0
        {
            // Basis: 1280 * 720 resolution
            // top: 575 -- bottom: 670  -> 95 / shield

            // upper bound
            scalevar hud_disp_temp2 ydim 575 720

            // lower bound
            scalevar hud_disp_temp ydim 670 720

            // Compute distance between upper and lower bound, then compute increment
            set hud_disp_temp3 hud_disp_temp
            sub hud_disp_temp3 hud_disp_temp2
            scalevar hud_disp_temp2 hud_disp_temp3 P_ENERGYSHIELD P_MAX_SHIELD

            // subtract increment from lower bound
            sub hud_disp_temp hud_disp_temp2
            rotatesprite 116 173 24582 0 28941 0 113 264 0 hud_disp_temp xdim ydim

            digitalnumberz 28928 119 192 P_ENERGYSHIELD 0 7 264 0 0 xdim ydim QUARTERSIZE
        }
        else
            digitalnumberz 28928 119 192 P_ENERGYSHIELD 0 51 264 0 0 xdim ydim QUARTERSIZE
    }

    ifg P_SPIRIT_ARMOUR 0
    {
        // Basis: 1280 * 720 resolution
        // top: 560, bottom 650

        scalevar hud_disp_temp2 ydim 560 720
        scalevar hud_disp_temp ydim 650 720

        set hud_disp_temp3 hud_disp_temp
        sub hud_disp_temp3 hud_disp_temp2
        scalevar hud_disp_temp2 hud_disp_temp3 P_SPIRIT_ARMOUR MAX_SPIRIT_BASE

        sub hud_disp_temp hud_disp_temp2
        rotatesprite 50 168 23500 0 28944 -64 0 264 0 hud_disp_temp xdim ydim

        ifg P_SPIRIT_ARMOUR 100
        {
            // Basis: 1280 * 720 resolution
            // top: 580, bottom 635

            // get interval
            scalevar hud_disp_temp2 ydim 580 720
            scalevar hud_disp_temp ydim 635 720
            set hud_disp_temp3 hud_disp_temp
            sub hud_disp_temp3 hud_disp_temp2

            // get current spirit armor overheal
            set hud_disp_temp7 P_SPIRIT_ARMOUR
            subvar hud_disp_temp7 MAX_SPIRIT_BASE

            // get maximum spirit armor overheal
            set hud_disp_temp6 MAX_SPIRIT_OVER
            subvar hud_disp_temp6 MAX_SPIRIT_BASE

            // compute the position and display the bar
            scalevar hud_disp_temp2 hud_disp_temp3 hud_disp_temp7 hud_disp_temp6
            sub hud_disp_temp hud_disp_temp2
            rotatesprite 50 168 24182 0 28947 -64 0 264 0 hud_disp_temp xdim ydim

        }

        // display number
        digitalnumberz 28928 77 184 P_SPIRIT_ARMOUR 0 8 264 0 0 xdim ydim 8096
    }

	ifg P_FIRE_ARMOUR 0
    {

        // Basis: 1280 * 720 resolution
        // top: 560, bottom 650

        scalevar hud_disp_temp2 ydim 560 720
        scalevar hud_disp_temp ydim 650 720

        set hud_disp_temp3 hud_disp_temp
        sub hud_disp_temp3 hud_disp_temp2
        scalevar hud_disp_temp2 hud_disp_temp3 P_FIRE_ARMOUR MAX_FIRE_BASE

        sub hud_disp_temp hud_disp_temp2
        rotatesprite 49 169 23500 0 28946 0 0 264 0 hud_disp_temp xdim ydim

        ifg P_FIRE_ARMOUR 100
        {
            // Basis: 1280 * 720 resolution
            // top: 580, bottom 635

            // get interval
            scalevar hud_disp_temp2 ydim 580 720
            scalevar hud_disp_temp ydim 635 720
            set hud_disp_temp3 hud_disp_temp
            sub hud_disp_temp3 hud_disp_temp2

            // get current spirit armor overheal
            set hud_disp_temp7 P_FIRE_ARMOUR
            subvar hud_disp_temp7 MAX_FIRE_BASE

            // get maximum fire armor overheal
            set hud_disp_temp6 MAX_FIRE_OVER
            subvar hud_disp_temp6 MAX_FIRE_BASE

            // compute the position and display the bar
            scalevar hud_disp_temp2 hud_disp_temp3 hud_disp_temp7 hud_disp_temp6
            sub hud_disp_temp hud_disp_temp2
            rotatesprite 49 170 24182 0 28942 0 0 264 0 hud_disp_temp xdim ydim
        }
        digitalnumberz 28928 25 184 P_FIRE_ARMOUR 0 2 264 0 0 xdim ydim 8096
    }


    set hud_disp_temp4 105
    getp[].inven_icon hud_disp_temp
    ifn hud_disp_temp 0
    {
        // item icon
        // rotatesprite 95 155 24582 0 28941 0 0 264 0 0 xdim ydim

        // NOTE: THIS STORES THE INVENTORY AMOUNT. IF -1, NO VALUE TO DISPLAY!!
        set hud_disp_temp2 -1

        ife hud_disp_temp 1 // MEDKIT
        {
            rotatesprite 95 155 24582 0 c_medikit 0 0 264 0 0 xdim ydim
            getp[].firstaid_amount hud_disp_temp2
        }
        else ife hud_disp_temp 2 // STEROIDS
        {
            rotatesprite 95 155 HALFSIZE 0 c_steroids 0 0 264 0 0 xdim ydim
            getp[].steroids_amount hud_disp_temp2
            divvar hud_disp_temp2 4
        }
        else ife hud_disp_temp 3 // HOLODUKE
        {
            rotatesprite 95 155 HALFSIZE 0 c_holoduke 0 0 264 0 0 xdim ydim

            getp[].holoduke_on hud_disp_temp3
            ifn hud_disp_temp3 -1
                gametextz STARTALPHANUM 210 155 500 0 0 264 0 0 xdim ydim HALFSIZE
            else
                gametextz STARTALPHANUM 210 155 501 0 21 264 0 0 xdim ydim HALFSIZE


            getp[].holoduke_amount hud_disp_temp2
            divvar hud_disp_temp2 24
        }
        else ife hud_disp_temp 4 // JETPACK
        {
            rotatesprite 95 155 24582 0 c_jetpack 0 0 264 0 0 xdim ydim

            getp[].jetpack_on hud_disp_temp3
            ifn hud_disp_temp3 0
                gametextz STARTALPHANUM 210 155 500 0 0 264 0 0 xdim ydim HALFSIZE
            else
                gametextz STARTALPHANUM 210 155 501 0 21 264 0 0 xdim ydim HALFSIZE

            getp[].jetpack_amount hud_disp_temp2
            divvar hud_disp_temp2 16
        }
        else ife hud_disp_temp 5 // NIGHT VISION GOGGLES
        {
            rotatesprite 95 155 HALFSIZE 0 disp_nvg 0 0 264 0 0 xdim ydim

            getp[].heat_on hud_disp_temp3
            ifn hud_disp_temp3 0
                gametextz STARTALPHANUM 210 155 500 0 0 264 0 0 xdim ydim HALFSIZE
            else
                gametextz STARTALPHANUM 210 155 501 0 21 264 0 0 xdim ydim HALFSIZE

            getp[].heat_amount hud_disp_temp2
            divvar hud_disp_temp2 48
        }
        else ife hud_disp_temp 6 // SCUBA GEAR
        {
            rotatesprite 95 155 24582 0 c_scuba 0 0 264 0 0 xdim ydim
            gametextz STARTALPHANUM 210 155 502 0 11 264 0 0 xdim ydim HALFSIZE

            ife AIR_FILTER 1
            {
                myospal 97 157 3812 20 0 2
                rotatesprite 97 155 12384 0 REBREATHER 0 0 512 0 0 xdim ydim
            }
            else
            {
                getp[].scuba_amount hud_disp_temp2
                divvar hud_disp_temp2 64
            }
        }
        else ife hud_disp_temp 7 // BOOTS
        {
            rotatesprite 95 155 24582 0 c_boots 0 0 264 0 0 xdim ydim
            gametextz STARTALPHANUM 210 155 502 0 11 264 0 0 xdim ydim HALFSIZE

            getp[].boot_amount hud_disp_temp2
            divvar hud_disp_temp2 4

        }
        else ife hud_disp_temp 10 // TOOLBOX
        {
            rotatesprite 95 155 24582 0 TOOLBOX_PICKUP 0 0 264 0 0 xdim ydim
            gametextz STARTALPHANUM 210 155 509 0 0 264 0 0 xdim ydim HALFSIZE
        }
        else ife hud_disp_temp 11 // ROPE
        {
            rotatesprite 95 155 12000 0 ROPE_PICKUP 0 0 264 0 0 xdim ydim
            gametextz STARTALPHANUM 210 155 509 0 0 264 0 0 xdim ydim HALFSIZE
        }

        // DISPLAY INVENTORY COUNT
        ifg hud_disp_temp2 -1
            digitalnumberz 28928 97 167 hud_disp_temp2 0 12 264 0 0 xdim ydim 12000
    }

    // Access card display, the order is intentional so that the top row overlaps the bottom
    ifand ACCESSKEY2 4 rotatesprite 258 189 48000 0 2471 0 15 520 0 0 xdim ydim
    ifand ACCESSKEY2 8 rotatesprite 264 189 48000 0 2471 0 49 520 0 0 xdim ydim
    ifand ACCESSKEY2 16 rotatesprite 270 189 48000 0 2471 0 10 520 0 0 xdim ydim
    ifand ACCESSKEY2 32 rotatesprite 276 189 48000 0 2471 0 22 520 0 0 xdim ydim
    ifand ACCESSKEY2 64 rotatesprite 282 189 48000 0 2471 0 16 520 0 0 xdim ydim

    getp[].got_access hud_disp_temp
    ifand hud_disp_temp 1 rotatesprite 258 185 48000 0 2471 0 0 520 0 0 xdim ydim
    ifand hud_disp_temp 2 rotatesprite 264 185 48000 0 2471 0 21 520 0 0 xdim ydim
    ifand hud_disp_temp 4 rotatesprite 270 185 48000 0 2471 0 23 520 0 0 xdim ydim
    ifand ACCESSKEY2 1 rotatesprite 276 185 48000 0 2471 0 12 520 0 0 xdim ydim
    ifand ACCESSKEY2 2 rotatesprite 282 185 48000 0 2471 0 11 520 0 0 xdim ydim

ends
