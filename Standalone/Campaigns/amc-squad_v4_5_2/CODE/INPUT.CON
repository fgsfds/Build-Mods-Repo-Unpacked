/*
-------------------------------------------------------------------------------
===============================================================================

         -ooo:             +oo-            `+oo.       ./+oooooooooo+/:
        /NMMMN+            NMMNo`         -dMMM/      .mMMNmmmmmmmmmMMNo
       /NMd:mMMo           NMMNMd:      `oNMNMM/      :MMM/.........mMMh
      oNMd. -mMMy`         NMN:mMNs`   -hMm/mMM/      :MMM:         ::-.
    `sMMh`   .dMMh`        NMN .sNMd:`oNMh. mMM/      :MMM:
   `yMMMdhhhhhmMMMd.       NMN   /mMNdMm+`  mMM/      :MMM:         ss+:
  `hMMdhhhhhhhhhmMMm-      NMN    .yMMh.    mMM/      :MMM/.........mMMh
 .dMMs`         .hMMm:     NMN      :/`     mMM/      .mMMNmmmmmmmmmMMNo
 :oo+            `+oo+     +o+              +oo.       ./++ooooooooo+/:

###############################################################################
+ The AMC Squad
+ CON code by James Stanfield, Cedric "Sangman" Haegeman, Dino Bollinger,
+              Mikko Sandt, Cedric "Zaxtor" Lutes and Dan "Danarama" Gaskill
-------------------------------------------------------------------------------
* See AMC_MAIN.CON for a full list of script authors.

Feel free to use any code in the game for your own uses; just make
sure to mention the authors and/or "The AMC Squad" in your credits.
--------------------------------------------------------------------------------
NOTES:
This file defines the behavior for the custom keybinds, and all kinds of special
controls that aren't normally available in Duke3D, such as sliding, flying kicks,
mantling, etc.
--------------------------------------------------------------------------------
*/

onevent EVENT_QUICKKICK
ifg player_bike 0 ifcount 13 { set RETURN 1 ife bike_mode 0 set bike_mode 1 else set bike_mode 0 resetcount } else
ife FIRE_SUIT 1 ifn CHAR 12 set RETURN 1 else
ife SPACE_SUIT 1 ifn CHAR 12 ifn CHAR 13 ifn CHAR 14 set RETURN 1 else
ife MISSION_UP 1 set RETURN 1 else
ifn ANGLE 0 set RETURN 1 else
ife RUSTY_BAYONET 1 set RETURN 1 else
ife on_tripwire 1 set RETURN 1 else
ifl KNIFE_ATTACK 27 set RETURN 1 else
ifl ROUNDHOUSE_KICK 27 set RETURN 1 else
ifl SLIDE_KICK 27 set RETURN 1 else
ifl SPIN_KICK 20 set RETURN 1 else
ifl TWIRL_KICK 20 set RETURN 1 else
ifl FLYING_KICK 26 set RETURN 1 else
ifl DROP_KICK 26 set RETURN 1 else
ifl ROLL_LEFT 13 set RETURN 1 else
ifl ROLL_RIGHT 13 set RETURN 1 else
ifl ROLL_BACKWARDS 26 set RETURN 1 else
ifn shotgun_struggle -1 set RETURN 1 else
ifg troll_struggle -1 set RETURN 1 else
ifg succubus_struggle -1 set RETURN 1 else
ifg chainsaw_struggle -1 set RETURN 1 else
ifn phantasm_stick -1 set RETURN 1 else
ifn player_in_vehicle 0 set RETURN 1 else
set RETURN 0
endevent

defstate temp1_ammo
getp[].ammo_amount 1 temp add temp 1 setp[].ammo_amount 1 temp
ends

defstate temp3_ammo
getp[].ammo_amount 3 temp add temp 1 setp[].ammo_amount 3 temp
ends

defstate empty_shotgun
  ifn gun_mag -1
	 {
	 ife cur_weap 0 set temp_wep_mag 0
	 ife CHAR 0 ife cur_weap 9 set ALTMAG 0
	 ife CHAR 0 ife cur_weap 2 set SHOTGUNMAG 0
	 ife CHAR 3 ife cur_weap 2 { set SHOTGUNMAG 0 set SHOTGUNBOXMAG 0 }
	 ife CHAR 5 ife cur_weap 2 set SHOTGUNMAG 0
	 ife CHAR 7 ife cur_weap 2 set SHOTGUNMAG 0
	 ife CHAR 9 ife cur_weap 2 set SHOTGUNMAG 0
	 ife CHAR 12 ife cur_weap 2 set SHOTGUNMAG 0
	 ife cur_weap 2 ifand weap_special[2] 4 set SHOTGUNBOXMAG 0
	 }
ends

/*
// this event exits menus when the "escape" key is pressed
// disabled for now because it might cause issues
onevent EVENT_CHANGEMENU
    set temp 0
    ife RETURN 50
        set temp 1
    else ife RETURN 100
        set temp 1

    ifn temp 0
    ifg PCINTER 0
    {
        set RETURN -2
        set INFO_SEL 0
        set PCINTER 0
        set MOUSEUP 0
    }
endevent

// could use this event to change the sound
// onevent EVENT_OPENMENUSOUND
// endevent
*/

// emergency failsafe, if some dialogue gets stuck, can be reset with quick kick key
onevent EVENT_QUICKKICK
    ifg PCINTER 0
    {
        set INFO_SEL 0
        set PCINTER 0
        set MOUSEUP 0
    }
endevent

// ===========================================================================================================GRENADE KEY =====================================================================================
// this handles "throw grenade"
onevent EVENT_ALTFIRE
set RETURN 1
ife player[].curr_weapon 5
 ife throwing -1
	{
	set throw_key 5
	ifle player[].fta 50 quote 385
	}
else
ife player[].curr_weapon 8
 ife throwing -1
	{
	set throw_key 8
	ifle player[].fta 50 quote 386
	}
ifn player[].curr_weapon throw_key
 ife kickbackpic 0
  ife allow_fire YES
    {
    ifg player[].gotweapon throw_key 0
     ifg player[].ammo_amount throw_key 0
      ife throwing -1
        {
        getp[].curr_weapon throwing
        setplayer[].curr_weapon throw_key
        setplayer[].kickback_pic 1
        }
    }
endevent
// ===========================================================================================================GRENADE KEY =====================================================================================
onevent EVENT_TURNAROUND // Sprint key
set RETURN -1
endevent

onevent EVENT_CROUCH
ifg cameratype 1 set RETURN 1 // lock this movement if camera type is 2
else ifn shotgun_struggle -1 set RETURN 1
else ifg troll_struggle -1 set RETURN 1
else ifg succubus_struggle -1 set RETURN 1
else ifl SLIDE_KICK 27 set RETURN 1
else
ife CROUCH 0
    {
        switch CHAR
        case 0
        case 7
        case 10
            ifrnd 64 soundonce JMOVE1 else
            ifrnd 64 soundonce JMOVE2 else
            ifrnd 64 soundonce JMOVE3 else
            soundonce JMOVE4
            set MOVESOUND 1
        break
        endswitch
    add wepsway_y 10
    set CROUCH 1
    }
endevent

onevent EVENT_JUMP
ifg cameratype 1 set RETURN 1 // lock this movement if camera type is 2
else ifn using_turret -1 set RETURN 1 // lock if using mounted minigun
else ifn player_in_vehicle 0 set RETURN 1
else ifn shotgun_struggle -1 set RETURN 1
else ifg succubus_struggle -1 set RETURN 1
else ifg troll_struggle -1 set RETURN 1
else ife CHARSELECT 1 set RETURN 1
else ifn PCINTER 0 set RETURN 1
else
	{
	sub wepsway_y 10

	set playsound 4
	ife FIRE_SUIT 1 soundonce SERVO

	ife STEPSOUNDFX 0 sound DEF_JUMP
	else ife STEPSOUNDFX 15 sound DEF_JUMP
	else ife STEPSOUNDFX 18 sound DEF_JUMP
	else ife STEPSOUNDFX 1 sound WOOD_JUMP
	else ife STEPSOUNDFX 23 sound WOOD_JUMP
	else ife STEPSOUNDFX 11 sound CONC_JUMP
	else ife STEPSOUNDFX 34 sound CONC_JUMP
	else ife STEPSOUNDFX 26 sound GRAV_JUMP
	else ife STEPSOUNDFX 27 sound GRAV_JUMP
	else ife STEPSOUNDFX 33 sound GRAV_JUMP
	else ife STEPSOUNDFX 4 sound LVS_JUMP
	else ife STEPSOUNDFX 10 sound LVS_JUMP
	else ife STEPSOUNDFX 20 sound LVS_JUMP
	else ife STEPSOUNDFX 21 sound LVS_JUMP
	else ife STEPSOUNDFX 22 sound LVS_JUMP
	else ife STEPSOUNDFX 32 sound LVS_JUMP
	else ife STEPSOUNDFX 2 sound MTL_JUMP
	else ife STEPSOUNDFX 3 sound MTL_JUMP
	else ife STEPSOUNDFX 14 sound MTL_JUMP
	else ife STEPSOUNDFX 17 sound MTL_JUMP
	else ife STEPSOUNDFX 24 sound MTL_JUMP
	else ife STEPSOUNDFX 31 sound MTL_JUMP
	else ife STEPSOUNDFX 8 sound SNOW_JUMP
	else ife STEPSOUNDFX 28 sound SNOW_JUMP
	else ife STEPSOUNDFX 5 sound TILE_JUMP

	ife CHAR 0
		{
		ifand BITS_PRESS P_SPRINTING { ifrnd 128 set playsound JEXERT2 else set playsound JEXERT }
		soundonce JJUMP
		}
	else
	ife CHAR 2
		{
		ifrnd 128 sound H_ARMOUR_S1 else
		sound H_ARMOUR_S2
		ifand BITS_PRESS P_SPRINTING set playsound M_JUMP
		}
	else
	ife CHAR 3 ifand BITS_PRESS P_SPRINTING set playsound R_JUMP
	else
	ife CHAR 4
	 ifand BITS_PRESS P_SPRINTING
		{
		ifrnd 128 set playsound SEXERT else
		ifrnd 128 set playsound SEXERT2 else
		set playsound SEXERT3
		}
	else
	ife CHAR 6
	 ifand BITS_PRESS P_SPRINTING
		{
		ifrnd 128 set playsound G_JUMP else set playsound G_JUMP2
		}
	else ife CHAR 9 ifand BITS_PRESS P_SPRINTING set playsound CULTIST_JUMP
	else ife CHAR 10 ifand BITS_PRESS P_SPRINTING set playsound BS_JUMP
	else ife CHAR 11 ifand BITS_PRESS P_SPRINTING set playsound MT_JUMP1
	else ife CHAR 12 ifand BITS_PRESS P_SPRINTING set playsound JANE_JUMP
	else ife CHAR 13 ifand BITS_PRESS P_SPRINTING
		{
		ifrnd 128 set playsound MC_JUMP else set playsound MC_JUMP2
		}
	else ife CHAR 14 ifand BITS_PRESS P_SPRINTING
		{
		ifrnd 128 set playsound SF_JUMP1 else set playsound SF_JUMP2
		}
	else ife CHAR 15 ifand BITS_PRESS P_SPRINTING
		{
		ifrnd 128 set playsound MC_NS_JUMP else set playsound MC_NS_JUMP2
		}
	else ife CHAR 17 ifand BITS_PRESS P_SPRINTING
		{
		ifrnd 96 set playsound KG_JUMP1
		else ifrnd 96 set playsound KG_JUMP2
		else set playsound KG_JUMP3
		}

	soundoncevar playsound
	ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
	set playsound 0

	}
endevent


// MISSION KEY

gamevar scanner_toggle 0 1

onevent EVENT_HOLSTER
set RETURN 1
ifinwater break
ife injured 1 break
setp[].holster_weapon 0
setp[].weapon_pos 0
ifn COMM_LINK 0
ifn COMM_COUNTD 0
    {
    globalsound OP_COMM_LINK
    operateactivators COMM_LINK THISACTOR
    ifl COMM_COUNTD -30 set COMM_COUNTD -30
    else ifg COMM_COUNTD 30 set COMM_COUNTD 30
    set COMM_LINK 0
    set hit_key 30
    }
else
ife COMM_COUNTD 0
ife player_bike 0
ife camerasprite -1
ife IN_DREAM 0
ife PCINTER 0
ifn TIMEZONE 6
    {
    ifn mission_update 0 { set MISSIONSCREEN 0 set hit_key 30 set mission_update 0 }
    ife MISSION_UP 0 ife MISSIONPOS 320 set MISSION_UP 1
    else ife MISSION_UP 1 ife MISSIONPOS 100 ife scanner_toggle 0 set MISSION_UP 2
    }
endevent

onevent EVENT_USESTEROIDS
ife CHAR 0
{
	ifl player[].steroids_amount 400 { set booster_item 0 setplayer[].steroids_amount 401 stopsound J_INJECTION sound SLOMO_OFF }
	else ifge player[].steroids_amount 400 { set booster_item 1 setplayer[].steroids_amount 399 sound SLOMO_ON }
}
endevent

onevent EVENT_USEJETPACK
ifinwater set RETURN 1
ifn CONTROL_VR -1 set RETURN 1
endevent

onevent EVENT_USENIGHTVISION
getp[].heat_amount temp2
ifg temp2 0
{
    getp[].heat_on temp
    ife temp 1 { setgamepalette 0 palfrom 30 0 0 0 }
    ife HELMET_LOADOUT[CHAR] 4 // ghost goggles?
    {
    ife temp 1 sound GHOSTGOGGLES_OFF else sound GHOSTGOGGLES_ON
    }
    else
    ife CHAR 0
    {
    ife temp 1 sound JAMES_HEATOFF else sound JAMES_HEATON
    }
    else
    ife CHAR 1
    {
    ife temp 1 sound ZAX_NVG_OFF else sound ZAX_NVG_ON
    }
    else ife CHAR 3
    {
	ifand CHAR_APP 16
		{
		ife temp 1 sound R2_HOFF else sound R2_HON
		}
	else
		{
		ife temp 1 sound HIGH_HEATOFF else sound HIGH_HEATON
		}
    }
    else ife CHAR 4 sound SHEAT_EYEGLASS
    else ife CHAR 6
    {
    ife temp 1 sound GEO_HEATOFF else sound GEO_HEATON
    }
    else ife CHAR 7
    {
    ife temp 1 sound MIK_HEATOFF else sound MIK_HEATON
    }
    else ife CHAR 9 sound SHEAT_EYEGLASS
    else ife CHAR 10
    {
    ife temp 1 sound HIGH_HEATOFF else sound HIGH_HEATON
    }
    else ife CHAR 13
    {
    ife temp 1 sound MC_NVG_OFF else sound MC_NVG_ON
    }
    else ife CHAR 14
    {
    ife temp 1 sound SF_NVG_OFF else sound SF_NVG_ON
    }
    else ife CHAR 17
    {
    ife temp 1 sound KG_NVG_OFF else sound KG_NVG_ON
    }
    else
    {
    ife temp 1 sound NITEVISION_OFF else sound NITEVISION_ON
    }
}
endevent

defstate stop_throw
ife cur_weap 5
ifg kickbackpic 4
ifl kickbackpic 20
    {
    sound SELECT_WEAPON
    setplayer[].kickback_pic 0
    }
ends

defstate handle_weapon_switching

	state stop_throw

	ife CHAR 2
	 ife cur_weap 4
		{
		ifl kickbackpic 16 setp[].kickback_pic 0
		}

	ifg shotgun_load 0 { setp[].kickback_pic 0 setp[].reloading 0 set shotgun_load 0 }
	ifand gun_firemode 16384 xorvar gun_firemode 16384
	ifand gun_firemode 512 xorvar gun_firemode 512

	ifn gl_countd 0 set RETURN -1
	ife MISSION_UP 1 set RETURN -1
	ife show_rs_ui 1 set RETURN -1
	ife show_bst_ui 1 set RETURN -1
ends

onevent EVENT_NEXTWEAPON
	state handle_weapon_switching

	ifn scope 0
		{
			set RETURN -1
			ifl ZOOMAMOUNT 6 { sound SCOPE_ZOOM add ZOOMAMOUNT 1  }
		}
	ife userdef[].overhead_on 2
		{
		getp[].zoom temp
		sub temp 256
		clamp temp 48 2048
		setp[].zoom temp
		}

	ifn player_using_hovercraft -1 { ifl hc_gear 6 add hc_gear 1 set RETURN -1 }
	ifn player_using_fighter -1 { ifl hc_gear 6 add hc_gear 1 set RETURN -1 }
	ifn player_using_submarine -1 { ifl hc_gear 6 add hc_gear 1 set RETURN -1 }
	ifn player_using_hovertank -1 { ifl hc_gear 6 add hc_gear 1 set RETURN -1 }
	ifn player_using_VR_tank -1 { ifl hc_gear 6 add hc_gear 1 set RETURN -1 }
endevent

onevent EVENT_PREVIOUSWEAPON
	state handle_weapon_switching

	ifn scope 0
		{
			set RETURN -1
			ifg ZOOMAMOUNT 0 { sound SCOPE_ZOOM sub ZOOMAMOUNT 1  }
		}
	ife userdef[].overhead_on 2
		{
		getp[].zoom temp
		add temp 256
		clamp temp 48 2048
		setp[].zoom temp
		}
	ifn player_using_hovercraft -1 { ifg hc_gear 0 sub hc_gear 1 set RETURN -1 }
	ifn player_using_fighter -1 { ifg hc_gear 0 sub hc_gear 1 set RETURN -1 }
	ifn player_using_submarine -1 { ifg hc_gear 0 sub hc_gear 1 set RETURN -1 }
	ifn player_using_hovertank -1 { ifg hc_gear 0 sub hc_gear 1 set RETURN -1 }
	ifn player_using_VR_tank -1 { ifg hc_gear 0 sub hc_gear 1 set RETURN -1 }

endevent

// ===============================EVENT DO FIRE==================

onevent EVENT_DOFIRE
ifg ALARM_DETECT 0
 ifn GUN_VOLUME -1
    add ALARM_COUNTER GUN_VOLUME

ife CHAR 6
ife PS_ITEM 2
    {
    getp[].ammo_amount cur_weap temp
    add temp 1
    setp[].ammo_amount cur_weap temp
    }

ifand GUN_AMMO_TYPES 1 // can this gun use shells?
    {
    ifn cur_weap 0
    ife gun_firemode_two 8 // Using shotgun's second tube?
        {
        ife CHAR 0 ife cur_weap 9 break
        ifand AMMO_TYPES[15] 1 // is the player using explosive shells?
            {
            ifl explosive_shells 1 ife kickbackpic 0 { set RETURN 1 quote 208 xorvar AMMO_TYPE_2 1 setarray AMMO_TYPES[15] AMMO_TYPE_2 }
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
            }
        ifand AMMO_TYPES[15] 4 // is the player using flechete shells?
            {
            ifl flechete_shells 1 ife kickbackpic 0 { set RETURN 1 quote 208 xorvar AMMO_TYPE_2 4 setarray AMMO_TYPES[15] AMMO_TYPE_2 }
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
            }
        }
    else
        {
        ife CHAR 0 ife cur_weap 9 nullop else
        ifand AMMO_TYPES[cur_weap] 1 // is the player using explosive shells?
            {
            ife cur_weap 0 ife temp_weap 10 nullop else
                {
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
                }
            }

        ife CHAR 0 ife cur_weap 9 nullop else
        ifand AMMO_TYPES[cur_weap] 4 // is the player using flechete shells?
            {
            ife cur_weap 0 ife temp_weap 10 nullop else
                {
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
                }
            }
        }
    }

ifand GUN_AMMO_TYPES 4 // can this gun use advanced shells?
    {
    ifn cur_weap 0
    ifand gun_firemode_two 8
        {
        ifand AMMO_TYPES[15] 64 // is the player using hi-power shells?
            {
            ife cur_weap 0 ife temp_weap 10 nullop else
                {
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
                }
            }
        ifand AMMO_TYPES[15] 1024 // is the player using hi-power shells?
            {
            ife cur_weap 0 ife temp_weap 10 nullop else
                {
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
                }
            }
        }
    else
        {
        ife CHAR 0 ife cur_weap 9 nullop else
        ifand AMMO_TYPES[cur_weap] 64 // is the player using hi-power shells?
            {
            ife cur_weap 0 ife temp_weap 10 nullop else
                {
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
                }
            }
        ife CHAR 0 ife cur_weap 9 nullop else
        ifand AMMO_TYPES[cur_weap] 1024 // is the player using db shells?
            {
            ife cur_weap 0 ife temp_weap 10 nullop else
                {
                getp[].ammo_amount cur_weap temp
                add temp 1
                setp[].ammo_amount cur_weap temp
                }
            }
        }
    }

ife cur_weap 0
ifn temp_weap 0
{
    state handle_tempweapon_dofire
}
ife cur_weap 2
    {
    ife CHAR 10
    ifvarn gun_mag -1 ifvarl gun_mag 6 ifn temp_weap 10 sound MAG_LOW
    }
ife cur_weap 3 // Machinegun
    {
    ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
    ife CHAR 1 // Zaxtor
        {
        randvar temp 1024
        ife SPECIALIST_EQUIPMENT[70] 2 zshoot temp RIFLESHELL
            else
            zshoot temp NINEMM_SHELL
        }
    else
    ife CHAR 3 // Highwire
        {
        ifand gun_firemode 32768 nullop else
            {
            randvar temp 1024
            zshoot temp RIFLESHELL
            }
        }
    else
    ife CHAR 4 // Sang
        {
        randvar temp 2048
		ifand AMMO_TYPES[cur_weap] 2 ifg silver_ammo 0 { state temp3_ammo sub silver_ammo 1 }
		ifand AMMO_TYPES[cur_weap] 32768 ifg incend_ammo 0 { state temp3_ammo sub incend_ammo 1 }
        ifand gun_firemode 1024 sub MGUNMAG 2 else sub MGUNMAG 1
        ife SPECIALIST_EQUIPMENT[6] 2 zshoot temp RIFLESHELL // If he's using the BAR shoot rifle shells
        else ife SPECIALIST_EQUIPMENT[71] 2 zshoot temp RIFLESHELL // If he's using the BAR shoot rifle shells
        else ife SPECIALIST_EQUIPMENT[34] 2 zshoot temp NINEMM_SHELL // If he's using the SR-2 shoot smaller shells to the right
        else ife SPECIALIST_EQUIPMENT[16] 2 zshoot temp NINEMM_SHELL // If he's using the PPSH-41 shoot smaller shells to the right
        else ife SPECIALIST_EQUIPMENT[74] 2 zshoot temp RIFLESHELL // If he's using the AK47 shoot rifle shells
        else ife SPECIALIST_EQUIPMENT[92] 2 zshoot temp NINEMM_SHELL // If he's using the KRISS shoot smaller shells to the right
        else
            {
            zshoot temp 13780
            ifand gun_firemode 1024
                {
                randvar temp 1024
                zshoot temp NINEMM_SHELL
                }
            }
        }
    else
    ife CHAR 5 // Rusty
        {
        ife SPECIALIST_EQUIPMENT[9] 2 sub MGUNMAG 1
        else
            {
            ife SPECIALIST_EQUIPMENT[27] 2 // ak74
                {
                ife RUSTY_BAYONET 0
                    {
                    sub MGUNMAG 1
                    randvar temp 1024
                    zshoot temp RIFLESHELL
                    }
                else
                ife RUSTY_BAYONET 1
                    {
                    getp[].ammo_amount 3 temp
                    add temp 1
                    setp[].ammo_amount 3 temp
                    }
                }
                else
                {
                ife RUSTY_BAYONET 0
                    {
                    ifand RUSTY_UPGRADE 2
						{
						randvar temp2 1024
						zshoot temp2 SHELL_LINK
						}
						else sub MGUNMAG 1
                    randvar temp 1024
                    zshoot temp RIFLESHELL
                    }
                else
                ife RUSTY_BAYONET 1
                    {
                    getp[].ammo_amount 3 temp
                    add temp 1
                    setp[].ammo_amount 3 temp
                    }
                }
            }
        }
    else
    ife CHAR 6 // Geoffrey
        {
        ife SPECIALIST_EQUIPMENT[81] 2
            {
            randvar temp 17
            set temp9 GUN_HEAT[cur_weap]
            add temp9 temp
            setarray GUN_HEAT[cur_weap] temp9
            }
        else
        ife SPECIALIST_EQUIPMENT[12] 2
            {
            sub MGUNMAG 4
            randvar temp 1024
            zshoot temp NINEMM_SHELL
            randvar temp 1024
            zshoot temp NINEMM_SHELL
            randvar temp 1024
            zshoot temp NINEMM_SHELL
            randvar temp 1024
            zshoot temp NINEMM_SHELL
            }
        else
		 ife SPECIALIST_EQUIPMENT[95] 2
            {
            ife RUSTY_BAYONET 0
                {
                sub MGUNMAG 1
                randvar temp 1024
                zshoot temp RIFLESHELL
                }
            else
            ife RUSTY_BAYONET 1
                {
                getp[].ammo_amount 3 temp
                add temp 1
                setp[].ammo_amount 3 temp
                }
            }
		 else
            {
            sub MGUNMAG 1
            randvar temp 1024
            zshoot temp NINEMM_SHELL
            }
        }
    else
    ife CHAR 7 // Mikko
        {
        randvar temp 1024
		ifand AMMO_TYPES[cur_weap] 2 ifg silver_ammo 0 sub silver_ammo 1
		ifand AMMO_TYPES[cur_weap] 32768 ifg incend_ammo 0 sub incend_ammo 1
        ife SPECIALIST_EQUIPMENT[21] 2 zshoot temp NINEMM_SHELL else
        zshoot temp RIFLESHELL
        sub MGUNMAG 1
        }
    else
    ife CHAR 9 // Cultist
        {
        randvar temp 1024
        zshoot temp NINEMM_SHELL
		ifand AMMO_TYPES[cur_weap] 2 ifg silver_ammo 0 { state temp3_ammo sub silver_ammo 1 }
		ifand AMMO_TYPES[cur_weap] 32768 ifg incend_ammo 0 { state temp3_ammo sub incend_ammo 1 }
        }
    else
    ife CHAR 10 // Bombshell
        {
        ifand gun_firemode 32768 nullop else
            {
            randvar temp 1024
            zshoot temp RIFLESHELL
            }
        }
    else
    ife CHAR 12 // Jane
        {
        randvar temp 1024
        zshoot temp RIFLESHELL
        sub MGUNMAG 1
        }
    else
    ife CHAR 13 // Micky
        {
        ife SPECIALIST_EQUIPMENT[48] 2
            {
            randvar temp 17
            set temp9 GUN_HEAT[cur_weap]
            add temp9 temp
            setarray GUN_HEAT[cur_weap] temp9
            }
            else
            {
            sub MGUNMAG 1
            randvar temp 1024
            zshoot temp RIFLESHELL
            }
        }
    else
    ife CHAR 14 // snowfall
        {
        sub MGUNMAG 1
        ife SPECIALIST_EQUIPMENT[91] 2 nullop else
            {
            randvar temp 1024
            zshoot temp RIFLESHELL
            }
        }
    else
    ife CHAR 17 // Kagura
        {
        ife SPECIALIST_EQUIPMENT[90] 2
            {
            randvar temp 1024
            zshoot temp RIFLESHELL
            }
        else
        sub MGUNMAG 1
        }
    else
    ife CHAR 0 // James
        {
        ifn SPECIALIST_EQUIPMENT[15] 2 // not using energy bizon
            {
            randvar temp 1024
            ife SPECIALIST_EQUIPMENT[55] 2 ifand AMMO_TYPES[cur_weap] 2 zshoot temp SRIFLESHELL else
            zshoot temp NINEMM_SHELL
            }
		ifand AMMO_TYPES[cur_weap] 2 ifg silver_ammo 0 { state temp3_ammo sub silver_ammo 1 }
		ifand AMMO_TYPES[cur_weap] 32768 ifg incend_ammo 0 { state temp3_ammo sub incend_ammo 1 }
        ifand gun_firemode 1024 { zshoot temp 13780 sub MGUNMAG 2 } else sub MGUNMAG 1
        }
}
ife cur_weap 6
    {
    ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
    ife CHAR 17
        {
        sub slot6_mag 1
        randvar temp 1024
        zshoot temp NINEMM_SHELL
        }
    }
ife cur_weap 7
{
ife CHAR 0
    {
    ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
    sub MACHINE_MAG 1
    randvar temp 1024
    zshoot temp RIFLESHELL
    }
ife CHAR 9
    {
    ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
    // sub MACHINE_MAG 1
    randvar temp 1024
    zshoot temp RIFLESHELL
    }
ife CHAR 12
    {
    ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
    randvar temp 1024
    zshoot temp RIFLESHELL
    }
ife CHAR 17
    {
    ifvarn gun_mag -1 ifvarl gun_mag 3 sound MAG_LOW
    randvar temp 1024
    zshoot temp RIFLESHELL
    }
}
ife cur_weap 9
    {
    ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
    ife CHAR 0
        {
        randvar temp 1024
        zshoot temp RIFLESHELL
        ife SPECIALIST_EQUIPMENT[72] 2 // Gilboa fires 2 bullets
            {
            randvar temp 1024
            zshoot temp RIFLESHELL
            }
        }
    ife CHAR 3
        {
        sub MACHINE_MAG 1
        randvar temp 1024
        zshoot temp RIFLESHELL
        ife SPECIALIST_EQUIPMENT[35] 2
            {
            randvar temp 1024
            zshoot temp SHELL_LINK
            }
        }
    ife CHAR 7
        {
        ife SPECIALIST_EQUIPMENT[19] 2
            {
            randvar temp 10
            set temp9 GUN_HEAT[cur_weap]
            add temp9 temp
            setarray GUN_HEAT[cur_weap] temp9
            }
        }
    ife CHAR 13
        {
        ife SPECIALIST_EQUIPMENT[76] 2
            {
            randvar temp 8
            set temp9 GUN_HEAT[cur_weap]
            add temp9 temp
            setarray GUN_HEAT[cur_weap] temp9
            }
        }
    ife CHAR 14
        {
        randvar temp 1024
        zshoot temp RIFLESHELL
        randvar temp 1024
        zshoot temp SHELL_LINK
        }
    }
ife cur_weap 11
    {
    ife CHAR 17
        {
		ifvarn gun_mag -1 ifvarl gun_mag 6 sound MAG_LOW
        sub SLUGSHOTMAG 1
        randvar temp 1024
        zshoot temp RIFLESHELL
        set temp9 GUN_HEAT[cur_weap]
        add temp9 temp2
        clamp temp9 0 60
        setarray GUN_HEAT[cur_weap] temp9
        }
    }
endevent

// /=========================================================================================

defstate masterkey_ammo_cap
ifand JAMES_UPGRADE 512
        {
        ife ALTMAG 4 break
        }
    else
        {
        ife needs_pump[cur_weap] 1 ife ALTMAG 3 break else
        ife ALTMAG 4 break
        }
        ife gl_countd 30 { ife BELT_LOADOUT[0] 5 set gl_countd 40 else set gl_countd 46 }
        else ife gl_countd 0 { ife BELT_LOADOUT[0] 5 set gl_countd 40 else set gl_countd 46 }
ends

defstate masterkey_reload
            ifand AMMO_TYPES[cur_weap] 1
                {
                ife explosive_shells 0 break
                state masterkey_ammo_cap
                }
            else
            ifand AMMO_TYPES[cur_weap] 4
                {
                ife flechete_shells 0 break
                state masterkey_ammo_cap
                }
            else
            ifand AMMO_TYPES[cur_weap] 64
                {
                ife magnum_shells 0 break
                state masterkey_ammo_cap
                }
            else
            ifand AMMO_TYPES[cur_weap] 1024
                {
                ife dragon_shells 0 break
                state masterkey_ammo_cap
                }
            else
                {
                ife player[].ammo_amount 2 0 break
                state masterkey_ammo_cap
                }
ends

defstate two_tube_shotgun
    ifand gun_firemode_two 8 // Is player using second tube?
        {
        ifand GUN_AMMO_TYPES 1 ifand AMMO_TYPES[15] 1 ife explosive_shells 0 break
        else ifand GUN_AMMO_TYPES 1  ifand AMMO_TYPES[15] 4 ife flechete_shells 0 break
        else ifand GUN_AMMO_TYPES 4 ifand AMMO_TYPES[15] 64 ife magnum_shells 0 break
        else ifand GUN_AMMO_TYPES 4 ifand AMMO_TYPES[15] 1024 ife dragon_shells 0 break
        else ife cur_ammo 0 break
        ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
        set reload_temp MAX_SHOTGUNBOXMAG
        sub reload_temp SHOTGUNBOXMAG
        set shotgun_load reload_temp
        ifand GUN_AMMO_TYPES 1 ifand AMMO_TYPES[15] 1 { ifg shotgun_load explosive_shells set shotgun_load explosive_shells }
        else ifand GUN_AMMO_TYPES 1  ifand AMMO_TYPES[15] 4 { ifg shotgun_load flechete_shells set shotgun_load flechete_shells }
        else ifand GUN_AMMO_TYPES 4 ifand AMMO_TYPES[15] 64 { ifg shotgun_load magnum_shells set shotgun_load magnum_shells }
        else ifand GUN_AMMO_TYPES 4 ifand AMMO_TYPES[15] 1024 { ifg shotgun_load dragon_shells set shotgun_load dragon_shells }
        else { ifg shotgun_load player[].ammo_amount 2 set shotgun_load player[].ammo_amount 2 }
        }
       else
        state standard_shotgun_load
ends

// ===============================================================================================================================================================================================================================
onevent EVENT_LOOKRIGHT // RELOAD/TERTIARY KEY
set RETURN 1

ifp pshrunk break
ifn player_in_vehicle 0 break
ifn ANGLE 0 break
ifn camerasprite -1 break
ifn CONTROL_VR -1 break
ifn player[].weapon_pos 0 break


ife cur_weap 0
ifn temp_weap 0
ife kickbackpic 0
	{
	ifand BITS_PRESS P_SPRINTING nullop else
			{
			add drop_counter 2
				ifg drop_counter 14
				{
				quote 516
				state drop_tempweapon
				soundonce ENDSEQVOL2SND1
				set drop_counter 0
				}
			ife temp_weap 10 // SAWNOFF RELOAD
					{
					ife AMMO_TYPES[cur_weap] 0
					{
						ifle normal_ammo 1
							break
					}
					ifand AMMO_TYPES[cur_weap] 1
					{
						ife explosive_shells 1
							break
					}
					ifand AMMO_TYPES[cur_weap] 4
					{
						ife flechete_shells 1
							break
					}
					ife temp_wep_mag 1
						{
						setp[].reloading 1
						setp[].kickback_pic 6
						}
					}
				ife temp_weap 21 // FN FAL RELOAD
					{
					set WEAPON0_RELOAD 37
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 22 // MP 40 RELOAD
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 25 // M4 RELOAD
					{
					set WEAPON0_RELOAD 42
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 26 // AK114 Reload
					{
					set WEAPON0_RELOAD 37
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 31 // M60 Reload
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 12
					}
				ife temp_weap 35 // M4 RELOAD
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 41 // AR-65 heat sink pop
					{
					ifg kickbackpic 6
					ifg HEAT_SINKS 0
					ifg GUN_HEAT[cur_weap] 15 { soundonce HEAT_SINK_EJECT shoot HEAT_SINK sub HEAT_SINKS 1 setarray GUN_HEAT[cur_weap] 15 }
					}
				ife temp_weap 45 // P90 RELOAD
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 47 // Engy SMG reload
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 52 // UDP45 RELOAD
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 6
					}
				ife temp_weap 54 // MG42 Reload
					{
				   ife temp_wep_mag cur_ammo break
				   ife max_temp_wep_mag temp_wep_mag break
				   setp[].reloading 1
				   setp[].kickback_pic 12
					}
			}
	}
else
ife cur_weap 1 // PISTOLS
 ifl kickbackpic 6
{
   switch CHAR
    case 0
    case 1
    case 3
    case 5
	case 6
    case 7
    case 9
    case 10
    case 13
    case 15
    ife gun_mag -1 break // doesn't need a magazine
   ife PISTOLMAG cur_ammo break
   ife PISTOLMAG MAXPISTOLMAG break
   setp[].reloading 1
   ife CHAR 5 setp[].kickback_pic 10 else
   ife CHAR 9 setp[].kickback_pic 10 else
   setp[].kickback_pic 6
    break
    default
    break
    endswitch
}
else
ife cur_weap 2 // SHOTGUNS =================================================================================
{
 ifg kickbackpic 0 ifl kickbackpic 23 break
   switch CHAR
    case 0 // James =================================================================================
       ife JAMES_JACKH 1
       {
       ifn kickbackpic 0 break
       ife cur_ammo 0 break
       ife SHOTGUNBOXMAG 10 break
       setp[].reloading 1
       setp[].kickback_pic 6
       }
       else
       ife SPECIALIST_EQUIPMENT[61] 2
       {
       ifn kickbackpic 0 break
       ife cur_ammo 0 break
       ife SHOTGUNBOXMAG 10 break
       setp[].reloading 1
       setp[].kickback_pic 6
       }
       else
       ife SPECIALIST_EQUIPMENT[53] 2 // using KSG-12?
        state two_tube_shotgun
       else
       state standard_shotgun_load
		break
    case 1 break
    case 2 break
    case 3 // Highwire =================================================================================
       ife SPECIALIST_EQUIPMENT[13] 2 // Saiga-12?
       {
       set WEAPON2_RELOAD 41
       ifn kickbackpic 0 break
           ife cur_ammo 0 break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
       }
       else
       ife SPECIALIST_EQUIPMENT[65] 2 // golden triple-threat?
       {
       ifn kickbackpic 0 break
           ife cur_ammo 0 break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
       }
       else
       state standard_shotgun_load
		break
    case 5
      ife SPECIALIST_EQUIPMENT[66] 2 break
	  ife SPECIALIST_EQUIPMENT[116] 2 state standard_shotgun_load
	  else
	  {
      ifand GUN_AMMO_TYPES 1
       ifand AMMO_TYPES[cur_weap] 1
            {
           ife explosive_shells SHOTGUNBOXMAG break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
            }
        else
      ifand GUN_AMMO_TYPES 1
       ifand AMMO_TYPES[cur_weap] 4
            {
           ife flechete_shells SHOTGUNBOXMAG break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
            }
        else
      ifand GUN_AMMO_TYPES 4
       ifand AMMO_TYPES[cur_weap] 64
            {
           ife magnum_shells SHOTGUNBOXMAG break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
            }
        else
      ifand GUN_AMMO_TYPES 4
       ifand AMMO_TYPES[cur_weap] 1024
            {
           ife dragon_shells SHOTGUNBOXMAG break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
            }
            else
            {
            ifn kickbackpic 0 break
            ife cur_ammo 0 break
           ife SHOTGUNBOXMAG MAX_SHOTGUNBOXMAG break
           setp[].reloading 1
           setp[].kickback_pic 6
            }
		}
		break
    case 7
    ife SPECIALIST_EQUIPMENT[30] 2 // using assault shotgun?
       {
       ife cur_ammo 0 break
       ifg player[].kickback_pic 6 break
       ife SHOTGUNBOXMAG 10 break
       setp[].reloading 1
       setp[].kickback_pic 6
       }
       else ife SPECIALIST_EQUIPMENT[68] 2
       {
           ife cur_ammo 0 break
           ife SHOTGUNMAG MAX_SHOTGUNMAG break
           setp[].reloading 1
              ifl kickbackpic 15 setp[].kickback_pic 15
               ife kickbackpic 23 setp[].kickback_pic 15
       }
       else
       ife SPECIALIST_EQUIPMENT[85] 2 // using MSC-12?
        state two_tube_shotgun
       else
        state standard_shotgun_load
		break
	case 9 // CULTIST
		ife SHOTGUNMAG 1
		{
			setp[].reloading 1
			setp[].kickback_pic 6
		}
		break
    case 10 // BOMBSHELL
       set WEAPON2_RELOAD 52
       ifn kickbackpic 0 break
           ife cur_ammo 0 break
           ife slot6_mag 20 break
           setp[].reloading 1
           setp[].kickback_pic 6
		   break
    case 12 // Jane
		 ife SPECIALIST_EQUIPMENT[122] 2
		   {
		   ifn kickbackpic 0 break
		   ife cur_ammo 0 break
		   ife SHOTGUNBOXMAG 10 break
		   setp[].reloading 1
		   setp[].kickback_pic 6
		   }
	   else
        state two_tube_shotgun
		break
    default
		break
    endswitch
}
else
ife cur_weap 3 // MACHINEGUNS
 ifl kickbackpic 6
{
ifand gun_firemode 32768 { state lower_weapon xor gun_firemode 32768 }
   switch CHAR
    case 0
    case 3
    case 4
    case 5
    case 6
    case 7
    case 10
    case 12
    case 13
    case 14
    case 17
    ife MGUNMAG cur_ammo break
   ife CHAR 0
    {
    ife SPECIALIST_EQUIPMENT[55] 2 // using UMP45, do an extra check for silver 45 ammo
     ifand AMMO_TYPES[cur_weap] 2
        ife MGUNMAG silver_ammo break
    ife SPECIALIST_EQUIPMENT[55] 2 // using UMP45, do an extra check for incend ammo
     ifand AMMO_TYPES[cur_weap] 32768
        ife MGUNMAG incend_ammo break

        ifl kickbackpic 8
            {
            ife SPECIALIST_EQUIPMENT[8] 2 set WEAPON3_RELOAD 40
            else ife SPECIALIST_EQUIPMENT[15] 2 set WEAPON3_RELOAD 37
            else ife SPECIALIST_EQUIPMENT[55] 2 set WEAPON3_RELOAD 40
            else set WEAPON3_RELOAD 35
            set reload_type 0
            }
    }
   ife CHAR 3
    {
        ifl kickbackpic 8
            {
            ife SPECIALIST_EQUIPMENT[14] 2 break
            else ife SPECIALIST_EQUIPMENT[7] 2 set WEAPON3_RELOAD 42
            else set WEAPON3_RELOAD 38
            }
    }
   ife CHAR 4
    {
    ife SPECIALIST_EQUIPMENT[92] 2 // using KRISS, do an extra check for silver 45 ammo
     ifand AMMO_TYPES[cur_weap] 2
        ife MGUNMAG silver_ammo break
    ife SPECIALIST_EQUIPMENT[92] 2 // using KRISS, do an extra check for incend ammo
     ifand AMMO_TYPES[cur_weap] 32768
        ife MGUNMAG incend_ammo break

        ifl kickbackpic 8
         ife SPECIALIST_EQUIPMENT[74] 2
            set WEAPON3_RELOAD 42
    }
   ife CHAR 5 // Rusty
    {
    set RUSTY_BAYONET 0
    ifand RUSTY_UPGRADE 2 ifn SPECIALIST_EQUIPMENT[9] 2 ifn SPECIALIST_EQUIPMENT[27] 2 break
    else
    set WEAPON3_RELOAD 41
    }
    ife CHAR 6 // Geoffrey
    {
	ife SPECIALIST_EQUIPMENT[95] 2 set WEAPON3_RELOAD 41
    ife SPECIALIST_EQUIPMENT[81] 2 // Using the GP-63 which can overheat?
        {
        ifg kickbackpic 6
        ifg HEAT_SINKS 0
        ifg GUN_HEAT[cur_weap] 15 { soundonce HEAT_SINK_EJECT shoot HEAT_SINK sub HEAT_SINKS 1 setarray GUN_HEAT[cur_weap] 15 }
        else break
        }
    }
    ife CHAR 10 // Bombshell
        {
        ifl kickbackpic 8  set WEAPON3_RELOAD 42
        }
   ife CHAR 12
        {
        ifl kickbackpic 8 set WEAPON3_RELOAD 42
        }
    ife CHAR 13 // Micky
        {
        ife SPECIALIST_EQUIPMENT[48] 2 // Using the AR-73 which can overheat?
            {
            ifg kickbackpic 6
            ifg HEAT_SINKS 0
            ifg GUN_HEAT[cur_weap] 15 { soundonce HEAT_SINK_EJECT shoot HEAT_SINK sub HEAT_SINKS 1 setarray GUN_HEAT[cur_weap] 15 }
            else break
            }
        else
        set WEAPON3_RELOAD 42
        }
    ife CHAR 17 // Kagura
        {
        ife SPECIALIST_EQUIPMENT[90] 2
            {
            ifl kickbackpic 8  set WEAPON3_RELOAD 42
            }
        }
   ife MAXMGUNMAG MGUNMAG break
   setp[].reloading 1
   setp[].kickback_pic 6
    break
    default
    break
    endswitch
}
else
ife cur_weap 4 // ROCKETS
 ifl kickbackpic 6
{
   switch CHAR
    case 0 // James
	ifn gun_mag -1
        {
       ife ROCKETMAG cur_ammo break
       ife ROCKETMAG 6 break
       setp[].reloading 1
       setp[].kickback_pic 12
       }
    break
	case 4
	 ifg p_purple_mana 1
	  ifand MAGIC_UPGRADE[4] 4
        {
        ifcount 16
            {
           soundonce SUMMON
		   quake 26
          palfrom 40 40 40 40
          espawn DRAGON
		  setav[RETURN].faction_flag ALLIED_FACTION_FLAG
		  seta[RETURN].pal 21
           state lower_weapon
            resetcount
			sub p_purple_mana 2
            }
        }
	break
    case 5 // Rusty
   ife ROCKETMAG cur_ammo break
   ife ROCKETMAG 4 break
   setp[].reloading 1
   setp[].kickback_pic 24
    break
    case 7 // Mikko
   ife ROCKETMAG cur_ammo break
   ife ROCKETMAG 20 break
   setp[].reloading 1
   setp[].kickback_pic 6
    break
    case 10 // Bombshell
   ife ROCKETMAG cur_ammo break
   ife ROCKETMAG 5 break
   setp[].reloading 1
   setp[].kickback_pic 6
    break
    case 12 // Jane
   ife ROCKETMAG cur_ammo break
   ife ROCKETMAG 7 break
   setp[].reloading 1
   setp[].kickback_pic 6
    break
	case 14 // Snowfall
   ife ROCKETMAG cur_ammo break
   ife ROCKETMAG 4 break
   setp[].reloading 1
   setp[].kickback_pic 16
    break
    default
    break
    endswitch

	ife CHAR 1
	  ife cur_weap 4 // elemental cannon
	   ife SPECIALIST_EQUIPMENT[99] 2
        {
        getp[].ammo_amount 4 alt_temp1
        ifg alt_temp1 0
        ife kickbackpic 0
        ife kickbackpic_2 0
		ife kickbackpic_3 0
            {
            sub alt_temp1 1
            setp[].ammo_amount 4 alt_temp1
            set kickbackpic_3 1
            }
        }


}
else
ife cur_weap 6 // AUTOSHOTGUN/RIFLE =================================================================================
 ifl kickbackpic 6
{
    switch CHAR
    case 0
        ife SPECIALIST_EQUIPMENT[49] 2 break
		ife slot6_mag cur_ammo break
		ife SPECIALIST_EQUIPMENT[98] 2
		ife slot6_mag 30 break
		else
        ife slot6_mag 20 break
        setp[].reloading 1
        setp[].kickback_pic 6
    break
    case 3
        set WEAPON6_RELOAD 42
        ife rifle_mag cur_ammo break
        ife rifle_mag 10 break
        setp[].reloading 1
        setp[].kickback_pic 6
        break
    case 7
        ife SPECIALIST_EQUIPMENT[59] 2
            {
            set WEAPON6_RELOAD 36
            ife rifle_mag cur_ammo break
            ife rifle_mag 10 break
            setp[].reloading 1
            setp[].kickback_pic 6
            }
        break
    case 10
        ife slot6_mag cur_ammo break
        ife slot6_mag 20 break
        setp[].reloading 1
        setp[].kickback_pic 6
    break
	case 14
		ife SPECIALIST_EQUIPMENT[96] 2
			{
			ifg kickbackpic 6 break
			ife slot6_mag cur_ammo break
			ife slot6_mag max_slot6_mag break
			set WEAPON6_RELOAD 42
			setp[].reloading 1
			setp[].kickback_pic 6
			}
    break
    case 17
        ife slot6_mag cur_ammo break
        ife slot6_mag max_slot6_mag break
        setp[].reloading 1
        setp[].kickback_pic 6
    break
    default
        break
    endswitch
}
else
ife cur_weap 7 // MISC =================================================================================
{
ifand gun_firemode 32768 { state lower_weapon xor gun_firemode 32768 }
   switch CHAR
    case 0
    ife SPECIALIST_EQUIPMENT[84] 2 // using M4-15?
        {
        ifg kickbackpic 6 break
        set WEAPON7_RELOAD 42
        ife MACHINE_MAG cur_ammo break
        ife MACHINE_MAG MAX_MACHINE_MAG break
        setp[].reloading 1
        setp[].kickback_pic 6
        }
    else
    ife SPECIALIST_EQUIPMENT[45] 2 // using LR300?
        {
        ifg kickbackpic 6 break
        set WEAPON7_RELOAD 42
        ife MACHINE_MAG cur_ammo break
        ife MACHINE_MAG MAX_MACHINE_MAG break
        setp[].reloading 1
        setp[].kickback_pic 6
        }
    else
    ife SPECIALIST_EQUIPMENT[78] 2 // using G36?
        {
        ifg kickbackpic 6 break
        set WEAPON7_RELOAD 42
        ife MACHINE_MAG cur_ammo break
        ife MACHINE_MAG MAX_MACHINE_MAG break
        setp[].reloading 1
        setp[].kickback_pic 6
        }
    else // Using Steyr AUG?
        {
         ifg kickbackpic 6 break
        ife MACHINE_MAG cur_ammo break
        ife MACHINE_MAG MAX_MACHINE_MAG break
        setp[].reloading 1
        setp[].kickback_pic 20
        }
    break
    case 3 // Highwire's Grenade Launcher
       ife ROCKETMAG cur_ammo break
       ife ROCKETMAG 6 break
        set reload_temp 6
        sub reload_temp ROCKETMAG
        set shotgun_load reload_temp
    break
    case 12 // Jane's M14-EBR
        ifg kickbackpic 6 break
        set WEAPON7_RELOAD 42
        ife rifle_mag cur_ammo break
        ife rifle_mag max_rifle_mag break
        setp[].reloading 1
        setp[].kickback_pic 6
        break
    case 17 // Kagura's PSG-1
        ifg kickbackpic 6 break
        set WEAPON7_RELOAD 42
        ife rifle_mag cur_ammo break
        ife rifle_mag max_rifle_mag break
        setp[].reloading 1
        setp[].kickback_pic 6
        break
    default
    break
    endswitch
}
else
ife cur_weap 9 // MISC
{
ifand gun_firemode 32768 { state lower_weapon xor gun_firemode 32768 }
  ife CHAR 14
   ife cur_weap 9
    ifcount 16
	 ifand MAGIC_UPGRADE[14] 2
	  ifg p_purple_mana 0
        {
        soundonce SF_HMG_SEL
        ifrnd 96 set PLAYER_VOICEOVER 45
        espawn SNOWFALL_TURRET
		seta[RETURN].pal 31
		sub p_purple_mana 1
		spawn 13950 // spawning circle
        resetcount
        }
    ife CHAR 13
     ife SPECIALIST_EQUIPMENT[76] 2
        {
        ifg kickbackpic 6
        ifg HEAT_SINKS 0
        ifg GUN_HEAT[cur_weap] 15 { soundonce HEAT_SINK_EJECT shoot HEAT_SINK sub HEAT_SINKS 1 setarray GUN_HEAT[cur_weap] 15 }
        }
    else
    ife CHAR 7
        ife SPECIALIST_EQUIPMENT[19] 2
            {
            ifg kickbackpic 6
            ifg HEAT_SINKS 0
            ifg GUN_HEAT[cur_weap] 15 { soundonce HEAT_SINK_EJECT shoot HEAT_SINK sub HEAT_SINKS 1 setarray GUN_HEAT[cur_weap] 15 }
            }
 else
 ifl kickbackpic 6
    {
       switch CHAR
        case 0
        ifn SPECIALIST_EQUIPMENT[22] 2 // Not using AN-94?
        ifn SPECIALIST_EQUIPMENT[72] 2 // Player NOT using Gilboa?
       ife rifle_mag cur_ammo
        {
        ife kickbackpic 0 state masterkey_reload
        }
       else
       ifn SPECIALIST_EQUIPMENT[22] 2 // Player NOT using AN-94?
       ifn SPECIALIST_EQUIPMENT[72] 2 // Player NOT using Gilboa?
       ife max_rifle_mag rifle_mag
        {
        ife kickbackpic 0 state masterkey_reload
        }
        else
           {
           ife SPECIALIST_EQUIPMENT[22] 2 // using An-94?
                {
                ife rifle_mag cur_ammo break
                ife rifle_mag max_rifle_mag break
                }
           ife SPECIALIST_EQUIPMENT[72] 2 // using Gilboa?
                {
                ife rifle_mag cur_ammo break
                ife rifle_mag max_rifle_mag break
                }
           ifl kickbackpic 8
               {
               ife SPECIALIST_EQUIPMENT[22] 2 set WEAPON9_RELOAD 38
               else ife SPECIALIST_EQUIPMENT[72] 2 set WEAPON9_RELOAD 43
               else set WEAPON9_RELOAD 43
               }
           setp[].reloading 1
           setp[].kickback_pic 6
            }
    break
    case 1
        ife SPECIALIST_EQUIPMENT[93] 2 // using the annihilator?
            {
            ife rifle_mag cur_ammo break
            ife rifle_mag max_rifle_mag break
           setp[].reloading 1
           setp[].kickback_pic 6
           }
    break
    case 5
        ife rifle_mag cur_ammo break
        ife rifle_mag max_rifle_mag break
       setp[].reloading 1
       setp[].kickback_pic 6
    break
    case 3
        ife SPECIALIST_EQUIPMENT[35] 2 set WEAPON9_RELOAD 78
        else ife SPECIALIST_EQUIPMENT[11] 2 set WEAPON9_RELOAD 42
        else set WEAPON9_RELOAD 64
        ife MACHINE_MAG cur_ammo break
        ife MACHINE_MAG MAX_MACHINE_MAG break
        setp[].reloading 1
        setp[].kickback_pic 5
    break
    endswitch
}
}
else
ife cur_weap 11 // SLUG SHOTGUN
 ifl kickbackpic 6
{
    switch CHAR
    case 0
        ife SLUGSHOTMAG cur_ammo break
        ife SPECIALIST_EQUIPMENT[49] 2 break
        else ife SLUGSHOTMAG 5 break
        setp[].reloading 1
        setp[].kickback_pic 6
    break
    case 10
        ife SLUGSHOTMAG cur_ammo break
        ife SLUGSHOTMAG 10 break
        setp[].reloading 1
        setp[].kickback_pic 6
    break
    case 14
	 ife SPECIALIST_EQUIPMENT[96] 2 // using ARX?
		{
        ife SLUGSHOTMAG cur_ammo break
        ife SLUGSHOTMAG 10 break
        setp[].reloading 1
        setp[].kickback_pic 6
		}
    break
    case 17
        ife SLUGSHOTMAG cur_ammo break
        ife SLUGSHOTMAG 35 break
        setp[].reloading 1
        setp[].kickback_pic 6
    break
    default
    break
    endswitch
}

ifcount 13
 ifand BITS_PRESS P_SPRINTING
  ife player[].reloading 0
	{
	set sprint_holster 1
	ife cur_weap 0 sound WEAPON0_SELECTSOUND
	ife cur_weap 1 sound WEAPON1_SELECTSOUND
	ife cur_weap 2 sound WEAPON2_SELECTSOUND
	ife cur_weap 3 sound WEAPON3_SELECTSOUND
	ife cur_weap 4 sound WEAPON4_SELECTSOUND
	ife cur_weap 5 sound WEAPON5_SELECTSOUND
	ife cur_weap 6 sound WEAPON6_SELECTSOUND
	ife cur_weap 7 sound WEAPON7_SELECTSOUND
	ife cur_weap 8 sound WEAPON8_SELECTSOUND
	ife cur_weap 9 sound WEAPON9_SELECTSOUND
	ife cur_weap 10 sound WEAPON10_SELECTSOUND
	ife cur_weap 11 sound WEAPON11_SELECTSOUND
	setplayer[].holster_weapon 1
	resetcount
	}

endevent

// END RELOAD KEY

// FIRE KEY============================================================================================

defstate shoot_cased_grenades
    ifand AMMO_TYPES[cur_weap] 32
    ifg fortymm_shells 0
        {
        set gl_countd 46
        eshoot 16005
        setthisprojectile[RETURN].bounces 3
        setthisprojectile[RETURN].pal 21
        setthisprojectile[RETURN].extra 300
        setthisprojectile[RETURN].vel 900
        setthisprojectile[RETURN].drop -80
        setthisprojectile[RETURN].hitradius 3096
        soundvar temp9
        sub fortymm_shells 1
        resetcount
        }
    else
    ifand AMMO_TYPES[cur_weap] 128
    ifg fortymm_MIA_shells 0
        {
        set gl_countd 46
        shoot 9376
        soundvar temp9
        sub fortymm_MIA_shells 1
        resetcount
        }
    else
    ifand AMMO_TYPES[cur_weap] 256
    ifg fortymm_plasma 0
        {
        set gl_countd 46
        shoot CYCLOID_PLASMA
        sound CY_PLASMA_FIRE
        soundvar temp9
        sub fortymm_plasma 1
        resetcount
        }
    else
    ifg fortymm_grenades 0
        {
        set gl_countd 46
        shoot FORTYMM_NADE
        soundvar temp9
        ife CHAR 0 ife SPECIALIST_EQUIPMENT[77] 2 { getplayer[].ammo_amount 4 fortymm_grenades sub fortymm_grenades 1 setplayer[].ammo_amount 4 fortymm_grenades }
        sub fortymm_grenades 1
        resetcount
        }
    else state dry_fire
ends

defstate shoot_caseless_grenades
    ifand AMMO_TYPES[cur_weap] 512
    ifg fortymm_slug 0
        {
        set gl_countd 46
        shoot 5125
        sound SLUGFIRE
        soundvar temp9
        sub fortymm_slug 1
        resetcount
        }
    else
    ifand AMMO_TYPES[cur_weap] 2048
    ifg fortymm_electro 0
        {
        set gl_countd 46
        shoot 22610
        shoot 22610
        shoot 22610
        shoot 22610
        shoot 22610
        soundvar temp9
        sound MANACLE_FIRE
        sub fortymm_electro 1
        resetcount
        }
    else
    ifand AMMO_TYPES[cur_weap] 4096
    ifg fortymm_cryo 0
        {
        set gl_countd 46
        shoot 7160
        soundvar temp9
        sound GREMGUN_ICE
        sub fortymm_cryo 1
        resetcount
        }
    else
    ifg fortymm_caseless 0
        {
        set gl_countd 46
        shoot GP30_NADE
        soundvar temp9
        sub fortymm_caseless 1
        resetcount
        }
    else state dry_fire
ends

onevent EVENT_PRESSEDFIRE


ife CHARSELECT 0
ife MOUSEUP 0
{
ife cur_weap 0
    {
        ifl temp_wep_mag 1
            {
            ife temp_weap 21 { state dry_fire set RETURN 1 }
            ife temp_weap 22 { state dry_fire set RETURN 1 }
            ife temp_weap 25 { state dry_fire set RETURN 1 }
            ife temp_weap 26 { state dry_fire set RETURN 1 }
            ife temp_weap 31 { state dry_fire set RETURN 1 }
            ife temp_weap 35 { state dry_fire set RETURN 1 }
            ife temp_weap 45 { state dry_fire set RETURN 1 }
            ife temp_weap 47 { state dry_fire set RETURN 1 }
            ife temp_weap 52 { state dry_fire set RETURN 1 }
			ife temp_weap 53 { state dry_fire set RETURN 1 }
			ife temp_weap 54 { state dry_fire set RETURN 1 }
            }

    ife temp_weap 25
     ife MOUSEUP 0
        {
          ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
             ife player_in_vehicle 0
             ife player[].weapon_pos 0
                {
                set temp9 M203_GL
                state shoot_cased_grenades
                }
            }
        }

    ife temp_weap 26
     ife MOUSEUP 0
        {
          ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
             ife player_in_vehicle 0
             ife player[].weapon_pos 0
                {
                set temp9 AK47_GRENADEL
                state shoot_caseless_grenades
                }
            }
        }

    ife temp_weap 32 ifg nuke_countd 0 ifand gun_firemode_two 2 set RETURN 1
        }
ife cur_weap 1
{
ife CHAR 1 // Zaxtor
 ifn SPECIALIST_EQUIPMENT[37] 2
  ifn SPECIALIST_EQUIPMENT[82] 2
   {
   ifand gun_firemode 32768
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player_in_vehicle 0
          ife player[].weapon_pos 0
            {
            set temp9 ZAX_GLFIRE
            state shoot_cased_grenades
            }
        }
   }

 ifl PISTOLMAG 1
  ifn gun_mag -1
    {
    switch CHAR
    case 0
    case 1
    case 3
    case 5
	case 6
    case 7
    case 10
    case 13
	case 15
	case 16
	case 18
     state dry_fire
     set RETURN 1
     break
    default
     set RETURN 0
     break
    endswitch
    }
ife CHAR 14 ifg GUN_CHARGE 0 set RETURN 1
}
else
ife cur_weap 3 // Assault Rifles, SMGs, .etc
 ife MOUSEUP 0
    {
    ife CHAR 3
    {
     ife SPECIALIST_EQUIPMENT[7] 2
      ifand gun_firemode 32768
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player_in_vehicle 0
         ife player[].weapon_pos 0
            {
            set temp9 M203_GL
            state shoot_cased_grenades
            }
        }
    else
      ifand gun_firemode 32768
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player[].weapon_pos 0
            {
            set temp9 AK47_GRENADEL
            state shoot_caseless_grenades
            }
        }
    }


    ife CHAR 0 // James' Mp5 GL
     ife MOUSEUP 0
      ife player_in_vehicle 0
     ife SPECIALIST_EQUIPMENT[8] 2
      ifand gun_firemode 32768
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player[].weapon_pos 0
            {
            set temp9 M203_GL
            state shoot_cased_grenades
            }
        }
    ife CHAR 4 // Sang's F2000 GL
     ife MOUSEUP 0
      ife player_in_vehicle 0
      {
     ife SPECIALIST_EQUIPMENT[71] 2
      ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
             ife player[].weapon_pos 0
                {
                set temp9 M203_GL
                state shoot_cased_grenades
                }
            }
            else
     ife SPECIALIST_EQUIPMENT[74] 2
      ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
             ife player[].weapon_pos 0
                {
                set temp9 AK47_GRENADEL
                state shoot_caseless_grenades
                }
            }
        }
    ife CHAR 5
     ife SPECIALIST_EQUIPMENT[27] 2 // AK-74
      ifand gun_firemode 32768
         ife MOUSEUP 0
          ife player_in_vehicle 0
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player[].weapon_pos 0
            {
            set temp9 AK47_GRENADEL
            state shoot_caseless_grenades
            }
        }

	ife CHAR C_CULTIST
	{
		// If we're technically out of ammo for the weapon but have switched to a different ammo type for which ammo is remaining,
		// this hack gets around the hardcoded trouble by adding + 1 to the ammo pool prior to firing.
		// This hack is imperfect, as the value isn't subtracted after firing, but you need to really be focussing to notice it and it doesn't give you much of an advantage either so it's fine.
		ifand AMMO_TYPES[cur_weap] 2 // silver
		  ifg silver_ammo 0
		{
			getp[].ammo_amount 3 temp
			ife temp 0
				add temp 1
			setp[].ammo_amount 3 temp
		}

		else ifand AMMO_TYPES[cur_weap] 32768 // incendiary
		  ifg incend_ammo 0
		{
			getp[].ammo_amount 3 temp
			ife temp 0
				add temp 1
			setp[].ammo_amount 3 temp
		}
	}

    ife CHAR 10 // EAF Grunt's GL
      ifand gun_firemode 32768
         ife MOUSEUP 0
          ife player_in_vehicle 0
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player[].weapon_pos 0
            {
                set temp9 M203_GL
                state shoot_cased_grenades
            }
        }
    ife CHAR 13
     ifn SPECIALIST_EQUIPMENT[48] 2
      ifand gun_firemode 32768
        {
        set RETURN -1
        ife gl_countd 0
        ifl kickbackpic 4
         ife player_in_vehicle 0
         ife player[].weapon_pos 0
            {
            set temp9 M203_GL
            state shoot_cased_grenades
            }
        }

     ifle MGUNMAG 0
	  ifn gun_mag -1
        {
        switch CHAR
        case 0
        case 3
        case 4
        case 5
        case 6
        case 7
        case 10
        case 12
        case 13
        case 14
		case 16
        case 17
		case 18
        state dry_fire
        set RETURN 1
        break
        default
        set RETURN 0
        break
        endswitch
        }
    }
else
ife cur_weap 6
 {
 ife CHAR 0
  ife slot6_mag 0
   ifn SPECIALIST_EQUIPMENT[49] 2 // not using the explosive crossbow?
    {
    state dry_fire
    set RETURN -1
    }
 ife CHAR 7
  ife SPECIALIST_EQUIPMENT[59] 2
   ife rifle_mag 0
    {
    state dry_fire
    set RETURN -1
    }
 ife CHAR 14
  ife SPECIALIST_EQUIPMENT[96] 2 // using the ARX?
  ife slot6_mag 0
    {
    state dry_fire
    set RETURN -1
    }
 ife CHAR 17
  ife slot6_mag 0
    {
    state dry_fire
    set RETURN -1
    }
 }
else
ife cur_weap 7
    {
    ife CHAR 0
     ife MOUSEUP 0
      ife player_in_vehicle 0
    {
         ife SPECIALIST_EQUIPMENT[45] 2
          ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
             ife player[].weapon_pos 0
                {
                set temp9 M203_GL
                state shoot_cased_grenades
                }
            }
        else
         ife SPECIALIST_EQUIPMENT[78] 2
          ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
             ife player[].weapon_pos 0
                {
                set temp9 M203_GL
                state shoot_cased_grenades
                }
            }
        else
     ife MACHINE_MAG 0
        {
         state dry_fire
        set RETURN -1
        }
    }
        else
    ife CHAR 3
     ife ROCKETMAG 0
        {
         state dry_fire
        set RETURN -1
        }
        else
        set RETURN 0
    }
else
ife cur_weap 9
    {
    ife CHAR 0
     ife MOUSEUP 0
      ife player_in_vehicle 0
        {
        ife SPECIALIST_EQUIPMENT[22] 2 // AN-94?
        ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
                {
                set temp9 AK47_GRENADEL
                state shoot_caseless_grenades
                }
            }

        ife SPECIALIST_EQUIPMENT[72] 2 // Gilboa?
        ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
                {
                set temp9 M203_GL
                state shoot_cased_grenades
                }
            }

         ife rifle_mag 0
		  ifn gun_mag -1
            {
             state dry_fire
            set RETURN -1
            }
        }
    else
    ife CHAR 1
        {
        ife SPECIALIST_EQUIPMENT[93] 2
         ife rifle_mag 0
            {
             state dry_fire
            set RETURN -1
            }
        }
    else
    ife CHAR 3
     ife MACHINE_MAG 0
        {
         state dry_fire
        set RETURN -1
        }
    else
    ife CHAR 5
     ife MOUSEUP 0
      ife player_in_vehicle 0
        {
          ifand gun_firemode 32768
            {
            set RETURN -1
            ife gl_countd 0
            ifl kickbackpic 4
                {
                set temp9 M203_GL
                state shoot_cased_grenades
                }
            }
            else
            ife rifle_mag 0
                {
                 state dry_fire
                set RETURN -1
                }
        }
        else
        set RETURN 0
    }
else
ife cur_weap 11
    {
    switch CHAR
	case 14
   ife SLUGSHOTMAG 0
    ife SPECIALIST_EQUIPMENT[96] 2 // using the ARX?
		{
		state dry_fire
		set RETURN -1
		}
	break
    case 17
    ife SLUGSHOTMAG 0
        {
        state dry_fire
        set RETURN -1
        }
    break
    endswitch
    }
}


ife userdef[].overhead_on 2
	{
	set RETURN 1
	getp[].zoom temp
	add temp 64
	clamp temp 48 2048
	setp[].zoom temp
	}


endevent

onevent EVENT_FIRE
ifg cameratype 1 set RETURN 1 // lock this if camera type is 2 or 3
ifn using_turret -1 set RETURN 1

ife cur_weap 2 // =================================================================================================================================================================================
    {
    switch CHAR
    case 0 // James
		ife JAMES_JACKH 1 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } } else
		ife SPECIALIST_EQUIPMENT[61] 2 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } } else
		ife SPECIALIST_EQUIPMENT[53] 2 // using KSG-12?
		{
		ifand gun_firemode_two 8 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } } else
		ifl SHOTGUNMAG 1 { ifand gun_firemode_two 8 nullop else { state dry_fire set RETURN 1 } }
		}
		else
		ifl SHOTGUNMAG 1 { state dry_fire set RETURN 1 }
		 break
    case 7 // Mikko ================================================
		ife SPECIALIST_EQUIPMENT[30] 2 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } } else
		ife SPECIALIST_EQUIPMENT[85] 2 // using MSC-12?
			{
			ifand gun_firemode_two 8 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } } else
			ifl SHOTGUNMAG 1 { ifand gun_firemode_two 8 nullop else { state dry_fire set RETURN 1 } }
			}
		else
		ifl SHOTGUNMAG 1 { state dry_fire set RETURN 1 }
		 break
    case 3 // Highwire ================================================
		ife SPECIALIST_EQUIPMENT[13] 2 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } }
		else
		ife SPECIALIST_EQUIPMENT[65] 2 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } }
		else
		ifl SHOTGUNMAG 1 { state dry_fire set RETURN 1 }
		 break
    case 5 // Rusty ==============================================================================================
		 ife SPECIALIST_EQUIPMENT[66] 2 nullop else
		 ife SPECIALIST_EQUIPMENT[116] 2 { ifl SHOTGUNMAG 1 { state dry_fire set RETURN 1 } } else
		 ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 }
		 break
    case 10 // Bombshell ==============================================================================================
		 ifl slot6_mag 1 { state dry_fire set RETURN 1 }
		 break
    case 12 // Jane ==============================================================================================
		ife SPECIALIST_EQUIPMENT[122] 2 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } }
		else
			{
			ifand gun_firemode_two 8 { ifl SHOTGUNBOXMAG 1 { state dry_fire set RETURN 1 } } else
			ifl SHOTGUNMAG 1 { ifand gun_firemode_two 8 nullop else { state dry_fire set RETURN 1 } }
			}
		break
    default
		break
    endswitch
    }
else
ife cur_weap 3 // =================================================================================================================================================================================
    {
    ife CHAR 1
     ife SPECIALIST_EQUIPMENT[70] 2
      ife kickbackpic 0
        {
        ifg nuke_countd 0 ifand gun_firemode_two 2 set RETURN 1
		else
			{
			ifand gun_firemode_two 1 { ifg player[].ammo_amount 5 0 ifg heat_seek_card 0 setp[].kickback_pic 2 set RETURN 1 }
			else ifand gun_firemode_two 2 { ife nuke_countd 0 ifg atomic_bomb 0 setp[].kickback_pic 2 set RETURN 1 }
			else ifand gun_firemode_two 4 { ifg DUP_missile_ammo 0 setp[].kickback_pic 2 set RETURN 1 }
			else ifand gun_firemode_two 128 { ifg player[].ammo_amount 5 0 setp[].kickback_pic 2 set RETURN 1 }
			}
        }
    ife CHAR 3
    ife SPECIALIST_EQUIPMENT[14] 2
     ife kickbackpic 0
        {
        ifg gl_countd 0 ifand gun_firemode_two 2 set RETURN -1
		else
			{
			ifand gun_firemode_two 1 { ifg player[].ammo_amount 5 0 ifg heat_seek_card 0 setp[].kickback_pic 2 set RETURN 1 }
			ifand gun_firemode_two 2 { ife gl_countd 0 ifg atomic_bomb 0 setp[].kickback_pic 2 set RETURN 1 }
			ifand gun_firemode_two 4 { ifg DUP_missile_ammo 0 setp[].kickback_pic 2 set RETURN 1 }
			ifand gun_firemode_two 128 { ifg player[].ammo_amount 5 0 setp[].kickback_pic 2 set RETURN 1 }
			}
        }

    }
else
ife cur_weap 4 // =================================================================================================================================================================================
    {
    switch CHAR
    case 0
    ifn gun_mag -1
     ifl ROCKETMAG 1 { state dry_fire set RETURN 1 }
     break
	case 5
    case 7
    case 10
    case 12
     ifl ROCKETMAG 1 { state dry_fire set RETURN 1 }
     break
    default
     break
    endswitch
    }
else
ife cur_weap 6 // =================================================================================================================================================================================
    {
    switch CHAR
    case 0
     ife SPECIALIST_EQUIPMENT[49] 2 break
     ifl slot6_mag 1 { state dry_fire set RETURN 1 }
     break
    case 3
     ifl rifle_mag 1 { state dry_fire set RETURN 1 }
     break
    case 7
     ifl rifle_mag 1 ife SPECIALIST_EQUIPMENT[59] 2 { state dry_fire set RETURN 1 }
     break
    case 17
     ifl slot6_mag 1 { state dry_fire set RETURN 1 }
     break
    default
     break
    endswitch
    }
else
ife cur_weap 8 // =================================================================================================================================================================================
    {
    switch CHAR
    case 0
    case 2
    case 5
    case 6
    case 11
    case 13
    case 17
	case 18
		ifn player[].ammo_amount 8 0 ife kickbackpic 0 setp[].kickback_pic 1
		break
	case 7
		 ife SPECIALIST_EQUIPMENT[114] 2 // using the gold mikko statue?
			{
			ifn player[].ammo_amount 8 0 ife kickbackpic 0 setp[].kickback_pic 1
			}
		break
	case 14
		 ife SPECIALIST_EQUIPMENT[115] 2 // using the Tron disc?
			{
			ifn player[].ammo_amount 8 0 ife kickbackpic 0 setp[].kickback_pic 1
			}
		break
    case 4
		ifn player[].ammo_amount 8 0 ife kickbackpic 0 { setp[].kickback_pic 1 sound HEART_LEECHF }
		break
    default
		break
    endswitch
    }
else
ife cur_weap 11 // =================================================================================================================================================================================
    {
    switch CHAR
    case 0
    case 17
     ifl SLUGSHOTMAG 1 { state dry_fire set RETURN 1 }
     break
    default
     break
    endswitch
    }
else
set RETURN 0
endevent

// END FIRE KEY========================================================================================

defstate MEDIKIT_USE
ifg MEDIKIT_USING 0
    {
        ifp pdead break
    ife CHAR 0 set itemsound JAMES_FIRSTAID
	ife CHAR 1 set itemsound MED_GEL
    ife CHAR 2 set itemsound DRINKELIXER
    ife CHAR 3 set itemsound HIGH_FIRSTAID
    ife CHAR 4 set itemsound SANG_FIRSTAID
    ife CHAR 5 set itemsound DRINKSOME
    ife CHAR 6 set itemsound GEO_MEDIUSE
    ife CHAR 7 set itemsound MED_GEL
    ife CHAR 9 set itemsound SANG_FIRSTAID
    ife CHAR 10 set itemsound JAMES_FIRSTAID
    ife CHAR 11 set itemsound DRINKELIXER
    ife CHAR 12 set itemsound MED_GEL
    ife CHAR 13 set itemsound HIGH_FIRSTAID
    ife CHAR 14 set itemsound SF_HEAL
    ife CHAR 15 set itemsound HIGH_FIRSTAID
	ife CHAR 16 set itemsound DRINKELIXER
    ife CHAR 17 set itemsound DRINKELIXER
	soundoncevar itemsound

	getp[].firstaid_amount temp8
	mul temp8 2
	setactorsoundpitch THISACTOR itemsound temp8

    ife MYSTICAL_RESEARCH[5] 2 // improved kit speed?
        {
        getp[].firstaid_amount temp8
        sub temp8 2
        ifl temp8 0 set temp8 0
        setp[].firstaid_amount temp8

        ife PHEALTH pmax_health
            {
            getp[].firstaid_amount temp7
            add temp7 MEDIKIT_USING
            setp[].firstaid_amount temp7
            set MEDIKIT_USING 0
            }

        geta[].extra temp4
        add temp4 2
        seta[].extra temp4
        sub MEDIKIT_USING 2
        ifl MEDIKIT_USING 0 set MEDIKIT_USING 0
        }

    else
        {
        getp[].firstaid_amount temp8
        sub temp8 1
        setp[].firstaid_amount temp8

        ife PHEALTH pmax_health
            {
            getp[].firstaid_amount temp7
            add temp7 MEDIKIT_USING
            setp[].firstaid_amount temp7
            set MEDIKIT_USING 0
            }

        geta[].extra temp4
        add temp4 1
        seta[].extra temp4
        sub MEDIKIT_USING 1
        }

    }
ends



onevent EVENT_USEMEDKIT
set RETURN 1
ifl MEDIKIT_USING 0 set MEDIKIT_USING 0

ifn CURSED 0 { palfrom 20 40 0 40 soundonce P_CURSED }

ife CURSED 0
ifg player[].firstaid_amount 0
ifl PHEALTH pmax_health
ife MEDIKIT_USING 0
{
	set OXYGEN_HIT 0
    getp[].firstaid_amount temp8
    set temp3 PHEALTH
    set temp2 pmax_health
    sub temp2 temp3
    sub temp8 temp2
    ifl temp8 0 { add temp2 temp8 set temp8 0 setp[].inven_icon 0 }
    ifmultiplayer set MEDIKIT_USING temp2
    else
    ife SKILL_LEVEL 1 // Apply it instantly if on easy
        {
        geta[PLAYER_IDENTITY].extra temp4
        add temp4 temp2
        seta[PLAYER_IDENTITY].extra temp4
        setp[].firstaid_amount temp8
        }
        else set MEDIKIT_USING temp2


    ifg flash_banged 0 set flash_banged 0

    ifp pdead set MEDIKIT_USING 0

	ife PERSONNEL_RESEARCH[33] 2 // emergency shield
		{
		set P_REC_DELAY 0
		}

    ife PERSONNEL_RESEARCH[13] 2 // medical foam?
     ifg fire_damage 0
        {
        set fire_damage 0
        palfrom 10 0 0 10
        }

    ife PERSONNEL_RESEARCH[19] 2 // de-thawing kit
     ifg ice_damage 0
        {
        set screen_pal 10
        set ice_damage 0
        palfrom 10 0 0 10
        }

    ife PERSONNEL_RESEARCH[5] 2 // anti-toxin?
    {
    ifg INEBRIATION 0 set INEBRIATION 0 // instant deboozing
     ifg BLINDED 0
        {
        set BLINDED 0
        palfrom 10 0 0 10
        }
    }

    ife INVEN_REPLACE 1 soundonce EATSOME
    else
    {
     ife CHAR 0 soundonce J_USEMEDKIT
     ife CHAR 1 soundonce ZAHH
     ife CHAR 2 soundonce DRINKELIXER
     ife CHAR 3 soundonce RAHH
     ife CHAR 4 soundonce SAHH
     ife CHAR 5 soundonce DRINKSOME
     ife CHAR 6 soundonce GEO_MEDIKIT
     ife CHAR 10 soundonce BS_AHH
     ife CHAR 11 soundonce DRINKELIXER
     ife CHAR 12 soundonce JA_AHH
     ife CHAR 14 soundonce SF_MEDIKIT
     ife CHAR 17 soundonce DRINKELIXER
    }
}

endevent

defstate CHARSELLEFT
ife CHARSELECT 1
{
    ifl CHARSHADE 10
    {
    sound SELECT
    set CHARSHADE 20
    ifg CHAR 7 set CHAR 0 else
    ifg CHAR 3 { sub CHAR 1 ifl CHAR 4 set CHAR 7 } else
    ifg CHAR -1 { sub CHAR 1 ifl CHAR 0 set CHAR 3 }
}
}
ends

defstate CHARSELRIGHT
ife CHARSELECT 1
{
    ifl CHARSHADE 10
    {
    sound SELECT
    set CHARSHADE 20
    ifg CHAR 7 set CHAR 0 else
    ifg CHAR 3 { add CHAR 1 ifg CHAR 7 set CHAR 4 } else
    ifg CHAR -1 { add CHAR 1 ifg CHAR 3 set CHAR 0 }
    }
}
ends

defstate CHARSELLUPDOWN
ife CHARSELECT 1
{
    ifl CHARSHADE 10
    {
    sound SELECT
    set CHARSHADE 20
    ifg CHAR 7 set CHAR 4
    sub CHAR 4 ifl CHAR 0 add CHAR 8
    }
}
ends

defstate JMOVESOUND
 ife MOVESOUND 0
  ife MOUSEUP 0
   ife DOCUMENT -1
    ife CHARSELECT 0
     ife MISSION_UP 0
    {
switch CHAR
case 0
case 7
case 10
    ifrnd 64 soundonce JMOVE1 else
    ifrnd 64 soundonce JMOVE2 else
    ifrnd 64 soundonce JMOVE3 else
    soundonce JMOVE4
    set MOVESOUND 1
break
endswitch
    }
ends


onevent EVENT_STRAFELEFT state JMOVESOUND state CHARSELLEFT endevent
onevent EVENT_TURNLEFT ifl input[].avel -30 ife player[].invdisptime 0 ifg wepsway_x -12 { sub wepsway_x 4 } // state CHARSELLEFT
endevent

onevent EVENT_MOVEBACKWARD
state CHARSELLUPDOWN
state JMOVESOUND

set bpress 2

ifg onladder 0 ifp palive
{
    set RETURN -1
    set temp RUNNINGSPEED
    ife LADDERTYPE 0
    {
    divvar temp 50
    sub temp 512
    }
    else
    {
    divvar temp 25
    }
    set laddervel temp
}

endevent

onevent EVENT_MOVEFORWARD
state CHARSELLUPDOWN
state JMOVESOUND

set fpress 2

ifg onladder 0 ifp palive
{
    set RETURN -1
    ifp ponground
    {
        getp[].posz z
        sub z 3500
        setp[].posz z
    }
    set temp RUNNINGSPEED
    divvar temp -50
    set laddervel temp
}

endevent

onevent EVENT_AIMUP
set RETURN 1
ifcount 13
	{
	ife cur_weap 0 sound WEAPON0_SELECTSOUND
	ife cur_weap 1 sound WEAPON1_SELECTSOUND
	ife cur_weap 2 sound WEAPON2_SELECTSOUND
	ife cur_weap 3 sound WEAPON3_SELECTSOUND
	ife cur_weap 4 sound WEAPON4_SELECTSOUND
	ife cur_weap 5 sound WEAPON5_SELECTSOUND
	ife cur_weap 6 sound WEAPON6_SELECTSOUND
	ife cur_weap 7 sound WEAPON7_SELECTSOUND
	ife cur_weap 8 sound WEAPON8_SELECTSOUND
	ife cur_weap 9 sound WEAPON9_SELECTSOUND
	ife cur_weap 10 sound WEAPON10_SELECTSOUND
	ife cur_weap 11 sound WEAPON11_SELECTSOUND
	ife player[].holster_weapon 1
		setplayer[].holster_weapon 0
	else setplayer[].holster_weapon 1
	resetcount
	}
endevent

onevent EVENT_AIMDOWN state CHARSELLUPDOWN endevent

onevent EVENT_STRAFERIGHT state JMOVESOUND state CHARSELRIGHT endevent
onevent EVENT_TURNRIGHT ifg input[].avel 30 ife player[].invdisptime 0 ifl wepsway_x 12 add wepsway_x 4  // state CHARSELRIGHT
endevent

defstate RADIO_WAIT_SOUNDS
ife CHAR 0 set playsound J_WAIT
ife CHAR 1 set playsound Z_WAIT
ife CHAR 2 set playsound M_WAIT
ife CHAR 3 set playsound R_WAIT
ife CHAR 4 set playsound S_WAIT
ife CHAR 5 set playsound RN_WAIT
ife CHAR 6 { ifrnd 128 set playsound G_WAIT else set playsound G_WAIT2 }
ife CHAR 7 set playsound MS_WAIT
ife CHAR 13 set playsound MC_WAIT
ife CHAR 14 set playsound SF_WAIT
ife CHAR 15 set playsound MC_WAIT
ife CHAR 17 set playsound KG_WAIT
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
ends

defstate RADIO_FOLLOW_SOUNDS
ife CHAR 0 set playsound J_FOLLOW
ife CHAR 1 set playsound Z_FOLLOW
ife CHAR 2 set playsound M_FOLLOW
ife CHAR 3 set playsound R_FOLLOW
ife CHAR 4 set playsound S_FOLLOW
ife CHAR 5 set playsound RN_FOLLOW
ife CHAR 6 set playsound G_FOLLOW
ife CHAR 7 set playsound MS_FOLLOW
ife CHAR 13 set playsound MC_FOLLOW
ife CHAR 14 set playsound SF_FOLLOW
ife CHAR 15 set playsound MC_FOLLOW
ife CHAR 17 set playsound KG_FOLLOW
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
ends

defstate RADIO_BACKUP_SOUNDS
ife CHAR 0 set playsound J_BACKUP
ife CHAR 1 set playsound Z_BACKUP
ife CHAR 2 set playsound M_BACKUP
ife CHAR 3 set playsound R_BACKUP
ife CHAR 4 set playsound S_BACKUP
ife CHAR 5 set playsound RN_BACKUP
ife CHAR 6 set playsound G_BACKUP
ife CHAR 7 set playsound MS_BACKUP
ife CHAR 13 set playsound MC_BACKUP
ife CHAR 14 set playsound SF_HELPME
ife CHAR 15 set playsound MC_BACKUP
ife CHAR 17 set playsound KG_NEEDBAK
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
ends

defstate RADIO_COVER_SOUNDS
ife CHAR 0 set playsound J_COVER
ife CHAR 1 set playsound Z_COVER
ife CHAR 2 set playsound M_COVER
ife CHAR 3 set playsound R_COVER
ife CHAR 4 set playsound S_COVER
ife CHAR 5 set playsound RN_COVER
ife CHAR 6 set playsound G_COVER
ife CHAR 7 set playsound MS_COVER
ife CHAR 13 set playsound MC_COVER
ife CHAR 14 set playsound SF_COVER
ife CHAR 15 set playsound MC_COVER
ife CHAR 17 set playsound KG_COVME
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
ends

defstate STOP_WEAPON_CHANGE // disable weapon switching if any of these are true
ife userdef[].overhead_on 2 set RETURN -1 else
ife P_SWHEEL 1 set RETURN -1 else
ifn scope 0 set RETURN -1 else
ifn loading 0 set RETURN -1 else
ifg CHOKE 0 set RETURN -1 else
ifg troll_struggle -1 set RETURN 1 else
ifg succubus_struggle -1 set RETURN 1 else
ifn PCINTER 0 set RETURN -1 else
ifn camerasprite -1 set RETURN -1 else
// ife player_in_vehicle 1 set RETURN -1 else
ifg shotgun_struggle -1 set RETURN 1 else
ifn phantasm_stick -1 set RETURN -1 else
ife MISSION_UP 1 set RETURN -1 else
ifand gun_firemode 16384 set RETURN -1 else
ifl UPPER_CUT 20 set RETURN -1 else
ifg GUN_CHARGE 0 set RETURN -1
ends

defstate disable_weap_key
ifn PCINTER 0 set RETURN -1
state stop_throw
state STOP_WEAPON_CHANGE
ends

defstate toggle_cased_gl
	ife player[].weapon_pos 0
	{
		ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
		{ quote 272 xorvar gun_firemode 32768 }
		set weap_show 130
		state lower_weapon
		soundonce WEAP_FIRE_MODE
	}
    set fire_mode_menu 0
    set RETURN -1
ends

onevent EVENT_WEAPKEY1 // JAMES OR FOOT
state disable_weap_key
    ife CHARSELECT 1
    {
        ifl CHARSHADE 10
        {
        sound SELECT
        set CHARSHADE 20
        set CHAR 0
        }
    }

  ife cur_weap 0
  ife fire_mode_menu 0
  {
   ifand GUN_AMMO_TYPES 32
    {
		ife player[].weapon_pos 0
		{
			// Switching from GL to standard attack
			ifand gun_firemode 32768
			{
				quote 273
				xor gun_firemode 32768
			}
			// Switching from standard attack to GL
			else
			{
				or gun_firemode 32768
				quote 272
			}

			set weap_show 130
			state lower_weapon
            soundonce WEAP_FIRE_MODE
		}
        set fire_mode_menu 0
        set RETURN -1
    }
    else
   ifand GUN_AMMO_TYPES 64
    {
        ife player[].weapon_pos 0
		{
			// Switching from GL to standard attack
			ifand gun_firemode 32768
			{
				quote 273
				xor gun_firemode 32768
			}
			// Switching from standard attack to GL
			else
			{
				or gun_firemode 32768
				quote 272
			}

			set weap_show 130
			state lower_weapon
            soundonce WEAP_FIRE_MODE
		}
        set fire_mode_menu 0
        set RETURN -1
    }
    else
   ifand GUN_AMMO_TYPES 2048
    {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }
    else
   ifand GUN_AMMO_TYPES 4096
    {
            ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }
   }


ife fire_mode_menu 1
ifand GUN_AMMO_TYPES 1
ifg explosive_shells 0
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
        ife cur_weap 9
        ifand weap_special[9] 4
            {
            ifand AMMO_TYPES[cur_weap] 1 break else { quote 207 xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            getp[].ammo_amount 2 temp3 add temp3 ALTMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[cur_weap] 4 { xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 add flechete_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 64 { xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 add magnum_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 1024 { xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 add dragon_shells ALTMAG }
            set ALTMAG 0
            state lower_weapon
            }
            else
            ifn cur_weap 0
        ifand gun_firemode_two 8
            {
            ifand AMMO_TYPES[15] 1 break else { quote 207 xorvar AMMO_TYPE_2 1 setarray AMMO_TYPES[15] AMMO_TYPE_2
            getp[].ammo_amount 2 temp3 add temp3 SHOTGUNBOXMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[15] 4 { xorvar AMMO_TYPE_2 4 setarray AMMO_TYPES[15] AMMO_TYPE_2 add flechete_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 64 { xorvar AMMO_TYPE_2 64 setarray AMMO_TYPES[15] AMMO_TYPE_2 add magnum_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 1024 { xorvar AMMO_TYPE_2 1024 setarray AMMO_TYPES[15] AMMO_TYPE_2 add dragon_shells SHOTGUNBOXMAG }
            state lower_weapon
                ifn gun_mag -1
                    {
                    ife CHAR 0 ife cur_weap 2 set SHOTGUNBOXMAG 0
                    ife CHAR 7 ife cur_weap 2 set SHOTGUNBOXMAG 0
                    ife CHAR 12 ife cur_weap 2 set SHOTGUNBOXMAG 0
                    }
            }
        else
            {
            ifand AMMO_TYPES[cur_weap] 1 break else
                {
                quote 207 xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1
                 ifn cur_weap 0
                    {
                    ifn CHAR 9
                        {
                        getp[].ammo_amount 2 temp3
                        ifand weap_special[2] 4 add temp3 SHOTGUNBOXMAG else
                        add temp3 SHOTGUNMAG
                        setp[].ammo_amount 2 temp3
                        }
                    }
                }
            ifand AMMO_TYPES[cur_weap] 4
            {
            set AMMO_TYPE AMMO_TYPES[cur_weap]
            xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add flechete_shells SHOTGUNBOXMAG else add flechete_shells SHOTGUNMAG }
            }
            else ifand AMMO_TYPES[cur_weap] 64
            {
            xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add magnum_shells SHOTGUNBOXMAG else add magnum_shells SHOTGUNMAG }
            }
            else ifand AMMO_TYPES[cur_weap] 1024
            {
            xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add dragon_shells SHOTGUNBOXMAG else add dragon_shells SHOTGUNMAG }
            }
            state lower_weapon
            state empty_shotgun
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 2
ifg silver_ammo 0 // 45 silver bullets
ife kickbackpic 0
    {
    set AMMO_TYPE AMMO_TYPES[cur_weap]
    ife player[].weapon_pos 0
        {
        ifand AMMO_TYPE 32768 xor AMMO_TYPE 32768
        ifand AMMO_TYPES[cur_weap] 2 nullop else
        { quote 205 xorvar AMMO_TYPE 2 setarray AMMO_TYPES[cur_weap] AMMO_TYPE state lower_weapon }
        }
    ife CHAR 0
        {
        ife cur_weap 1 { ife JAMES_1911 1 set PISTOLMAG 0 }
        ife cur_weap 3 { ife SPECIALIST_EQUIPMENT[55] 2 set MGUNMAG 0 }
        }
    ife CHAR 13
        {
        ife cur_weap 1 { ife SPECIALIST_EQUIPMENT[60] 2 set PISTOLMAG 0 }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 3 // Assault Rifle GL
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
        ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
        { quote 272 xorvar gun_firemode 32768 }
        state lower_weapon
        soundonce WEAP_FIRE_MODE
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 4
ifg silver_bolts 0 // Crossbow silver bolts
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
			ifand AMMO_TYPES[cur_weap] 16 nullop
			else
			{
				quote 278
				setarray AMMO_TYPES[cur_weap] 16
				state lower_weapon
			}
			setp[].ammo_amount 0 silver_bolts
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 5 // 1 second timer
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        ife cur_weap 8
        ifand gun_firemode 32
        {
        soundonce PROX_TONE
        state lower_weapon
        xorvar gun_firemode 32
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 6 // DUP missile
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        ifand GUN_AMMO_TYPES 512
        ifand gun_firemode_two 4
        {
        soundonce WEAP_FIRE_MODE
        xorvar gun_firemode_two 4
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 7 // 40mm standard shell
ife kickbackpic 0
    {
        ifand AMMO_TYPES[cur_weap] 32 { xorvar AMMO_TYPE 32 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        else ifand AMMO_TYPES[cur_weap] 128 { xorvar AMMO_TYPE 128 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        else ifand AMMO_TYPES[cur_weap] 256 { xorvar AMMO_TYPE 256 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        else break
        state lower_weapon
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 8 // 40mm caseless grenade
ife kickbackpic 0
    {
		ife player[].weapon_pos 0
		{
			ifand AMMO_TYPES[cur_weap] 64
				nullop
			else
			{
				set AMMO_TYPE 64
				setarray AMMO_TYPES[cur_weap] AMMO_TYPE
				or gun_firemode 32768
			}
		}
        state lower_weapon
		set fire_mode_menu 0
		set RETURN -1
    }
else
ife voice_comm_menu 9
{
set RETURN -1
set voice_comm_menu 1
}
else
ife voice_comm_menu 5
{
set RETURN -1
ifrnd 128 state RADIO_FOLLOW_SOUNDS
else state RADIO_BACKUP_SOUNDS
setactorvar[ALLYSLOT1].FOLLOW_PLAYER 1
setactorvar[ALLYSLOT1].ALLY_VOICE 45
set voice_comm_menu 0
}
else
ife voice_comm_menu 6
{
set RETURN -1
ifrnd 128 state RADIO_FOLLOW_SOUNDS
else state RADIO_BACKUP_SOUNDS
setactorvar[ALLYSLOT2].FOLLOW_PLAYER 1
setactorvar[ALLYSLOT2].ALLY_VOICE 45
set voice_comm_menu 0
}
else
ife voice_comm_menu 7
{
set RETURN -1
ifrnd 128 state RADIO_FOLLOW_SOUNDS
else state RADIO_BACKUP_SOUNDS
setactorvar[ALLYSLOT3].FOLLOW_PLAYER 1
setactorvar[ALLYSLOT3].ALLY_VOICE 45
set voice_comm_menu 0
}
else
ife voice_comm_menu 8
{
set RETURN -1
ifrnd 128 state RADIO_FOLLOW_SOUNDS
else state RADIO_BACKUP_SOUNDS
setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1
setactorvar[ALLYSLOT4].ALLY_VOICE 45
set voice_comm_menu 0
}
else
ife voice_comm_menu 1 // Roger
{
set RETURN -1
    ife CHAR 0 set playsound J_ROGER
    ife CHAR 1 set playsound Z_ROGER
    ife CHAR 2 set playsound M_ROGER
    ife CHAR 3 set playsound R_ROGER
    ife CHAR 4 set playsound S_ROGER
    ife CHAR 5 set playsound RN_ROGER
    ife CHAR 6 set playsound G_ROGER
    ife CHAR 7 set playsound MS_ROGER
    ife CHAR 12 set playsound JA_ROGER
    ife CHAR 13 set playsound MC_ROGER
    ife CHAR 14 set playsound SF_ROGER
    ife CHAR 15 set playsound MC_ROGER
    ife CHAR 17 { ifrnd 128 set playsound KG_ROGER1 else set playsound KG_ROGTAT }
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 640
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 2 // Thanks
{
set RETURN -1
    ife CHAR 0 set playsound J_THANKS
    ife CHAR 1 set playsound Z_THANKS
    ife CHAR 2 set playsound M_THANKS
    ife CHAR 3 set playsound R_THANKS
    ife CHAR 4 set playsound S_THANKS
    ife CHAR 5 set playsound RN_THANKS
    ife CHAR 6 set playsound G_THANKS
    ife CHAR 7 set playsound MS_THANKS
    ife CHAR 13 set playsound MC_THANKS
    ife CHAR 14 set playsound SF_THANKS
    ife CHAR 15 set playsound MC_THANKS
    ife CHAR 17 { ifrnd 127 set playsound KG_THANKS2 else set playsound KG_THANKY }
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 648
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 3 // Affirimitive
{
set RETURN -1
    ife CHAR 0 set playsound J_AFFIRM
    ife CHAR 1 set playsound Z_AFFIRM
    ife CHAR 2 set playsound M_AFFIRM
    ife CHAR 3 set playsound R_AFFIRM
    ife CHAR 4 set playsound S_AFFIRM
    ife CHAR 5 set playsound RN_AFFIRM
    ife CHAR 6 set playsound G_AFFIRM
    ife CHAR 7 set playsound MS_AFFIRM
    ife CHAR 13 set playsound MC_AFFIRM
    ife CHAR 15 set playsound MC_AFFIRM
    ife CHAR 17 { ifrnd 127 set playsound KG_YES1 else set playsound KG_AFF }
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 656
    userquote 356
set voice_comm_menu 0
}
endevent

onevent EVENT_WEAPKEY2 // ZAXTOR OR PISTOL
state disable_weap_key
ifmultiplayer
{
    ife CHARSELECT 1
    {
        ifl CHARSHADE 10
        {
        sound SELECT
        set CHARSHADE 20
        set CHAR 10
        }
    }
}
else
{
    ife CHARSELECT 1
    {
        ifl CHARSHADE 10
        {
        sound SELECT
        set CHARSHADE 20
        set CHAR 1
        }
    }
}

  ife cur_weap 1
  ife fire_mode_menu 0
  {
   ifand GUN_AMMO_TYPES 32
    {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }
    else
   ifand GUN_AMMO_TYPES 64
    {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }
    else
   ifand GUN_AMMO_TYPES 2048
    {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }
    else
   ifand GUN_AMMO_TYPES 4096
    {
            ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }
   }

ife fire_mode_menu 1
ifand GUN_AMMO_TYPES 1
ifg flechete_shells 0
ife kickbackpic 0
    {
    ife player[].weapon_pos 0
        {
        ife cur_weap 9
        ifand weap_special[9] 4
            {
            ifand AMMO_TYPES[cur_weap] 4 break else { quote 268 xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            getp[].ammo_amount 2 temp3 add temp3 ALTMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[cur_weap] 1 { xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add explosive_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 64 { xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add magnum_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 1024 { xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add dragon_shells ALTMAG }
            set ALTMAG 0
            state lower_weapon
            }
            else
        ifn cur_weap 0
    ifand gun_firemode_two 8
            {
            set AMMO_TYPE_2 AMMO_TYPES[15]
            ifand AMMO_TYPES[15] 4 break else { quote 268 xorvar AMMO_TYPE_2 4 setarray AMMO_TYPES[15] AMMO_TYPE_2
            getp[].ammo_amount 2 temp3 add temp3 SHOTGUNBOXMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[15] 1 { xorvar AMMO_TYPE_2 1 setarray AMMO_TYPES[15] AMMO_TYPE_2 add explosive_shells SHOTGUNBOXMAG }
            ifand AMMO_TYPES[15] 64 { xorvar AMMO_TYPE_2 64 setarray AMMO_TYPES[15] AMMO_TYPE_2 add magnum_shells SHOTGUNBOXMAG }
            ifand AMMO_TYPES[15] 1024 { xorvar AMMO_TYPE_2 1024 setarray AMMO_TYPES[15] AMMO_TYPE_2 add dragon_shells SHOTGUNBOXMAG }
            state lower_weapon
            ifn gun_mag -1
                {
                ife CHAR 0 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 7 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 12 ife cur_weap 2 set SHOTGUNBOXMAG 0
                }
            }
        else
            {
            set AMMO_TYPE AMMO_TYPES[cur_weap]
            ifand AMMO_TYPES[cur_weap] 1  // using explosive shells?
                {
                xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add explosive_shells SHOTGUNBOXMAG else add explosive_shells SHOTGUNMAG }
                }
            ifand AMMO_TYPES[cur_weap] 64 // using magnum shells?
                {
                xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1
                    ifn cur_weap 0
                    { ifand weap_special[2] 4 add magnum_shells SHOTGUNBOXMAG else add magnum_shells SHOTGUNMAG }
                }
            ifand AMMO_TYPES[cur_weap] 1024 // using dragon shells?
                {
                xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1
                    ifn cur_weap 0
                    { ifand weap_special[2] 4 add dragon_shells SHOTGUNBOXMAG else add dragon_shells SHOTGUNMAG }
                }
            ifand AMMO_TYPES[cur_weap] 4 break else // using Flechette shells
                {
                quote 268 xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1
                 ifn cur_weap 0
                    {
                    ifn CHAR 9
                        {
                        getp[].ammo_amount 2 temp3
                        ifand weap_special[2] 4 add temp3 SHOTGUNBOXMAG else
                        add temp3 SHOTGUNMAG
                        setp[].ammo_amount 2 temp3
                        }
                    }
                }
            state lower_weapon
			state empty_shotgun
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
	ife fire_mode_menu 2 // Tommy Gun ammo
	ife kickbackpic 0
	{
		set temp 0

		// normal_ammo is used for temp weapons, cur_ammo on normal weapons. sucks but was needed to get around hardcoded fuckery
		// I'll have a proper look later.
		ifg normal_ammo 0
			set temp 1
		else ifn cur_weap 0 ifg cur_ammo 0
			set temp 1

		ife player[].weapon_pos 0
		{
			ifand AMMO_TYPES[cur_weap] 2
			{
				xorvar AMMO_TYPE 2
				setarray AMMO_TYPES[cur_weap] AMMO_TYPE
				quote 206
				state lower_weapon
				setp[].ammo_amount 0 normal_ammo
			}
			ifand AMMO_TYPES[cur_weap] 32768
			{
				xorvar AMMO_TYPE 32768
				setarray AMMO_TYPES[cur_weap] AMMO_TYPE
				quote 206
				state lower_weapon
				setp[].ammo_amount 0 normal_ammo
			}
		}

		ife CHAR C_JAMES
		{
			ife cur_weap 1 { ife JAMES_1911 1 set PISTOLMAG 0 }
			ife cur_weap 3 { ife SPECIALIST_EQUIPMENT[55] 2 set MGUNMAG 0 }
		}
		set fire_mode_menu 0
		set RETURN -1
	}
else
ife fire_mode_menu 4 // crossbow normal bolts
ifg normal_ammo 0
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
			ifand AMMO_TYPES[cur_weap] 0 nullop
			else
			{
				quote 279
				setarray AMMO_TYPES[cur_weap] 0
				state lower_weapon
			}
			setp[].ammo_amount 0 normal_ammo
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 5
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        ife cur_weap 8
        {
        ifand gun_firemode 32 nullop else
            {
            soundonce PROX_TONE
            state lower_weapon
            xorvar gun_firemode 32
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 6 // DUP missile
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        ifand GUN_AMMO_TYPES 512
        ifg DUP_missile_ammo 0
        {
        ifand gun_firemode_two 4 break else
            {
            soundonce WEAP_FIRE_MODE
            xorvar gun_firemode_two 4
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 7 // 40mm HE shell
ifg fortymm_shells 0
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
		{
			ifand AMMO_TYPES[cur_weap] 32
				nullop
			else
			{
				set AMMO_TYPE 32
				setarray AMMO_TYPES[cur_weap] AMMO_TYPE
				or gun_firemode 32768
			}
		}
        state lower_weapon
		set fire_mode_menu 0
		set RETURN -1
    }
else
ife fire_mode_menu 8 // 40mm caseless slug
ifg fortymm_slug 0
ife kickbackpic 0
    {
        ifand AMMO_TYPES[cur_weap] 512 break else { xorvar AMMO_TYPE 512 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        ifand AMMO_TYPES[cur_weap] 2048 { xorvar AMMO_TYPE 2048 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        ifand AMMO_TYPES[cur_weap] 4096 { xorvar AMMO_TYPE 4096 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        state lower_weapon
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife voice_comm_menu 9
{
set RETURN -1
set force_taunt 13
set voice_comm_menu 0
}
else
ife voice_comm_menu 5 // Wait
{
set RETURN -1
ifrnd 128 state RADIO_WAIT_SOUNDS
else state RADIO_COVER_SOUNDS
setactorvar[ALLYSLOT1].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT1].ALLY_VOICE -45
set voice_comm_menu 0
}
else
ife voice_comm_menu 6 // Wait
{
set RETURN -1
ifrnd 128 state RADIO_WAIT_SOUNDS
else state RADIO_COVER_SOUNDS
setactorvar[ALLYSLOT2].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT2].ALLY_VOICE -45
set voice_comm_menu 0
}
else
ife voice_comm_menu 7 // Wait
{
set RETURN -1
ifrnd 128 state RADIO_WAIT_SOUNDS
else state RADIO_COVER_SOUNDS
setactorvar[ALLYSLOT3].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT3].ALLY_VOICE -45
set voice_comm_menu 0
}
else
ife voice_comm_menu 8 // Wait
{
set RETURN -1
ifrnd 128 state RADIO_WAIT_SOUNDS
else state RADIO_COVER_SOUNDS
setactorvar[ALLYSLOT4].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT4].ALLY_VOICE -45
set voice_comm_menu 0
}
else
ife voice_comm_menu 1 // Wait
{
set RETURN -1
state RADIO_WAIT_SOUNDS
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 641
    userquote 356

ifn ALLYSLOT1 -1 { setactorvar[ALLYSLOT1].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT1].ALLY_VOICE -45 }
ifn ALLYSLOT2 -1 { setactorvar[ALLYSLOT2].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT2].ALLY_VOICE -45 }
ifn ALLYSLOT3 -1 { setactorvar[ALLYSLOT3].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT3].ALLY_VOICE -45 }
ifn ALLYSLOT4 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT4].ALLY_VOICE -45 }
ifn ALLYSLOT5 -1 { setactorvar[ALLYSLOT1].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT5].ALLY_VOICE -45 }
ifn ALLYSLOT6 -1 { setactorvar[ALLYSLOT2].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT6].ALLY_VOICE -45 }
ifn ALLYSLOT7 -1 { setactorvar[ALLYSLOT3].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT7].ALLY_VOICE -45 }
ifn ALLYSLOT8 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 0 setactorvar[ALLYSLOT8].ALLY_VOICE -45 }

set voice_comm_menu 0
}
else
ife voice_comm_menu 2 // Follow
{
set RETURN -1
state RADIO_FOLLOW_SOUNDS
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 649
    userquote 356

ifn ALLYSLOT1 -1 { setactorvar[ALLYSLOT1].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT1].ALLY_VOICE 45 }
ifn ALLYSLOT2 -1 { setactorvar[ALLYSLOT2].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT2].ALLY_VOICE 45 }
ifn ALLYSLOT3 -1 { setactorvar[ALLYSLOT3].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT3].ALLY_VOICE 45 }
ifn ALLYSLOT4 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT4].ALLY_VOICE 45 }
ifn ALLYSLOT5 -1 { setactorvar[ALLYSLOT1].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT5].ALLY_VOICE 45 }
ifn ALLYSLOT6 -1 { setactorvar[ALLYSLOT2].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT6].ALLY_VOICE 45 }
ifn ALLYSLOT7 -1 { setactorvar[ALLYSLOT3].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT7].ALLY_VOICE 45 }
ifn ALLYSLOT8 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT8].ALLY_VOICE 45 }

set voice_comm_menu 0
}
else
ife voice_comm_menu 3 // Negative
{
set RETURN -1
    ife CHAR 0 set playsound J_NEGATIVE
    ife CHAR 1 set playsound Z_NEGATIVE
    ife CHAR 2 set playsound M_NEGATIVE
    ife CHAR 3 set playsound R_NEGATIVE
    ife CHAR 4 set playsound S_NEGATIVE
    ife CHAR 5 set playsound RN_NEGATIVE
    ife CHAR 6 set playsound G_NEGATIVE
    ife CHAR 7 set playsound MS_NEGATIVE
    ife CHAR 13 set playsound MC_NEGATIVE
    ife CHAR 15 set playsound MC_NEGATIVE
    ife CHAR 17 set playsound KG_NO
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 657
    userquote 356
set voice_comm_menu 0
}
else
ifand weap_special[1] 1 // Toggle duel pistols
{
ife cur_weap 1
ife player[].weapon_pos 0
    {
	ife CHAR 14 ifg GUN_CHARGE 0 break
    ifand guns_akimbo 4
        {
        soundvar WEAPON1_SELECTSOUND
        xorvar gun_firemode 64
        state lower_weapon
        set weap_show 130
        }
    }
}

endevent

onevent EVENT_WEAPKEY3 // MERLIJN OR SHOTGUN
state disable_weap_key
ifmultiplayer nullop else
{
ife CHARSELECT 1
	{
		ifl CHARSHADE 10
		{
		sound SELECT
		set CHARSHADE 20
		set CHAR 2
		}
	}
}

ife CHAR 4
 ife cur_weap 2
  ifand BASE_COSMETICS 16 // bought Arcane spellbook?
	{
	ife player[].weapon_pos 0
		{
		ife SPECIALIST_EQUIPMENT[17] 2 // ice spell
			{
			ife SPECIALIST_EQUIPMENT[31] 1 // fire spell
				{
				setarray SPECIALIST_EQUIPMENT[31] 2 // enable fire spell
				setarray SPECIALIST_EQUIPMENT[17] 1 // disable ice spell
				}
			else
			ife SPECIALIST_EQUIPMENT[64] 1 // gold spell
				{
				setarray SPECIALIST_EQUIPMENT[64] 2 // enable gold spell
				setarray SPECIALIST_EQUIPMENT[17] 1 // disable ice spell

				}
			else
				setarray SPECIALIST_EQUIPMENT[17] 1 // disable ice spell, enabling thunder spell since its the default
			setp[].weapon_pos 10
			}
		else
		ife SPECIALIST_EQUIPMENT[31] 2 // fire spell
			{
			ife SPECIALIST_EQUIPMENT[64] 1 // gold spell
				{
				setarray SPECIALIST_EQUIPMENT[64] 2 // enable gold spell
				setarray SPECIALIST_EQUIPMENT[31] 1 // disable fire spell
				}
			else
				setarray SPECIALIST_EQUIPMENT[31] 1 // disable fire spell, enabling thunder spell since its the default
			setp[].weapon_pos 10
			}
		else
		ife SPECIALIST_EQUIPMENT[64] 2 // gold spell
			{
			setarray SPECIALIST_EQUIPMENT[64] 1 // disable gold spell, enabling thunder spell since its the default
			setp[].weapon_pos 10
			}
		else // thunder spell
			{
			ife SPECIALIST_EQUIPMENT[17] 1 // ice spell
				{
				setarray SPECIALIST_EQUIPMENT[17] 2 // enable fire spell
				setp[].weapon_pos 10
				}
			else
			ife SPECIALIST_EQUIPMENT[31] 1 // fire spell
				{
				setarray SPECIALIST_EQUIPMENT[31] 2 // enable fire spell
				setp[].weapon_pos 10
				}
			else
			ife SPECIALIST_EQUIPMENT[64] 1 // gold spell
				{
				setarray SPECIALIST_EQUIPMENT[64] 2 // enable gold spell
				}
			setp[].weapon_pos 10
			}
		}
	}

// =======================================
// SHOTGUN STUFF
// ========================================
ife fire_mode_menu 1
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
        ife cur_weap 9
        ifand weap_special[9] 4
            {
            set AMMO_TYPE AMMO_TYPES[cur_weap]
            ifand AMMO_TYPES[cur_weap] 1 { quote 208 xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add explosive_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 4 { quote 208 xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add flechete_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 64 { quote 208 xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add magnum_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 1024 { quote 208 xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add dragon_shells ALTMAG }
            else break
            set ALTMAG 0
            state lower_weapon
            }
            else
        ifn cur_weap 0
        ifand gun_firemode_two 8
            {
            set AMMO_TYPE_2 AMMO_TYPES[15]
            ifand AMMO_TYPES[15] 1 { quote 208 xorvar AMMO_TYPE_2 1 setarray AMMO_TYPES[15] AMMO_TYPE_2 add explosive_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 4 { quote 208 xorvar AMMO_TYPE_2 4 setarray AMMO_TYPES[15] AMMO_TYPE_2 add flechete_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 64 { quote 208 xorvar AMMO_TYPE_2 64 setarray AMMO_TYPES[15] AMMO_TYPE_2 add magnum_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 1024 { quote 208 xorvar AMMO_TYPE_2 1024 setarray AMMO_TYPES[15] AMMO_TYPE_2 add dragon_shells SHOTGUNBOXMAG }
            else break
            ifn gun_mag -1
                {
                ife CHAR 0 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 7 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 12 ife cur_weap 2 set SHOTGUNBOXMAG 0
                }
            state lower_weapon
            }
            else
            {
				// Switch to regular shells. Unload currently used ammo in mag and put back into respective special ammo pools
				set AMMO_TYPE AMMO_TYPES[cur_weap]
				ifand AMMO_TYPES[cur_weap] 1
				{
					xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
					ifn gun_mag -1
					 ifn cur_weap 0
					{
						ifand weap_special[2] 4 add explosive_shells SHOTGUNBOXMAG
						else add explosive_shells SHOTGUNMAG
					}
				}
				else ifand AMMO_TYPES[cur_weap] 4
				{
					xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
					ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add flechete_shells SHOTGUNBOXMAG else add flechete_shells SHOTGUNMAG  }
				}
				else ifand AMMO_TYPES[cur_weap] 64
				{
					xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
					ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add magnum_shells SHOTGUNBOXMAG else add magnum_shells SHOTGUNMAG }
				}
				else ifand AMMO_TYPES[cur_weap] 1024
				{
					xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
					ifn gun_mag -1 ifn cur_weap 0 { ifand weap_special[2] 4 add dragon_shells SHOTGUNBOXMAG else add dragon_shells SHOTGUNMAG }
				}
				else
					break
				state lower_weapon
				state empty_shotgun
				// Ugly place to put this but can't make heads or tails of this code atm
				ife cur_weap 0
				{
					quote 208
					setp[].ammo_amount 0 normal_ammo
				}
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 2
ifg incend_ammo 0 // 45 incend bullets
ife kickbackpic 0
    {
    set AMMO_TYPE AMMO_TYPES[cur_weap]
    ife player[].weapon_pos 0
        {
        ifand AMMO_TYPE 2 xor AMMO_TYPE 2
        ifand AMMO_TYPES[cur_weap] 32768 nullop else
        { quote 522 xorvar AMMO_TYPE 32768 setarray AMMO_TYPES[cur_weap] AMMO_TYPE state lower_weapon }
        }
    ife CHAR 0
        {
        ife cur_weap 1 { ife JAMES_1911 1 set PISTOLMAG 0 }
        ife cur_weap 3 { ife SPECIALIST_EQUIPMENT[55] 2 set MGUNMAG 0 }
        }
    ife CHAR 13
        {
        ife cur_weap 1 { ife SPECIALIST_EQUIPMENT[60] 2 set PISTOLMAG 0 }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 4
ifg void_bolts 0 // Crossbow void bolts
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
			ifand AMMO_TYPES[cur_weap] 16384 nullop
			else
			{
				quote 412
				setarray AMMO_TYPES[cur_weap] 16384
				state lower_weapon
			}
			setp[].ammo_amount 0 void_bolts
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 7 // 40mm MIA shell
ifg fortymm_MIA_shells 0
ife kickbackpic 0
    {
    set AMMO_TYPE AMMO_TYPES[cur_weap]
    ifand AMMO_TYPES[cur_weap] 128 nullop else { xorvar AMMO_TYPE 128 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
    ifand AMMO_TYPES[cur_weap] 32 { xorvar AMMO_TYPE 32 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
    ifand AMMO_TYPES[cur_weap] 256 { xorvar AMMO_TYPE 256 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
    state lower_weapon
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 8 // 40mm electro grenade
ifg fortymm_electro 0
ife kickbackpic 0
    {
    set AMMO_TYPE AMMO_TYPES[cur_weap]
    ifand AMMO_TYPES[cur_weap] 512 { xorvar AMMO_TYPE 512 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
    ifand AMMO_TYPES[cur_weap] 2048 break else { xorvar AMMO_TYPE 2048 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
    ifand AMMO_TYPES[cur_weap] 4096 { xorvar AMMO_TYPE 4096 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
    state lower_weapon
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife voice_comm_menu 9 // Ally 1
ifn ALLYSLOT1 -1
{
set RETURN -1
set voice_comm_menu 5
}
else
ife voice_comm_menu 5 // Dismissed!
{
set RETURN -1
setactorvar[ALLYSLOT1].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT1].ALLY_VOICE -45
set ALLYSLOT1 -1
set voice_comm_menu 0
}
else
ife voice_comm_menu 6 // Dismissed!
{
set RETURN -1
setactorvar[ALLYSLOT2].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT2].ALLY_VOICE -45
set ALLYSLOT2 -1
set voice_comm_menu 0
}
else
ife voice_comm_menu 7 // Dismissed!
{
set RETURN -1
setactorvar[ALLYSLOT3].FOLLOW_PLAYER 0
setactorvar[ALLYSLOT3].ALLY_VOICE -45
set ALLYSLOT3 -1
set voice_comm_menu 0
}
else
ife voice_comm_menu 8 // Dismissed!
    {
    set RETURN -1
    setactorvar[ALLYSLOT4].FOLLOW_PLAYER 0
	setactorvar[ALLYSLOT4].ALLY_VOICE -45
    set ALLYSLOT4 -1
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 1 // Cover me!
    {
    set RETURN -1
    state RADIO_COVER_SOUNDS
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 642
    userquote 356
	ifn ALLYSLOT1 -1 { setactorvar[ALLYSLOT1].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT1].ALLY_VOICE 45 }
	ifn ALLYSLOT2 -1 { setactorvar[ALLYSLOT2].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT2].ALLY_VOICE 45 }
	ifn ALLYSLOT3 -1 { setactorvar[ALLYSLOT3].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT3].ALLY_VOICE 45 }
	ifn ALLYSLOT4 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT4].ALLY_VOICE 45 }
	ifn ALLYSLOT5 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT5].ALLY_VOICE 45 }
	ifn ALLYSLOT6 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT6].ALLY_VOICE 45 }
	ifn ALLYSLOT7 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT7].ALLY_VOICE 45 }
	ifn ALLYSLOT8 -1 { setactorvar[ALLYSLOT4].FOLLOW_PLAYER 1 setactorvar[ALLYSLOT8].ALLY_VOICE 45 }
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 2 // Watch out!
    {
    set RETURN -1
    ife CHAR 0 set playsound J_WOUT
    ife CHAR 1 set playsound Z_WOUT
    ife CHAR 2 set playsound M_WOUT
    ife CHAR 3 set playsound R_WOUT
    ife CHAR 4 set playsound S_WOUT
    ife CHAR 5 set playsound RN_WOUT
    ife CHAR 6 set playsound G_WOUT
    ife CHAR 7 set playsound MS_WOUT
    ife CHAR 13 set playsound MC_WOUT
    ife CHAR 14 set playsound SF_WOUT
    ife CHAR 15 set playsound MC_WOUT
    ife CHAR 17 set playsound KG_WATCHOUT
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 650
    userquote 356
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 3 // Resupplying
    {
    set RETURN -1
    ife CHAR 0 set playsound J_RESUPPLY
    ife CHAR 1 set playsound Z_RESUPPLY
    ife CHAR 2 set playsound M_RESUPPLY
    ife CHAR 3 set playsound R_RESUPPLY
    ife CHAR 4 set playsound S_RESUPPLY
    ife CHAR 5 set playsound RN_RESUPPLY
    ife CHAR 6 set playsound G_RESUPPLY
    ife CHAR 7 set playsound MS_RESUPPLY
    ife CHAR 13 set playsound MC_RESUPPLY
    ife CHAR 15 set playsound MC_RESUPPLY
    ife CHAR 17 set playsound KG_RESUPPLY
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 658
    userquote 356
    set voice_comm_menu 0
    }
else
ife CHAR 13 // Toggle Micky's duel shotgun
    {
    ife cur_weap 2
    ife SPECIALIST_EQUIPMENT[58] 2
    ifcount 16
        {
        ifand guns_akimbo 8
            {
            soundvar WEAPON2_SELECTSOUND
            xorvar gun_firemode_two 64
            state lower_weapon
            set weap_show 130
            resetcount
            }
        }
    }
else
ife CHAR 14 // Toggle Snowfall's duel shotgun
    {
    ife cur_weap 2
    ifcount 16
        {
        ifand guns_akimbo 8
            {
            soundvar WEAPON2_SELECTSOUND
            xorvar gun_firemode_two 64
            state lower_weapon
            set weap_show 130
            resetcount
            }
        }
    }
endevent

onevent EVENT_WEAPKEY4 // HIGHWIRE/CHAINGUN
state disable_weap_key
ifmultiplayer nullop else
    {
    ife CHARSELECT 1
        {
            ifl CHARSHADE 10
            {
            sound SELECT
            set CHARSHADE 20
            set CHAR 3
            }
        }
    }

ife fire_mode_menu 1
ifand GUN_AMMO_TYPES 4
ifg magnum_shells 0
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
        ife cur_weap 9
        ifand weap_special[9] 4
            {
            ifand AMMO_TYPES[cur_weap] 64 break else { quote 286 xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            getp[].ammo_amount 2 temp3 add temp3 ALTMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[cur_weap] 1 { xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add explosive_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 4 { xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add flechete_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 1024 { xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add dragon_shells ALTMAG }
            set ALTMAG 0
            state lower_weapon
            }
            else
        ifn cur_weap 0
        ifand gun_firemode_two 8
            {
            ifand AMMO_TYPES[15] 64 break else { quote 286 xorvar AMMO_TYPE_2 64 setarray AMMO_TYPES[15] AMMO_TYPE_2
            getp[].ammo_amount 2 temp3 add temp3 SHOTGUNBOXMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[15] 1 { xorvar AMMO_TYPE_2 1 setarray AMMO_TYPES[15] AMMO_TYPE_2 add explosive_shells SHOTGUNBOXMAG  }
            else ifand AMMO_TYPES[15] 4 { xorvar AMMO_TYPE_2 4 setarray AMMO_TYPES[15] AMMO_TYPE_2 add flechete_shells SHOTGUNBOXMAG  }
            else ifand AMMO_TYPES[15] 1024 { xorvar AMMO_TYPE_2 1024 setarray AMMO_TYPES[15] AMMO_TYPE_2 add dragon_shells SHOTGUNBOXMAG }
            state lower_weapon
            ifn gun_mag -1
                {
                ife CHAR 0 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 7 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 12 ife cur_weap 2 set SHOTGUNBOXMAG 0
                }
            }
        else
            {
            ifand AMMO_TYPES[cur_weap] 64 break else
                {
                quote 286 xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1 ifn cur_weap 0 { getp[].ammo_amount 2 temp3 add temp3 SHOTGUNMAG setp[].ammo_amount 2 temp3 }
                }
            ifand AMMO_TYPES[cur_weap] 1
                { xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 ifn cur_weap 0 add explosive_shells SHOTGUNMAG }
            else ifand AMMO_TYPES[cur_weap] 4
                { xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 ifn cur_weap 0 add flechete_shells SHOTGUNMAG }
            else ifand AMMO_TYPES[cur_weap] 1024
                { xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 ifn cur_weap 0 add dragon_shells SHOTGUNMAG }
            state lower_weapon
            state empty_shotgun
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 7 // 40mm Plasma shell
ifg fortymm_plasma 0
ife kickbackpic 0
    {
        ifand AMMO_TYPES[cur_weap] 256 break else { xorvar AMMO_TYPE 256 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        ifand AMMO_TYPES[cur_weap] 32 { xorvar AMMO_TYPE 32 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        ifand AMMO_TYPES[cur_weap] 128 { xorvar AMMO_TYPE 128 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        state lower_weapon
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife fire_mode_menu 8 // 40mm cryo grenade
ifg fortymm_cryo 0
ife kickbackpic 0
    {
        ifand AMMO_TYPES[cur_weap] 512 { xorvar AMMO_TYPE 512 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        ifand AMMO_TYPES[cur_weap] 2048 { xorvar AMMO_TYPE 2048 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        ifand AMMO_TYPES[cur_weap] 4096 break else { xorvar AMMO_TYPE 4096 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
        state lower_weapon
    set fire_mode_menu 0
    set RETURN -1
    }
else
ife voice_comm_menu 9 // Ally 2
ifn ALLYSLOT2 -1
{
set RETURN -1
set voice_comm_menu 6
}
else
ife voice_comm_menu 5 // cease/start attacking!
    {
    set RETURN -1
    getav[ALLYSLOT1].ALLY_ORDER temp3
    ifand temp3 1 xorvar temp3 1 else orvar temp3 1
    setactorvar[ALLYSLOT1].ALLY_ORDER temp3
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 6 // cease/start attacking!
    {
    set RETURN -1
    getav[ALLYSLOT2].ALLY_ORDER temp3
    ifand temp3 1 xorvar temp3 1 else orvar temp3 1
    setactorvar[ALLYSLOT2].ALLY_ORDER temp3
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 7 // cease/start attacking!
    {
    set RETURN -1
    getav[ALLYSLOT3].ALLY_ORDER temp3
    ifand temp3 1 xorvar temp3 1 else orvar temp3 1
    setactorvar[ALLYSLOT3].ALLY_ORDER temp3
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 8 // cease/start attacking!
    {
    set RETURN -1
    getav[ALLYSLOT4].ALLY_ORDER temp3
    ifand temp3 1 xorvar temp3 1 else orvar temp3 1
    setactorvar[ALLYSLOT4].ALLY_ORDER temp3
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 1 // Incoming
{
set RETURN -1
    ife CHAR 0 set playsound J_INCOMING
    ife CHAR 1 set playsound Z_INCOMING
    ife CHAR 2 set playsound M_INCOMING
    ife CHAR 3 set playsound R_INCOMING
    ife CHAR 4 set playsound S_INCOMING
    ife CHAR 5 set playsound RN_INCOMING
    ife CHAR 6 set playsound G_INCOMING
    ife CHAR 7 set playsound MS_INCOMING
    ife CHAR 12 set playsound JA_INCOMING
    ife CHAR 13 set playsound MC_INCOMING
    ife CHAR 15 set playsound MC_INCOMING
    ife CHAR 17 set playsound KG_INCOM
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 643
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 2 // Supplies
{
set RETURN -1
    ife CHAR 0 set playsound J_SUPPLIES
    ife CHAR 1 set playsound Z_SUPPLIES
    ife CHAR 2 set playsound M_SUPPLIES
    ife CHAR 3 set playsound R_SUPPLIES
    ife CHAR 4 set playsound S_SUPPLIES
    ife CHAR 5 set playsound RN_SUPPLIES
    ife CHAR 6 set playsound G_SUPPLIES
    ife CHAR 7 set playsound MS_SUPPLIES
    ife CHAR 13 set playsound MC_SUPPLIES
    ife CHAR 15 set playsound MC_SUPPLIES
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 651
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 3 // Got your back!
{
set RETURN -1
    ife CHAR 0 set playsound J_GYBACK
    ife CHAR 1 set playsound Z_GYBACK
    ife CHAR 2 set playsound M_GYBACK
    ife CHAR 3 set playsound R_GYBACK
    ife CHAR 4 set playsound S_GYBACK
    ife CHAR 5 set playsound RN_GYBACK
    ife CHAR 6 set playsound G_GYBACK
    ife CHAR 7 set playsound MS_GYBACK
    ife CHAR 13 set playsound MC_GYBACK
    ife CHAR 15 set playsound MC_GYBACK
    ife CHAR 17 set playsound KG_GOTURBAK
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 659
    userquote 356
set voice_comm_menu 0
}
else
ife CHAR 0 // Toggle James' stuff
{
ife cur_weap 3
    {
    ife SPECIALIST_EQUIPMENT[8] 2 // mp5?
        state toggle_cased_gl
    else
    ifn SPECIALIST_EQUIPMENT[8] 2
    ifn SPECIALIST_EQUIPMENT[55] 2
    ifn SPECIALIST_EQUIPMENT[15] 2
    ifcount 16
        {
        ifand guns_akimbo 2
            {
            soundvar WEAPON3_SELECTSOUND
            ifand gun_firemode 1024 divvar MGUNMAG 2 else mulvar MGUNMAG 2
            xorvar gun_firemode 1024
            ifand gun_firemode 2048 { xorvar gun_firemode 2048 soundonce LASERSIGHT_OFF }
            set weap_show 130
            state lower_weapon
            sound SELECT_WEAPON
            resetcount
            }
        }
    }
}
else
ife CHAR 1 // Toggle Zax' stuff
{
ife cur_weap 3
    {
    ifn SPECIALIST_EQUIPMENT[70] 2 // not using super galil
    ifcount 16
        {
        ifand guns_akimbo 16
            {
            soundvar WEAPON3_SELECTSOUND
            xorvar gun_firemode 1024
            set weap_show 130
            state lower_weapon
            sound SELECT_WEAPON
            resetcount
            }
        }
    }
}
else
ife CHAR 3
 ife cur_weap 3
 {
      ife SPECIALIST_EQUIPMENT[7] 2 // Toggle Highwire's GL mode if he has it
    state toggle_cased_gl
    else
    ife SPECIALIST_EQUIPMENT[14] 2 break
    else
    state toggle_cased_gl
}
else
ife CHAR 5
 ife cur_weap 3
 {
  ife SPECIALIST_EQUIPMENT[27] 2 // Toggle AK74-'s GL mode
        state toggle_cased_gl
}
else
ife CHAR 4 // Toggle Sang's duel uzis
{
ife cur_weap 3
    {
     ife SPECIALIST_EQUIPMENT[71] 2 // Toggle FN2000's GL mode
        state toggle_cased_gl
        else
     ife SPECIALIST_EQUIPMENT[74] 2 // Toggle AK47's GL mode
        state toggle_cased_gl
        else
    ifand weap_special[3] 1
    ifcount 16
        {
        ifand guns_akimbo 2
            {
            ifand gun_firemode 1024
            {
                divvar MGUNMAG 2
                set MAXMGUNMAG 30
            }
            else
            {
                mulvar MGUNMAG 2
                set MAXMGUNMAG 60
            }
            xorvar gun_firemode 1024
            set weap_show 130
            state lower_weapon
            soundvar WEAPON3_SELECTSOUND
            resetcount
            }
        }
    }
}
else
ife CHAR 10
 ife cur_weap 3 // Toggle Bombshell's GL mode
state toggle_cased_gl
else
ife CHAR 13
 ife cur_weap 3
 {
      ifn SPECIALIST_EQUIPMENT[48] 2 // NOT using ar-73?
        state toggle_cased_gl
}
endevent

onevent EVENT_WEAPKEY5 // SANGLUSS
state disable_weap_key
ifmultiplayer nullop else
{
ife CHARSELECT 1
{
    ifl CHARSHADE 10
    {
    sound SELECT
    set CHARSHADE 20
    set CHAR 4
    }
}
}

ife fire_mode_menu 1
ifand GUN_AMMO_TYPES 4
ifg dragon_shells 0
ife kickbackpic 0
    {
        ife player[].weapon_pos 0
        {
        ife cur_weap 9
        ifand weap_special[9] 4
            {
            ifand AMMO_TYPES[cur_weap] 1024 break else { quote 297 xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
            getp[].ammo_amount 2 temp3 add temp3 ALTMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[cur_weap] 1 { xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add explosive_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 4 { xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add flechete_shells ALTMAG }
            else ifand AMMO_TYPES[cur_weap] 64 { xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE add magnum_shells ALTMAG }
            set ALTMAG 0
            state lower_weapon
            }
            else
        ifn cur_weap 0
        ifand gun_firemode_two 8
            {
            ifand AMMO_TYPES[15] 1024 break else { quote 297 xorvar AMMO_TYPE_2 1024 setarray AMMO_TYPES[15] AMMO_TYPE_2
            getp[].ammo_amount 2 temp3 add temp3 SHOTGUNBOXMAG setp[].ammo_amount 2 temp3 }
            ifand AMMO_TYPES[15] 1 { xorvar AMMO_TYPE_2 1 setarray AMMO_TYPES[15] AMMO_TYPE_2 add explosive_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 4 { xorvar AMMO_TYPE_2 4 setarray AMMO_TYPES[15] AMMO_TYPE_2 add flechete_shells SHOTGUNBOXMAG }
            else ifand AMMO_TYPES[15] 64 { xorvar AMMO_TYPE_2 64 setarray AMMO_TYPES[15] AMMO_TYPE_2 add magnum_shells SHOTGUNBOXMAG }
            state lower_weapon
            ifn gun_mag -1
                {
                ife CHAR 0 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 7 ife cur_weap 2 set SHOTGUNBOXMAG 0
                ife CHAR 12 ife cur_weap 2 set SHOTGUNBOXMAG 0
                }
            }
        else
            {
            ifand AMMO_TYPES[cur_weap] 1024 break else
                {
                quote 297 xorvar AMMO_TYPE 1024 setarray AMMO_TYPES[cur_weap] AMMO_TYPE
                ifn gun_mag -1 ifn cur_weap 0 { getp[].ammo_amount 2 temp3 add temp3 SHOTGUNMAG setp[].ammo_amount 2 temp3 }
                }
            ifand AMMO_TYPES[cur_weap] 1
                { xorvar AMMO_TYPE 1 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 ifn cur_weap 0 add explosive_shells SHOTGUNMAG }
            else ifand AMMO_TYPES[cur_weap] 4
                { xorvar AMMO_TYPE 4 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 ifn cur_weap 0 add flechete_shells SHOTGUNMAG }
            else ifand AMMO_TYPES[cur_weap] 64
                { xorvar AMMO_TYPE 64 setarray AMMO_TYPES[cur_weap] AMMO_TYPE ifn gun_mag -1 ifn cur_weap 0 add magnum_shells SHOTGUNMAG }
            state lower_weapon
            state empty_shotgun
            }
        }
    set fire_mode_menu 0
    set RETURN -1
    }

ife voice_comm_menu 9 // Ally 3
ifn ALLYSLOT3 -1
{
set RETURN -1
set voice_comm_menu 7
}
else
ife voice_comm_menu 1 // Backup
{
set RETURN -1
state RADIO_BACKUP_SOUNDS
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 644
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 2 // Low on health
{
set RETURN -1
    ife CHAR 0 set playsound J_LHEALTH
    ife CHAR 1 set playsound Z_LHEALTH
    ife CHAR 2 set playsound M_LHEALTH
    ife CHAR 3 set playsound R_LHEALTH
    ife CHAR 4 set playsound S_LHEALTH
    ife CHAR 5 set playsound RN_LHEALTH
    ife CHAR 6 set playsound G_LHEALTH
    ife CHAR 7 set playsound MS_LHEALTH
    ife CHAR 13 set playsound MC_LHEALTH
    ife CHAR 14 set playsound SF_LHEALTH
    ife CHAR 15 set playsound MC_LHEALTH
    ife CHAR 17 set playsound KG_HEALTHLOW
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 652
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 3 // Let's move out
{
set RETURN -1
    ife CHAR 0 set playsound J_MOVEOUT
    ife CHAR 1 set playsound Z_MOVEOUT
    ife CHAR 2 set playsound M_MOVEOUT
    ife CHAR 3 set playsound R_MOVEOUT
    ife CHAR 4 set playsound S_MOVEOUT
    ife CHAR 5 set playsound RN_MOVEOUT
    ife CHAR 6 set playsound G_MOVEOUT
    ife CHAR 7 set playsound MS_MOVEOUT
    ife CHAR 13 set playsound MC_MOVEOUT
    ife CHAR 15 set playsound MC_MOVEOUT
    ife CHAR 17 set playsound KG_LETSMOVE
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 660
    userquote 356
set voice_comm_menu 0
}
endevent

onevent EVENT_WEAPKEY6 // RUSTY
state disable_weap_key
ifmultiplayer nullop else
    {
    ife CHARSELECT 1
        {
            ifl CHARSHADE 10
            {
            sound SELECT
            set CHARSHADE 20
            set CHAR 5
            }
        }
    }

ife voice_comm_menu 9 // Ally 3
ifn ALLYSLOT4 -1
    {
    set RETURN -1
    set voice_comm_menu 8
    }
else
ife voice_comm_menu 1 // Reloading
    {
    set RETURN -1
    ife CHAR 0 set playsound J_RELOAD
    ife CHAR 1 set playsound Z_RELOAD
    ife CHAR 2 set playsound M_RELOAD
    ife CHAR 3 set playsound R_RELOAD
    ife CHAR 4 set playsound S_RELOAD
    ife CHAR 5 set playsound RN_RELOAD
    ife CHAR 6 set playsound G_RELOAD
    ife CHAR 7 set playsound MS_RELOAD
    ife CHAR 13 set playsound MC_RELOAD
    ife CHAR 15 set playsound MC_RELOAD
    ife CHAR 17 set playsound KG_RELOADING
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 645
    userquote 356
    set voice_comm_menu 0
    }
else
ife voice_comm_menu 2 // low on ammo
    {
    set RETURN -1
    ife CHAR 0 set playsound J_LAMMO
    ife CHAR 1 set playsound Z_LAMMO
    ife CHAR 2 set playsound M_LAMMO
    ife CHAR 3 set playsound R_LAMMO
    ife CHAR 4 set playsound S_LAMMO
    ife CHAR 5 set playsound RN_LAMMO
    ife CHAR 6 set playsound G_LAMMO
    ife CHAR 7 set playsound MS_LAMMO
    ife CHAR 13 set playsound MC_LAMMO
    ife CHAR 14 set playsound SF_LAMMO
    ife CHAR 15 set playsound MC_LAMMO
    ife CHAR 17 set playsound KG_LOWAMMO
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 653
    userquote 356
set voice_comm_menu 0
    }
else
ife voice_comm_menu 3 // Lend me a hand
    {
    set RETURN -1
    ife CHAR 0 set playsound J_HELPME
    ife CHAR 1 set playsound Z_HELPME
    ife CHAR 2 set playsound M_HELPME
    ife CHAR 3 set playsound R_HELPME
    ife CHAR 4 set playsound S_HELPME
    ife CHAR 5 set playsound RN_HELPME
    ife CHAR 6 set playsound G_HELPME
    ife CHAR 7 set playsound MS_HELPME
    ife CHAR 13 set playsound MC_HELPME
    ife CHAR 14 set playsound SF_HELPME
    ife CHAR 15 set playsound MC_HELPME
    ife CHAR 17 set playsound KG_HELPME
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 661
    userquote 356
    set voice_comm_menu 0
    }
endevent

onevent EVENT_WEAPKEY7 // GEOFFREY
state disable_weap_key
ifmultiplayer nullop else
    {
    ife CHARSELECT 1
        {
            ifl CHARSHADE 10
            {
            sound SELECT
            set CHARSHADE 20
            set CHAR 6
            }
        }
    }

ife voice_comm_menu 1 // on my way
{
set RETURN -1
    ife CHAR 0 set playsound J_ONMYWAY
    ife CHAR 1 set playsound Z_ONMYWAY
    ife CHAR 2 set playsound M_ONMYWAY
    ife CHAR 3 set playsound R_ONMYWAY
    ife CHAR 4 set playsound S_ONMYWAY
    ife CHAR 5 set playsound RN_ONMYWAY
    ife CHAR 6 set playsound G_ONMYWAY
    ife CHAR 7 set playsound MS_ONMYWAY
    ife CHAR 13 set playsound MC_ONMYWAY
    ife CHAR 15 set playsound MC_ONMYWAY
    ife CHAR 17
    {
        ifrnd 128 set playsound KG_YES2
        else set playsound KG_ONMYWAY
    }
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 646
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 2 // hit the switch
{
set RETURN -1
    ife CHAR 0 set playsound J_SWITCH
    ife CHAR 1 set playsound Z_SWITCH
    ife CHAR 2 set playsound M_SWITCHH
    ife CHAR 3 set playsound R_SWITCH
    ife CHAR 4 set playsound S_SWITCH
    ife CHAR 5 set playsound RN_SWITCH
    ife CHAR 6 set playsound G_SWITCH
    ife CHAR 7 set playsound MS_SWITCH
    ife CHAR 13 set playsound MC_SWITCH
    ife CHAR 14 set playsound SF_SWITCH
    ife CHAR 15 set playsound MC_SWITCH
    ife CHAR 17 set playsound KG_SWITCHPRESS
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 654
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 3 // Dead end
{
set RETURN -1
    ife CHAR 0 set playsound J_DEADEND
    ife CHAR 1 set playsound Z_DEADEND
    ife CHAR 2 set playsound M_DEADEND
    ife CHAR 3 set playsound R_DEADEND
    ife CHAR 4 set playsound S_DEADEND
    ife CHAR 5 set playsound RN_DEADEND
    ife CHAR 6 set playsound G_DEADEND
    ife CHAR 7 set playsound MS_DEADEND
    ife CHAR 13 set playsound MC_DEADEND
    ife CHAR 15 set playsound MC_DEADEND
    ife CHAR 17 set playsound KG_DEADEND
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 662
    userquote 356
set voice_comm_menu 0
}

endevent

onevent EVENT_WEAPKEY8 // MIKKO
state disable_weap_key
ife CHARSELECT 1
{
    ifl CHARSHADE 10
    {
    sound SELECT
    set CHARSHADE 20
    set CHAR 7
    }
}

ife voice_comm_menu 1 // Nice work
{
set RETURN -1
    ife CHAR 0 set playsound J_NICEWORK
    ife CHAR 1 set playsound Z_NICEWORK
    ife CHAR 2 set playsound M_NICEWORK
    ife CHAR 3 set playsound R_NICEWORK
    ife CHAR 4 set playsound S_NICEWORK
    ife CHAR 5 set playsound RN_NICEWORK
    ife CHAR 6 set playsound G_NICEWORK
    ife CHAR 7 set playsound MS_NICEWORK
    ife CHAR 13 set playsound MC_NICEWORK
    ife CHAR 14 set playsound SF_NICE
    ife CHAR 15 set playsound MC_NICEWORK
    ife CHAR 17 set playsound KG_NICEWORK
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 647
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 2 // We can blow this up
{
set RETURN -1
    ife CHAR 0 set playsound J_BLOWUP
    ife CHAR 1 set playsound Z_BLOWUP
    ife CHAR 2 set playsound M_BLOWUP
    ife CHAR 3 set playsound R_BLOWUP
    ife CHAR 4 set playsound S_BLOWUP
    ife CHAR 5 set playsound RN_BLOWUP
    ife CHAR 6 set playsound G_BLOWUP
    ife CHAR 7 set playsound MS_BLOWUP
    ife CHAR 13 set playsound MC_BLOWUP
    ife CHAR 15 set playsound MC_BLOWUP
    ife CHAR 17 set playsound KG_BLOWUP
    soundoncevar playsound
    ife fake_shrunk 1 setactorsoundpitch THISACTOR playsound 512
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 655
    userquote 356
set voice_comm_menu 0
}
else
ife voice_comm_menu 3 // Got the key
{
set RETURN -1
state RADIO_KEY_SOUNDS
    ifmultiplayer
        qgetsysstr 356 STR_PLAYERNAME
    else
        state get_player_name_from_char
    qstrcat 356 663
    userquote 356
set voice_comm_menu 0
}

ife CHAR 0
  ife cur_weap 7 // Toggle James's GL mode
    {
     ife SPECIALIST_EQUIPMENT[78] 2 // Using the G36?
       {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
        }
     ife SPECIALIST_EQUIPMENT[45] 2 // Using the LR300?
       {
            ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
        }
    }
endevent

onevent EVENT_WEAPKEY9 // More/previous for voice menu
state disable_weap_key

    ife CHARSELECT 1
     ife ep2_new_char 1
    {
        ifl CHARSHADE 10
        {
        sound SELECT
        set CHARSHADE 20
        set CHAR 13
        }
    }

ife voice_comm_menu 1
    {
    set RETURN -1
    set voice_comm_menu 2
    }
else
ife voice_comm_menu 2
    {
    set RETURN -1
    set voice_comm_menu 3
    }
else
ife voice_comm_menu 3
    {
    set RETURN -1
    set voice_comm_menu 1
    }
else ife kickbackpic 0
{
    ife fire_mode_menu 7 // switch to normal mode
	{
        ife player[].weapon_pos 0
		{
            quote 273
            xorvar gun_firemode 32768
			setarray AMMO_TYPES[cur_weap] 0
            state lower_weapon
            soundonce WEAP_FIRE_MODE
		}
        set fire_mode_menu 0
        set RETURN -1
	}
    else ife fire_mode_menu 8 // switch to normal mode
	{
        ife player[].weapon_pos 0
		{
            quote 273
            xorvar gun_firemode 32768
			setarray AMMO_TYPES[cur_weap] 0
            state lower_weapon
            soundonce WEAP_FIRE_MODE
		}
        set fire_mode_menu 0
        set RETURN -1
	}
}
endevent

// ===================================================================================================================================================================

onevent EVENT_WEAPKEY10 // Cancel voice/firemode menu
state disable_weap_key

    ife CHARSELECT 1
     ife ep3_new_char 1
    {
        ifl CHARSHADE 10
        {
        sound SELECT
        set CHARSHADE 20
        set CHAR 14
        }
    }

ifn voice_comm_menu 0
    {
    set RETURN -1
    set voice_comm_menu 0
    }
ifn fire_mode_menu 0
    {
    set RETURN -1
    set fire_mode_menu 0
    }

ife CHAR 0
 ife SPECIALIST_EQUIPMENT[22] 2 // Using the AN-94?
  ife cur_weap 9 // Toggle James's GL mode
    {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }

ife CHAR 0
 ife SPECIALIST_EQUIPMENT[72] 2 // Using the Gilboa?
  ife cur_weap 9 // Toggle James's GL mode
    {
        ife player[].weapon_pos 0
            {
            ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
            { quote 272 xorvar gun_firemode 32768 }
            ifand gun_firemode 16384 xorvar gun_firemode 16384
            set weap_show 130
            state lower_weapon
            soundonce WEAP_FIRE_MODE
            }
        set fire_mode_menu 0
        set RETURN -1
    }

ife CHAR 5
 ife cur_weap 9 // Toggle Rusty's GL mode
{
    ife player[].weapon_pos 0
        {
        ifand gun_firemode 32768 { quote 273 xorvar gun_firemode 32768 } else
        { quote 272 xorvar gun_firemode 32768 }
        ifand gun_firemode 16384 xorvar gun_firemode 16384
        set weap_show 130
        state lower_weapon
        soundonce WEAP_FIRE_MODE
        }
    set fire_mode_menu 0
    set RETURN -1
}
endevent

onevent EVENT_PROCESSINPUT
getinput[].bits BITS_PRESS
getinput[].extbits EXTBITS_PRESS


ifand EXTBITS_PRESS 1 ifvare mantling 1 { soundonce JMOVE5 setvar mantling 2 }

ifand BITS_PRESS 1
{
    ifvare mantling 1 { soundonce JMOVE5 setvar mantling 2 }
    ifg onladder 0
    {
        set onladder -6
        setp[].jumping_toggle 1
        setp[].jumping_counter 181
    }
    else
    ife PERSONNEL_RESEARCH[18] 2 // Cycloid jetpack controls
    {
    ifg player[].jumping_counter 1440
      ifg player[].jetpack_amount 0
       ife player[].jumping_toggle 0
        {
        ifinwater break
        sound PLYR_JETPACK_ON
        setp[].jetpack_on 1
        set JET_TOGGLE 1
        }
    else
    ifg player[].falling_counter 8
     ifg player[].jetpack_amount 0
        {
        ifinwater break
        sound PLYR_JETPACK_ON
        setp[].falling_counter 0
        setp[].poszv 0
        setp[].jetpack_on 1
        set JET_TOGGLE 1
        }
    }
}
ifand BITS_PRESS 2
    {
    ifvare mantling 1 setvar mantling 0
        ifg onladder 0
        {
            set onladder -6
            setp[].jumping_toggle 1
        }
    }
endevent

onevent EVENT_LOOKUP // Voice key
set RETURN -1
ifn fire_mode_menu 0 nullop else
    {
    ife voice_comm_menu 0 ife INTERNALCOUNT 0 { set voice_comm_menu 9 set INTERNALCOUNT 8 }
    ife voice_comm_menu 9 ife INTERNALCOUNT 0 { set voice_comm_menu 1 set INTERNALCOUNT 8 }
    ife voice_comm_menu 1 ife INTERNALCOUNT 0 { set voice_comm_menu 2 set INTERNALCOUNT 8 }
    ife voice_comm_menu 2 ife INTERNALCOUNT 0 { set voice_comm_menu 3 set INTERNALCOUNT 8 }
    ife voice_comm_menu 3 ife INTERNALCOUNT 0 { set voice_comm_menu 0 set INTERNALCOUNT 8 }
    }
ife player_in_vehicle 1 soundonce HORNSND
endevent

// ====================================================================================================================================================================================================================
// ALTERNATE FIRE KEY=============================================================================
// ====================================================================================================================================================================================================================

onevent EVENT_LOOKLEFT
    set RETURN 1

    ife allow_fire NO break
    ifp pshrunk break
    ifn player[].weapon_pos 0 break
    ifn PCINTER 0 break

ife userdef[].overhead_on 2
	{
	getp[].zoom temp
	sub temp 64
	clamp temp 48 2048
	setp[].zoom temp
	}

	ife userdef[].overhead_on 2 break


    ife CHAR 9 // CULTIST ==================================================================================================================================================================
    {
    ife cur_weap 2 // Sawn off double barrel mode
       ife kickbackpic 0
       {
        getp[].ammo_amount 2 alt_temp1
         ifg alt_temp1 1
            {
            ifl SHOTGUNMAG 2
                {
                setp[].kickback_pic 6
                setp[].reloading 1
                }
            else
                {
                setp[].kickback_pic 1
                xorvar gun_firemode 256
                sub alt_temp1 1
                setp[].ammo_amount 2 alt_temp1
                }
            }
       }
    }
// temp weapon alt fire types
    ife cur_weap 0
    {

    ife temp_weap 41 // ar65
	 ifl kickbackpic 6
        {
         ifcount 13
            {
            state TURNOFF_NVG
            ife scope 0
                {
                set scope 1
                sound SCIFI_ZOOM_IN
                }
                else
                {
                set scope 0
                sound SCIFI_ZOOM_OUT
                }
            resetcount
            }
        }

    ife temp_weap 6 // convert shotgun shells to main gun
	 ifg normal_ammo 0
        {
		ifand AMMO_TYPES[0] 66629 nullop else
         ife kickbackpic 0
            {
			switch CHAR
				case C_JAMES
				case C_ZAXTOR
				case C_HIGHWIRE
				case C_RUSTY
				case C_GEOFFREY
				case C_MIKKO
				case C_CULTIST
				case C_BOMBSHELL
				case C_JANE
				case C_SNOWFALL
					gmaxammo 2 temp3
					ifl player[].ammo_amount 2 temp3
						{
						quote 8603
						setplayer[].kickback_pic 6
						set kickbackpic_2 1
						}
					break
				case C_MICKY
					ife SPECIALIST_EQUIPMENT[58] 2 // using Whiplash shotguns?
						{
						gmaxammo 2 temp3
						ifl player[].ammo_amount 2 temp3
							{
							quote 8603
							setplayer[].kickback_pic 6
							set kickbackpic_2 1
							}
						}
					break
				default
					break
			endswitch
            }
        }

    ife temp_weap 56 // convert shotgun shells to main gun
	 ifg normal_ammo 0
        {
		ifand AMMO_TYPES[0] 66629 nullop else
         ife kickbackpic 0
            {
			switch CHAR
				case C_JAMES
				case C_ZAXTOR
				case C_HIGHWIRE
				case C_RUSTY
				case C_GEOFFREY
				case C_MIKKO
				case C_CULTIST
				case C_BOMBSHELL
				case C_JANE
				case C_SNOWFALL
					gmaxammo 2 temp3
					ifl player[].ammo_amount 2 temp3
						{
						quote 8603
						setplayer[].kickback_pic 6
						set kickbackpic_2 1
						}
					break
				default
					break
			endswitch
            }
        }

    ife temp_weap 40
        {
         ifcount 13
            {
            state TURNOFF_NVG
            ife scope 0
                {
                set scope 2
                set scope_pal 1
                sound SCIFI_ZOOM_IN
                }
                else
                {
                set scope 0
                sound SCIFI_ZOOM_OUT
                }
            resetcount
            }
        }

	ife temp_weap 14
	{
	  ifand BITS_PRESS 64
	   ife kickbackpic 0
	    ifcount 13
		{
		soundonce RED_COMPBEEP
		xorvar gun_firemode 2147483648
		resetcount
		}
	}

    ife temp_weap 15
    {
     ifcount 13
        {
        sound SCOPE_ZOOM xorvar gun_firemode 16384
        resetcount
        }
    }

    ife temp_weap 10 // Sawn off double barrel mode
       ife kickbackpic 0
       {
       ifand AMMO_TYPES[cur_weap] 1
       {
            ifg explosive_shells 1
                {
                ifl temp_wep_mag 2
                    {
                    setp[].kickback_pic 6
                    setp[].reloading 1
                    }
                else
                    {
                    setp[].kickback_pic 1
                    xorvar gun_firemode 256
                    }
                }
       }
       else
       ifand AMMO_TYPES[cur_weap] 4
           {
             ifg flechete_shells 1
                {
                ifl temp_wep_mag 2
                    {
                    setp[].kickback_pic 6
                    setp[].reloading 1
                    }
                else
                    {
                    setp[].kickback_pic 1
                    xorvar gun_firemode 256
                    }
                }
            }

       else
           {
            getp[].ammo_amount 0 alt_temp1
             ifg alt_temp1 1
                {
                ifl temp_wep_mag 2
                    {
                    setp[].kickback_pic 6
                    setp[].reloading 1
                    }
                else
                    {
                    setp[].kickback_pic 1
                    xorvar gun_firemode 256
                    ifand AMMO_TYPES[cur_weap] 1 nullop else
                    ifand AMMO_TYPES[cur_weap] 4 nullop else
                        {
                        sub alt_temp1 1
                        setp[].ammo_amount 0 alt_temp1
                        }
                    }
                }
            }
       }

      ife temp_weap 12 // Riot gun firing mode
       ife kickbackpic 0
        {
			ifcount 13
            {
				// From tesla to normal, only possible if ammo left
				ifand AMMO_TYPES[cur_weap] 8
				  ifg normal_ammo 0
				{
					sound RIOTGUN_COCK
					setarray AMMO_TYPES[cur_weap] 0
				}
				// Quadruple shots to tesla
				else ifand gun_firemode 16
				  ifg tesla_ammo 0
				{
					sound RIOTGUN_COCK
					xorvar gun_firemode 16
					setarray AMMO_TYPES[cur_weap] 8
				}
				// Normal to quadruple shots
				else ifg normal_ammo 0
				{
					sound RIOTGUN_COCK
					xorvar gun_firemode 16
				}
				resetcount
            }
        }

      ife temp_weap 9 // Riot gun firing mode
       ife kickbackpic 0
        {
        ifcount 13
            {
            sound BRUISER_FLAME
            setp[].kickback_pic 1
            orvar gun_firemode 524288
            resetcount
            }
        }

      ife temp_weap 27 // Riot gun firing mode
       ife kickbackpic 0
        {
        ifcount 13
            {
            ifg tesla_ammo 0 { sound RIOTGUN_COCK ifand AMMO_TYPES[cur_weap] 8 quote 285 else quote 226 xorvar AMMO_TYPE 8 setarray AMMO_TYPES[cur_weap] AMMO_TYPE }
            resetcount
            }
        }
      ife temp_weap 30 // Dart Gun Micro Torpedo
       ife kickbackpic 0
       {
        ifinwater
            {
             ifg micro_torpedo 0
             {
              ife gl_countd 0
                    {
                    set gl_countd 30
                    sub micro_torpedo 1
                    }
             }
             else soundonce DRY_FIRE
            }
        else soundonce DRY_FIRE
        }

      ife temp_weap 48 // rotary bolt launcher
       ife kickbackpic_2 0
        ifg p_orange_mana 0
        set kickbackpic_2 1

      ife temp_weap 49 // Magic Axe
       ife kickbackpic_2 0
        ifg p_green_mana 1
            set kickbackpic_2 1


        ife temp_weap 50 // ringworld crossbow
         ife kickbackpic_2 0
            {
			// silver bolts
            ifand AMMO_TYPES[cur_weap] 16 { ifg p_blue_mana 1 set kickbackpic_2 1 }

			// tek bolts
            else ifand AMMO_TYPES[cur_weap] 8192 { ifg p_orange_mana 0 set kickbackpic_2 1 }

			// void bolts
            else ifand AMMO_TYPES[cur_weap] 16384 { ifg p_purple_mana 0 set kickbackpic_2 1 }

			// normal bolts
            else { ifg p_green_mana 0 set kickbackpic_2 1  }
            }

        ife temp_weap 51 // vorpal sword
         ife kickbackpic 0
		 ifg p_purple_mana 0
        {
        ifcount 16
            {
           soundonce SUMMON
          palfrom 40 40 40 40
          spawn 29814
		  spawn 29814
		  spawn 29814
		  spawn 29814
		  spawn 29814
           state lower_weapon
            resetcount
			sub p_purple_mana 1
            }
        }

ife temp_weap 31 // M60's bipod
        {
        ifp pstanding
            {
            state checkwall
            ife WALL_CLOSE 1
                {
                ifcount 16
                    {
                    espawn 3630
                    set temp3 player[].posx
                    add temp3 256
                    rotatepoint player[].posx player[].posy temp3 player[].posy player[].ang temp5 temp6
                    seta[RETURN].x temp5
                    seta[RETURN].y temp6
                        state lower_weapon
                        xorvar gun_firemode 512
                        soundonce PUT_ON_EQUIP
                        resetcount
                    }
                }
            }
        }

ife temp_weap 32 // Zilla Missile Launcher modes
       ife kickbackpic 0
        {
        ifcount 13
            {
            ifand gun_firemode_two 2 { ifle normal_ammo 0 ifle heat_seek_card 0 nullop else { sound WEAP_FIRE_MODE xorvar gun_firemode_two 2 } }
            else
            ifand gun_firemode_two 1 // if player on heat seeking already
                {
                sound WEAP_FIRE_MODE
                ifg atomic_bomb 0 // Go to Nuke mode if they have the briefcase
                    {
					stopsound WEAP_FIRE_MODE
					sound ZIL_NUK
                    ifg gl_countd 0 set gl_countd 0
                    xorvar gun_firemode_two 2
                    xorvar gun_firemode_two 1
                    }
                else xorvar gun_firemode_two 1 // Turn off heatseeking mode if they don't
                }
            else
                {
                ifg heat_seek_card 0 { sound WEAP_FIRE_MODE xorvar gun_firemode_two 1 } // Go to heat if they have heat seeking card
                else ifg atomic_bomb 0 // Go to Nuke if they have a Nuke
                    {
                    sound ZIL_NUK
                    ifg gl_countd 0 set gl_countd 0
                    xorvar gun_firemode_two 2
                    }
                }
            resetcount
            }
        }

ife temp_weap 33 // Goro gead modes
       ife kickbackpic 0
        ife MELEE_RESEARCH[6] 2
        {
        ifcount 13
            {
            ifand gun_firemode_two 4 { quote 414 sound BLOOD_SPURT xorvar gun_firemode_two 4 xorvar gun_firemode_two 8 }
            else
            ifand gun_firemode_two 8
                {
                quote 413
                sound BLOOD_SPURT
                xorvar gun_firemode_two 8
                }
            else
                {
                quote 415
                sound BLOOD_SPURT
                xorvar gun_firemode_two 4
                }
            resetcount
            }
        }


      ife temp_weap 34 // RG-Minigun mk2 warm up
        {
        ifcount 13
            {
            sound WEAP_FIRE_MODE
            xorvar gun_firemode_two 16
            resetcount
            }
        }

    ife temp_weap 21 // FN FAL ironsight?
        {
         ifcount 13
            {
            sound AUG_MOVEMENT
            ifand gun_firemode 16384
                {
                set hide_xhair 0
                xorvar gun_firemode 16384
                }
                else
                {
                set hide_xhair 1
                xorvar gun_firemode 16384
                }
            resetcount
            }
        }

    ife temp_weap 26 // AK-104 holosight?
        {
         ifcount 13
            {
            sound AUG_MOVEMENT
            ifand gun_firemode 16384
                {
                set hide_xhair 0
                xorvar gun_firemode 16384
                }
                else
                {
                set hide_xhair 1
                xorvar gun_firemode 16384
                }
            resetcount
            }
        }

    ife temp_weap 45 // P90 gunsight?
        {
         ifcount 13
            {
            sound AUG_MOVEMENT
            ifand gun_firemode 16384
                {
                set hide_xhair 0
                xorvar gun_firemode 16384
                }
                else
                {
                set hide_xhair 1
                xorvar gun_firemode 16384
                }
            resetcount
            }
        }

    ife temp_weap 47 // Engy SMG?
        {
         ife player[].kickback_pic 0
          ife kickbackpic_2 0
              {
              ifg temp_wep_mag 9
               ifg player[].ammo_amount 0 9
                {
                getp[].ammo_amount 0 hold_ammo_temp
                setplayer[].kickback_pic 2
                sub hold_ammo_temp 10
                setp[].ammo_amount 0 hold_ammo_temp
                sub temp_wep_mag 10
				set gun_spread 30
                shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE
                shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE shoot CRYSTAL_SPIKE
                set gun_pushb_disp 15
                set kickbackpic_2 15
                }
            else
            state dry_fire
            }
        }

		set ammo_forweaponidx 0				 
		state ammo_getaltdefs
        ifn ammo_remaining -1
        {
			set ammo_forweaponidx 0
			set ammo_doreduce 1
			state ammo_getaltdefs
        }
    }

    // Dropping dynamite/bomb on floor code
    ife cur_weap 8
    ife kickbackpic 0
        {
        switch CHAR
        case 0
        getp[].ammo_amount 8 alt_temp1
        ifg alt_temp1 0
		  ifn SPECIALIST_EQUIPMENT[112] 2 // NOT using rocket punch?
            {
            sound TNT_BOUNCE
            getp[].i alt_temp2
            ifand gun_firemode 32 espawn PROXONFLOOR_2 else
            espawn PROXONFLOOR
            seta[RETURN].owner alt_temp2
            getp[].ammo_amount 8 alt_temp2
            sub alt_temp2 1
            setp[].ammo_amount 8 alt_temp2
            setp[].kickback_pic 10
            }
        break
        case 6
        getp[].ammo_amount 8 alt_temp1
        ifg alt_temp1 0
            {
            sound GRENBOUNCE
            getp[].i alt_temp2
            espawn DISCBOMBFLOOR2
            seta[RETURN].owner alt_temp2
            getp[].ammo_amount 8 alt_temp2
            sub alt_temp2 1
            setp[].ammo_amount 8 alt_temp2
            setp[].kickback_pic 10
            }
        break
        default
        break
        endswitch
        }

    ife cur_weap 5
    ife kickbackpic 0
        {
        switch CHAR
        case 4
        getp[].ammo_amount 5 alt_temp1
        ifg alt_temp1 0
            {
            sound TNT_BOUNCE
            getp[].i alt_temp3
            espawn DYNAMITEONFLOOR
            seta[RETURN].owner alt_temp3
            getp[].ammo_amount 5 alt_temp2
            sub alt_temp2 1
            setp[].ammo_amount 5 alt_temp2
            state lower_weapon
            setp[].curr_weapon 10
            }
        break
        case 6
        getp[].ammo_amount 5 alt_temp1
        ifg alt_temp1 0
        ife player[].weapon_pos 0
            {
            sound GRENBOUNCE
            getp[].i alt_temp3
            espawn DISCBOMBFLOOR
            seta[RETURN].owner alt_temp3
            getp[].ammo_amount 5 alt_temp2
            ifn PS_ITEM 2 sub alt_temp2 1
            setp[].ammo_amount 5 alt_temp2
            state lower_weapon
            }
        break
        case 13
        getp[].ammo_amount 5 alt_temp1
        ifg alt_temp1 0
            {
            sound MC_GREN_BOUNCE
            getp[].i alt_temp3
            espawn MC_GRENADE_ONFLOOR
            seta[RETURN].owner alt_temp3
            getp[].ammo_amount 5 alt_temp2
            sub alt_temp2 1
            setp[].ammo_amount 5 alt_temp2
            state lower_weapon
            setp[].curr_weapon 10
            }
        break
        default
        break
        endswitch
        }

    ife cur_weap 10
    ife kickbackpic 0
        {
        switch CHAR
        case 4
        getp[].ammo_amount 5 alt_temp1
        ifg alt_temp1 0
        ife player[].weapon_pos 0
            {
            sound TNT_BOUNCE
            getp[].i alt_temp2
            espawn DYNAMITEONFLOOR
            seta[RETURN].owner alt_temp2
            getp[].ammo_amount 5 alt_temp2
            sub alt_temp2 1
            setp[].ammo_amount 5 alt_temp2
            state lower_weapon
            }
        break
        case 13
        getp[].ammo_amount 5 alt_temp1
        ifg alt_temp1 0
            {
            sound MC_GREN_BOUNCE
            getp[].i alt_temp3
            espawn MC_GRENADE_ONFLOOR
            seta[RETURN].owner alt_temp3
            getp[].ammo_amount 5 alt_temp2
            sub alt_temp2 1
            setp[].ammo_amount 5 alt_temp2
            state lower_weapon
            setp[].curr_weapon 10
            }
        break
        default
        break
        endswitch
        }

// ****************************************************************************************************************************
// JAMES ALT FIRE CODE ========================================================================================================
// ****************************************************************************************************************************

state james_alt_fire

// ****************************************************************************************************************************
// ZAXTOR ALT FIRE CODE =======================================================================================================
// ****************************************************************************************************************************

state zaxtor_alt_fire

// ****************************************************************************************************************************
// MERLIJN ALT FIRE CODE ======================================================================================================
// ****************************************************************************************************************************

state merlijn_alt_fire

// ****************************************************************************************************************************
// BOMBSHELL ALT FIRE CODE =========================================================================================================
// ****************************************************************************************************************************

state bombshell_alt_fire


// ****************************************************************************************************************************
// HIGHWIRE ALT FIRE CODE =====================================================================================================
// ****************************************************************************************************************************

state highwire_alt_fire

// ****************************************************************************************************************************
// SANG ALT FIRE CODE =========================================================================================================
// ****************************************************************************************************************************

state sang_alt_fire

// ****************************************************************************************************************************
// RUSTY ALT FIRE CODE ========================================================================================================
// ****************************************************************************************************************************

state rusty_alt_fire

// ****************************************************************************************************************************
// GEOFFREY ALT FIRE CODE =====================================================================================================
// ****************************************************************************************************************************

state geoff_alt_fire

// ****************************************************************************************************************************
// MIKKO ALT FIRE CODE ========================================================================================================
// ****************************************************************************************************************************

state mikko_alt_fire

// ****************************************************************************************************************************
// MAARTEN ALT FIRE CODE ======================================================================================================
// ****************************************************************************************************************************

state maarten_alt_fire

// ****************************************************************************************************************************
// JANE ALT FIRE CODE =========================================================================================================
// ****************************************************************************************************************************

state jane_alt_fire

// ****************************************************************************************************************************
// MICKY ALT FIRE CODE =====================================================================================================
// ****************************************************************************************************************************

state micky_alt_fire

// ****************************************************************************************************************************
// SNOWFALL ALT FIRE CODE ===================================================================================================
// ****************************************************************************************************************************

state snowfall_alt_fire

// ****************************************************************************************************************************
// KAGURA ALT FIRE CODE ===================================================================================================
// ****************************************************************************************************************************

state kagura_alt_fire

endevent

// END ALTERNATE FIRE KEY=============================================================================

// ===================================================================================================================================================================
// FIRING MODE
// ===================================================================================================================================================================

onevent EVENT_LOOKDOWN // Change firing mode firemode menu
set RETURN -1

ifn voice_comm_menu 0 set voice_comm_menu 0 else
ife fire_mode_menu 0 ife INTERNALCOUNT_3 0
 ife player_in_vehicle 0
    {
    set AMMO_TYPE AMMO_TYPES[cur_weap]
    ife GUN_AMMO_TYPES 0 soundonce COMP_INVALID
    ifand GUN_AMMO_TYPES 1 set fire_mode_menu 1 // Shotgun Shell menu
    ifand GUN_AMMO_TYPES 2 set fire_mode_menu 2 // Tommy menu
    ifand GUN_AMMO_TYPES 16 set fire_mode_menu 4 // Bolt menu
    ifand GUN_AMMO_TYPES 32 set fire_mode_menu 3 // Grenade launcher menu
    ifand GUN_AMMO_TYPES 64 set fire_mode_menu 3 // Grenade launcher menu
    ifand GUN_AMMO_TYPES 256 set fire_mode_menu 5 // dynamite mode menu
    ifand GUN_AMMO_TYPES 512 set fire_mode_menu 6 // zmissile menu
    ifand GUN_AMMO_TYPES 2048 set fire_mode_menu 7 // 40mm cased menu
    ifand GUN_AMMO_TYPES 4096 set fire_mode_menu 8 // 40 mm caseless menu
    set INTERNALCOUNT_3 8
    }
ifn fire_mode_menu 0 ife INTERNALCOUNT_3 0 { set fire_mode_menu 0 set MOUSEUP 0 set INTERNALCOUNT_3 8 }

endevent

// INVENTORY WHEEL

onevent EVENT_INVENTORYLEFT
ife opt_old_item_sel NO
    {
    getp[].ang PANG
    getp[].horiz PHORIZ
    set P_SWHEEL 1
    set RETURN 0
    }
endevent

onevent EVENT_INVENTORYRIGHT
ife opt_old_item_sel NO
    {
    getp[].ang PANG
    getp[].horiz PHORIZ
    set P_SWHEEL 1
    set RETURN 0
    }
endevent
