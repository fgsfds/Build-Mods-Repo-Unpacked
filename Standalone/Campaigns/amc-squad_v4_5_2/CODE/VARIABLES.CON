/*
-------------------------------------------------------------------------------
===============================================================================

         -ooo:             +oo-            `+oo.       ./+oooooooooo+/:
        /NMMMN+            NMMNo`         -dMMM/      .mMMNmmmmmmmmmMMNo
       /NMd:mMMo           NMMNMd:      `oNMNMM/      :MMM/.........mMMh
      oNMd. -mMMy`         NMN:mMNs`   -hMm/mMM/      :MMM:         ::-.
    `sMMh`   .dMMh`        NMN .sNMd:`oNMh. mMM/      :MMM:
   `yMMMdhhhhhmMMMd.       NMN   /mMNdMm+`  mMM/      :MMM:         ss+:
  `hMMdhhhhhhhhhmMMm-      NMN    .yMMh.    mMM/      :MMM/.........mMMh
 .dMMs`         .hMMm:     NMN      :/`     mMM/      .mMMNmmmmmmmmmMMNo
 :oo+            `+oo+     +o+              +oo.       ./++ooooooooo+/:

###############################################################################
+ The AMC Squad
+ CON code by James Stanfield, Cedric "Sangman" Haegeman, Dino Bollinger,
+              Mikko Sandt, Cedric "Zaxtor" Lutes and Dan "Danarama" Gaskill
-------------------------------------------------------------------------------
* See AMC_MAIN.CON for a full list of script authors.

Feel free to use any code in the game for your own uses; just make
sure to mention the authors and/or "The AMC Squad" in your credits.
--------------------------------------------------------------------------------
NOTES:
This file contains a large range of definitions for general purpose variables.
--------------------------------------------------------------------------------
*/

action MINUSONE -1
action ZERO 0
action ZERO_TWO 0
action ONE 1
action TWO 2
action THREE 3

// ==========================================================================================
// temporary vars
// Vars to store temporaty vars
// ==========================================================================================

var debug_stuff 0 0

var alt_temp1 0 2
var alt_temp2 0 2
var alt_temp3 0 2
var alt_temp4 0 2

var jump_target_addr 0 0

var level_temp 0 0

var g_temp 0 0 // global temp

var damage_temp 0 1
var armour_temp 0 1

var anim_temp 0 1

var temp 0 2
var temp2 0 2
var temp3 0 2
var temp4 0 2
var temp5 0 2
var temp6 0 2
var temp7 0 2
var temp8 0 2
var temp9 0 2
var temp10 0 2

var mag_upg_temp 0 0

// global iterator variables
var i 0 0
var j 0 0
var k 0 0

// storage variable across executions of EVENT_DISPLAYROOMS
var displayrooms_store 0 1

// STATE ARGUMENTS AND RETURN VALUE
var st_return 0 0
var st_arg1 0 0
var st_arg2 0 0
var st_arg3 0 0
var st_arg4 0 0

var disp_menu_temp 0 0
var disp_menu_temp2 0 0
var disp_menu_temp3 0 0
var disp_menu_temp4 0 0
var disp_menu_temp5 0 0
var disp_menu_temp6 0 0

var tex_temp_x -1 0
var tex_temp_y -1 0

var tex_temp_sx -1 0
var tex_temp_sy -1 0

var disp_pulse 1 1

var disp_temp 0 2
var disp_temp2 0 2
var disp_temp3 0 2
var disp_temp4 0 2
var disp_temp5 0 2
var disp_temp6 0 2
var disp_temp7 0 2
var disp_temp8 0 2
var disp_temp9 0 2

var hud_disp_shade 0 2 // stores player hp shade
var hud_disp_pcolour 0 2 // stores player colour for HUD stuff
var hud_disp_pammo 0 2 // stores player ammo amount
var hud_disp_font 0 2 // stores font

var hud_disp_temp 0 2
var hud_disp_temp2 0 2
var hud_disp_temp3 0 2
var hud_disp_temp4 0 2
var hud_disp_temp5 0 2
var hud_disp_temp6 0 2
var hud_disp_temp7 0 2
var hud_disp_temp8 0 2
var hud_disp_temp9 0 2
var hud_disp_temp10 0 2

var text_col 0 0

var crystal_shade 0 1

var weap_disp_temp 0 2
var weap_disp_temp2 0 2
var weap_disp_temp3 0 2
var weap_disp_temp4 0 2
var weap_disp_temp5 0 2
var weap_disp_temp6 0 2
var weap_disp_temp7 0 2
var weap_disp_temp8 0 2
var weap_disp_temp9 0 2

var cosm_col_id 0 1
var cosm_col 0 1

var tsprite_temp 0 2
var tsprite_temp2 0 2
var tsprite_temp3 0 2
var tsprite_temp4 0 2
var tsprite_temp5 0 2

// cus_fade => represents the shade of the overlay sprite used for fading where (-)40 = fully black
// cus_fade_duration => when the screen is fully black or white, it should stay so for this amount of tics at 60 FPS
var cus_fadetics 0 1 // used for normalizing fade speed to frame rate
var cus_fade 40 1
var cus_fadew 40 1
var cus_fade_duration 30 1

defstate fade_out_white
set cus_fadew 0
set cus_fade_duration 30
set cus_fadetics 1
ends

defstate fade_out_black
set cus_fade 0
set cus_fade_duration 30
set cus_fadetics 1
ends

defstate fade_in_black
set cus_fade -40
set cus_fade_duration 30
set cus_fadetics 1
ends

defstate fade_in_white
set cus_fadew -40
set cus_fade_duration 30
set cus_fadetics 1
ends

// temporary array so as not to overwrite the actual main array
gamearray BEAT_EPISODES_TEMP MAX_BEAT_EPISODES

// ==========================================================================================
// WORLD DISPLAY VARS
// Vars to store skybox or visual stuff .etc
// ==========================================================================================

var skybox 0 0
var skybox_x 0 0
var skybox_y 0 0
var skybox_z 0 0
var skybox_scale 64 0
var skybox_sect -1 0
var skybox_angle 0 1
var skybox_horiz 0 2
var skybox_shade 0 0
var skybox_id 0 0
var skybox_tile -1 0
var skybox_z_offset -3 2 // -3 => need to get angvar, -2 => angvar not 512, -1 => angvar is 512, need to update, any other value => offset to apply
var skybox_owner -1 0 // basically this stores the current SE80

var cloud_centre 0 0 // this is just to get it working for now
var cloud_rot_allowed -1 2

var sl_effect 0 1
var sl_effect_x 0 1
var sl_effect_y 0 1

var sl_temp 0 1

// current screen tint timer
var stored_palstime 0 1

// current slomo timer
var current_inittimer 120 0

// global gametic clocks
var gametic_clock 0 0
var disp_seen_gametic -1 0
var disp_gametic_haschanged 0 0

// ==========================================================================================
// DISPLAY VARS
// Vars to store screen stuff
// ==========================================================================================

// variable specifically used to reduce frequency of gamearray loading on character select screen
var load_disp_files 0 0

var loading_hint 0 0

var loading 0 0
var saving 0 0

var prevtick -1 0
var curtick   0 0

var menu_track 0 0

var error_msg 0 1

var gun_damage_types 0 1 // bitfield for loadout terminal
var gun_dam_temp 0 1

// this is JUST for the GUI in the loadout terminal, has zero gameplay effect
// the names are arbitrary as well

define GDT_SOFT 3008
define GDT_STANDARD 3968
define GDT_ARMOURP 3590
define GDT_RIFLE 3584
define GDT_SILVER 2440
define GDT_GOLD 2048
define GDT_APLASER 3078
define GDT_PLASMA 2240
define GDT_EXPLODE 2944
define GDT_LASER 2496
define GDT_FLAME 2576
define GDT_THUNDER 3072
define GDT_MAGIC 2432

// 1 = good against body armour
// 2 = good against armour
// 4 = good against robotic
// 8 = good against supernatural
// 16 = good against chitin
// 32 = good against beyond

// 64 = bad against body armour
// 128 = bad against armour
// 256 = bad against robotic
// 512 = bad against supernatural
// 1024 = bad against chitin
// 2048 = bad against beyond


var gui_element_lock 0 1

var ds_location 0 1
var ds_picnum 0 0

var show_system 0 1 // what location the mission command interface is showing

var rollover_sound 0 1 // has the game played the roll over sound?

var button_counter 0 1 // countdown between button presses

var hide_xhair 0 1

var disp_acc 0 1
var disp_vis 0 1

var hit_indic 30 0
var hit_indic_pal 0 0
// 0 = normal
// 32 = critical
// 126 = reduced
// 124 = ineffective

var hud_hp_temp 0 1
var hud_hp_overheal_temp 0 1
var hud_armour_temp 0 1
var hud_shield_temp 0 1

var mouse_hint -1 1 // Hint line
var mouse_hint_timer 32 1 // how long before hint displays

var picked_id 0 1
var pick_x 50 1

var picked_up 0 1
var picked_up_tile 0 1
var item_amount 0 1
var pu1_pal 0 1

var picked_up_two 0 1
var picked_up_tile_two 0 1
var item_amount_two 0 1
var pu2_pal 0 1

var picked_up_three 0 1
var picked_up_tile_three 0 1
var item_amount_three 0 1
var pu3_pal 0 1

var tspr_picnum 0 0

// Research screen variables
// Minimize chance for errors by using unique temp variables for this
// Color bitmap: LSB = 0 -> normal colors, LSB = 1 --> all gray
// each bit beyond the LSB stands for one line in the requirements
gamevar temp_rescolour 0 0
gamevar temp_resinput_cond 0 0
gamevar temp_resinput_cost 0 0
gamevar res_was_spooked 0 0

// ==========================================================================================
// PLAYER VARS
// Vars to store player stuff
// ==========================================================================================

var ignore_current_use 0 1
var use_action_allowed 0 1

// if use key is pressed, this variable will increment per tic and will reset to 0 when let go.
// use this to perform certain actions that should only happen if the player holds the key down for a while.
var use_action_tics 0 1

var used_door_trans -1 1

var sprint_holster 0 1

var exit_id 0 2

var throw_key 5 1
// 5 = throw slot5 grenade
// 8 = throw slot8 weapon

var player_ability_1 0 1
// merlijn = troll ground pound
var player_ability_2 0 1

var player_ability_3 0 1

var runspeed_reduced_tics 0 1 // amount of tics runspeed is reduced

var initplayer NO 1

var player_dodge 0 1 // can player dodge? 0 = no, 1 = yes, 2 = yes, full dodge
var movement_level 0 1

var haunted_factor 0 0 // how 'haunted' is the player? from 0-800

var char_sel_anim 0 1 // character select anim
var display_rot 0 1 // character select rotation
var display_rot2 0 1 // character select rotation

var lockp_countdown -1 1 // lock player movement and aim ifg 0

var player_jib 0 1 // for preventing infinite spawning of gibs in some situations

gamearray wep_get_sound 15

// contains air for the scuba training project
gamevar air_left 0 1

var swear_addr 0 1
var swear2_addr 0 1
var pickup_addr 0 1

var prev_melee_ang -1 1 // previous player angle for the melee lock-on mechanic
var prev_ladder_ang_set 0 1 // previous player angle for the ladder (and zipwire)
var prev_ladder_ang -1 1 // previous player angle for the ladder (and zipwire)
var vehicle_ang -1 1 // vehicle x-angle to be set by the vehicle (-1 --> freelook)
var vehicle_horiz -1 1 // vehicle y-angle  to be set by the vehicle (-1 --> freelook)

var cheated 0 1 // save if the player's cheated or not

var fake_shrunk 0 1 // set if player is 'fake' shrunk

var hold_breathe 0 1 // set if player is holding breathe for sniping

var player_berserking 0 1
var temporary_no_helmet 0 1

var weap_show 0 1 // showing weapons?

var throwing -1 1

var pickup_quote_track 0 1 // keeps track of played quotes

var jib_quote_track 0 1 // keeps track of played quotes

var just_init 0 1 // Just initialized. JUST INIT BRUV

// contains what kind of gun type the weapon is
var weapon_type 0 1

// 0 = Standard
// 1 = armour piercing
// 2 = soft projectile (shotgun.etc)
// 3 = Gold-standard rounds
// 4 = explosive
// 5 = arrow/bolt
// 6 = thrown/utility
// 7 = supernatural bullets
// 8 = Projectile
// 9 = Armour-piercing projectile
// 10 = Nuclear
// 11 = Melee

// contains the tile for the gun's pickup

gamearray WEAPON_TILE 16
gamearray W_AMMO_TILE 16

// 0 = temp weapon
// 1 = slot 1 (pistol)
// 2 = slot 2 (shotgun)
// 3 = slot 3 (machinegun)
// 4 = slot 4 (rocket launcher)
// 5 = slot 5 (grenade)
// 6 = slot 6 (special 1)
// 7 = slot 7 (special 2)
// 8 = slot 8 (trap)
// 9 = slot 9 (special 3)

var c_medikit 0 2
var c_steroids 0 2
var c_holoduke 0 2
var c_jetpack 0 2

var c_nvg_normal 0 1
var c_nvg_heat 0 1

var disp_nvg 0 1

var c_scuba 0 2
var c_boots 0 2
var c_armour 0 2
var c_heavy_armour 0 2

var draw_animation 0 1

var weapon_lowersound_handled -1 1

// used for what guns have what attachments and stuff
gamearray weap_special 15

// 1 = Can be used akimbo
// 2 = Has a 40mm grenade launcher
// 8 = Has a 40mm caseless grenade launcher
// 4 = Shotgun uses a box magazine
// 64 = can be used with a spacesuit
// 128 = Can overheat
// 256 = concealable
// 512 = no expander
// 1024 = Suppressor

// 16384 = Alt-fire
// 32768 = Tert-fire

gamearray ammo_amount 12 // controls how much ammo to give the player

gamearray picked_up_gun 11
gamearray picked_up_inven 8

var ep2_new_char 0 0
var ep3_new_char 0 0
var ep4_new_char 0 0

var music_level 0 1
var music_check 240 1
var music_play 0 1

var music_fade 0 1
var music_vol 100 1

var music_override 0 1

var injured 0 1 // use for sequences or whatever where player is injured

var need_to_fire 0 1 // holds if the game needs to temporarily assign ammo to start hardcoded firing process
var hold_ammo_temp 0 1 // holds the player's ammo temporarily (made so it doesn't get polluted by other vars)

// Determines Merlijn's shield, as well as other characters armour pic
var merl_shieldup 0 1
var merlijn_shield 100 1
var maartn_shield 150 1
var merlijn_shield_cap 100 1
var m_shieldtype 0 1

// custom var holding the holoduke amount
var holoduke_amount 0 131073

var booster_item 0 1
var booster_amount 400 131073

// Determines riot shield
var shield_up 0 1
var riot_shield 0 131073
var shield_type 0 131073

// 0 = riot shield
// 1 = wood shield
// 2 = big wood shield

// Determines shield shaking value
var shield_shake 0 1
var shake_rand 0 1

var cur_weap 0 0
var cur_ammo 0 131073
var guns_akimbo 0 131073

var firekey_indicator 0 1

var gun_firemode 0 131073
var gun_firemode_two 0 131073
// 1 = heat seeking missile
// 2 = nuke missile
// 4 = DUP missile
// 64 = akimbo?
// 256 = if using shotgun with multiple barrels (e.g. sawn off), means using both barrels
// 512 = bipod?
// 1024 = akimbo??
// 2048 = suppressor on
// 32768 = grenade launcher mode

var shoot_mode 0 1
var scope 0 1
var scope_pal 0 1 // contains the scope pal
var gl_countd 0 1
var nuke_countd 0 1
var shield_bash 0 1

var kickbackpic 0 1
var kickbackpic_2 0 1
var kickbackpic_3 0 1
var kickbackpic_4 0 1

var reload_type 0 1 // What type of reload?

gamearray needs_pump 16 // Does the player need to do something after reloading?
var shotgun_load 0 1 // player needs to load shotgun?

var reload_temp 0 1

var wepsway_x 0 1
var wepsway_y 0 1

// ==========================================================================================
// AMC BASE STUFF
// Vars to store base equipment, research progress, loadouts .etc
// ==========================================================================================

var amc_base 0 0 // is player in the amc base?
var new_research 0 131073 // New research?

var artifact_used 0 1 // set when the player's artifact is used passively

var amc_soldier_upgrades 0 0
gamearray player_spawnpoint MAXCHARS // holds player spawnpoint sprite positions
var max_supply_level 0 1

var play_base_music 0 0

var shuffle_list 0 0
var shuffle_safety 0 0

// 1 = AMCB.OGG - og base 1 track
// 2 = AMCB_2.OGG
// 4 = AMCB_2B.OGG
// 8 = AMCB_4.OGG
// 16 = AMCB_3.OGG - og base 2 track

// 32 = AMCB_5.OGG - post ep4 track

// 1024 = ARCTIC.OGG - beat both xmas levels
// 2048 = TITA.OGG - brough iw_complete over
// 4096 = SYNTH.OGG - saved lilith
// 8192 = RANGERS.OGG - impress Highwire
// 16384 = RANDR.OGG - bought bughetti
// 32768 = GANGSTA.OGG - finished pipedream

// ==========================================================================================
// INTERFACE VARS
// Vars to store interface stuff
// ==========================================================================================

var CONV_CHOICE_1 -1 1
var CONV_CHOICE_2 -1 1
var CONV_CHOICE_3 -1 1
var CONV_CHOICE_4 -1 1

// Global bitmap for non-repeatable conversation triggers (e.g. Arsia Mons Arms Dealer door, to replace problematic usage of temp9)
// 1 - Arms Dealer door open
// 2 - Arms Dealer part 2
// 4 - Energeia Scientist
var CONVO_STATE 0 0

// ==========================================================================================
// ENEMY VARS
// Vars to store enemy stuff
// ==========================================================================================

var faction_flag 0 2
var global_faction -1 0 // if set to anything other than -1, will cause every non-allied faction to be chums

var move_flag 0 2
var move_flag2 0 2

// 0 = ignored
// 1 = enemy
// 2 = hated (all factions attack these)
// 3 = ally

var dummy_ogdam 0 0
var dummy_dam 0 0
var dummy_count 0 0

var npc_mia -1 2

var HIT_DAMAGE 0 2 // how much the damage hit for

var NPC_SHIELD 0 2 // enemy forcefield
var NPC_REC_DELAY 0 2

var blood_type 0 2

// 1 = blue
// 5 = brown
// 8 = green
// 27 = grey (ice)
// 30 = purple

var actor_pal 0 2

var actor_type 0 2

define TYPE_BODY_ARMOUR 1
define TYPE_FULL_BODY_ARMOUR 2
define TYPE_ARMOURED 3
define TYPE_ARMOURED_HELMET 4
define TYPE_SUPERNATURAL 5
define TYPE_ROBOTIC 6
define TYPE_CHITIN 8
define TYPE_BEYOND 9
define TYPE_VEHICLE 11

define TYPE_IGNORE_DAMAGE 15 // this is for actors that shouldn't hurt the player

define TYPE_CASE_SPECIFIC 16

var enemy_attack 0 2 // enemy attack type, grenades .etc

var COMBAT_CHECK -1 0
var CC_MUSIC 0 0
var enemies_cleared 150 0 // This variable relies on SHOOTME, it's not reliable enough anymore for some cases

var spells_cast 0 1

var necro_ress 0 0 // how many enemies necro will resurrect?
// -1 = perma ress

// 1 = dark area

var targetlock 0 2

var sightvar 0 2

var temp_size 0 2

var PROJ_UDATA 0 0

var COSMETIC_FLAME 0 2

var MIA_HEALTH 0 2 // holds health when hit by MIA blast

var SHRUNK_TIME 0 2

// These variables used by enemies that have attacks where they can appear at pre-defined points (eg. vegunth, hydra, succubus)
array enemypoints 30 // Max 30 points
var enemypoints_max_idx 30 4096
var enemypoint_index 0 0
var cur_enemypoint -1 2
var prev_enemypoint -1 2
var tmp_enemypoint_index 0 2
var tmp_cur_enemypoint -1 2
var cur_point_enemy -1 2 // current enemy on the point
var enemypoint_handled 0 2

// Variables used by enemies with abilities on a cooldown
var enemy_cooldown1 0 2
var enemy_cooldown2 0 2
var enemy_cooldown3 0 2
var enemy_cooldown4 0 2
var enemy_cooldown5 0 2
var enemy_spawn_tokens 10 2

// Set to 1 if the enemy is currently deflecting damage (by holding out a shield)
var enemy_deflecting 0 2

// boss stage stuff
var boss_stage -1 2
var boss_stage_handled -1 2

// Custom kagura charge increase, default is 1
var kag_charge_inc 1 2

var is_flammable 0 2

// ==========================================================================================
// OBJECT PICKUP VARS
// Vars to store object pickup stuff
// ==========================================================================================

var player_holding -1 0
var drop_forced 0 2
var drop_force_x -1 2
var drop_force_y -1 2
var drop_force_z -1 2
var pickup_sound -1 2
var pickup_voiceover 0 2 // set to 1 for player voiceover
var drop_sound -1 2
var pickedup_runspeed -1 2

// set to 1 to force pickup of object (currently used for cannonball spawn after pressing use on a pile, to instantly put the cannonball in the player's hands)
// it gets set back to -1 as soon as the object is picked up (so it should only happen once)
var pickup_forced -1 2

// ==========================================================================================
// MATH VARS
// Vars to store mathematical stuff
// ==========================================================================================

gamearray WALL_X 16384
gamearray WALL_Y 16384

gamearray FLOOR_X 4096
gamearray FLOOR_Y 4096

gamearray CEILING_X 4096
gamearray CEILING_Y 4096

gamearray WALL_PICNUMA 16384
gamearray MASK_PICNUMA 16384
gamearray FLOOR_PICNUM 4096
gamearray CEILING_PICNUM 4096

var mysector -1 2
var mysector_backup -1 2

var SECT_NUM 0 2

// WALL_CLOSE vars
var WALL_CLOSE 0 1
var xydist2 0 2
var zdist 0 2
var mysin 0 2  // The sine of the angle of the actor using hitscan
var mycos 0 2
var hitsector 0 2  // The sector that gets hit by the hitscan
var hitwall2 0 2

define clipmask 4294901808

var initx 0 2
var inity 0 2
var initz 0 2

// ==========================================================================================
// GAME VARS
// Vars to store game stuff
// ==========================================================================================

var LOTAGSAVED 0 2
var HITAGSAVED 0 2
var EXTRASAVED 0 2
var PALSAVED 0 2
var XVELSAVED 0 2
var YVELSAVED 0 2
var ZVELSAVED 0 2
var CSTATSAVED 0 2
var CLIPDISTSAVED 0 2
var OWNERSAVED 0 2
var SHADESAVED 255 2 // set to impossible shade value by default so we know if it's been accessed
var XREPEAT_SAVED 0 2
var YREPEAT_SAVED 0 2
var ZPOS_SAVED 0 2
var MASTERSWITCH_SUBSCRIBE 0 2 // use in conjunction with checkactivatormotion to also pick up on masterswitch motions
var MASTERSWITCH_RETURN 0 2 // if tag assigned to MASTERSWITCH_SUBSCRIBE has activated, MASTERSWITCH_RETURN is set to 1. Otherwise 0
var ms_temp 0 2 // temp variable used in the event handling this stuff
var ms_temp2 0 2 // temp variable used in the event handling this stuff

var month 0 0

var upd_sect 0 2 // used for update sector checks

var STOP_EFFECTS 0 0

var dummy_face -1 0 // code that will make cutscene actors turn to face this sprite

var FORCEFIELD_TURNOFF -1 0

var play_sound 0 2

var BELLTIME 0 0 // how long bell must toll

var PC_TURNED_ON 0 0 // has ingame PC been turned on?

var pad_id -1 1 //This stores the id of the keypad that the player is using.
var pnum 0 1 // This stores the passcode as he enters it.

var param 0 2

var FALL_COUNTER 0 2 // how long thing has been falling
var FALLING 0 1

var NUMBER_OF_SOULS -1 0 // number of souls Lilith has guarding her remaining

var WAYPOINT 0 2 // holds waypoint id

var poi 0 2 // point of interest

var BIG_GUN_CHARGE 0 0 // holds g_ship's big gun charge

var ALT_DEVI_CYCLE 0 1

gamearray TRAIN 128

var SPRITE_LIFT_TOP 0 2
var SPRITE_LIFT_BOTTOM 0 2
var SPRITE_LIFT_SIDE 0 2

var SPRITE_ELEV_MOVEMENT 0 2

var HACKING_PROGRESS -1 1
var HACK_UNLOCK -1 0

var wallpoint 0 0
var numwalls 0 0
var currwall 0 0
var area 0 0

var SMALLX 0 0
var SMALLY 0 0
var BIG_X 0 0
var BIGY 0 0
var grasscount 0 0
var attempts 0 0
var sect 0 0

var CHARGE_UP 0 0 // global var holding teleporter's charge rating

var LIGHTNING_STRIKE 0 0 // what lightning strike is triggering

var laddersound -1 1

var sound_rand 0 2

var xhair_x 0 2
var xhair_y 0 2

var ANGLE 0 2

var TANK_MACHINEGUN 0 1

var ANGLESET 0 2
var SET 0 2

var RADIO_CONTACT 1 0 // Is player in touch with base?

var PATCOS_CHARGE 0 0

var start_daze 0 2 // player is dazed?
var p_dazed_count 0 1

var dazed_count 0 2 // actor is dazed for?

var PAIN_AMOUNT -1 2 // set to how long an enemy is in pain for

var ALARM_ACTIVE 0 0 // is the alarm active in a level
var ALARM_DETECT 0 1 // if the alarm is actively detecting a player
var ALARM_COUNTER 0 0 // the 'amount' of alarm active

var GUN_VOLUME 0 1 // how loud a gun is
var GUN_ACCURACY 16 1 // determines the gun's accuracy
var gun_spread 0 1 // determines the gun's spread
var GUN_MAX_SPREAD 0 1 // determines the max amount of spread
var gun_recoil 0 1 // determines the camera kick when firing (visual only)

var CUS_WACK 0 1 // own wackplayer since default wrecks skyboxes
var PREV_CUS_WACK 0 1

var screen_shake 0 1
var shake_temp 0 1
var shake_strength 4 1

gamearray AMMO_TYPES 16 // array holding what ammo a gun is holding

var LAST_SHELL_FIRED 0 1 // holds last shell type fired so gun spawns correct ammo
var LAST_SHELL_FIRED_2 0 1 // holds last shell type fired so gun spawns correct ammo

// "ALT" AMMO TYPES:
// 1 = Explosive Shells
// 2 = Silver Bullets
// 4 = Flechete Shells
// 8 = Tesla Ammo
// 16 = Silver bolts
// 32 = Grenade launcher 40mm HE shell
// 64 = 4/0 magnum shells
// 128 = Grenade launcher 40mm MIA shell
// 256 = 40mm Plasma Shell
// 512 = caseless 40mm Slug
// 1024 = Dragon's breathe shell
// 2048 = caseless electro
// 4096 = caseless cryo
// 8192 = Tek bolt
// 16384 = Void bolt
// 32768 = incend rounds
var AMMO_TYPE 0 1 // holds what ammo type the current gun is holding
var AMMO_TYPE_2 0 1 // holds what ammo type the current gun's alt fire is holding

// GUN AMMO TYPES:
// 1 = Shotgun shells
// 2 = .45 ammo (Silver)
// 4 = Advanced shotgun shells (only be fired by pump-action guns, to give them advantage over semi-auto)
// 8 = Riot-gun ammo (Ammo that can be used by riotgun)
// 16 = Bolts
// 32 = Has GL
// 64 = Has caseless GL
// 128 = <unused>
// 256 = used for certain throwables
// 512 = Missile launcher (DUP etc)
// 1024 = Heat-based (gun can overheat)
// 2048 = Grenade launcher 40mm (M203 .etc)
// 4096 = Grenade launcher 40mm caseless
// 8192 = blue mana
// 16384 = green mana
// 32768 = orange mana
// 65536 = purple mana
var GUN_AMMO_TYPES 0 1 // controls what sort of ammo types the gun can use
array GUN_AMMO_TYPES_ARR 16 // gun ammo types per weapon														

var GUN_SIZE 1 1 // 0 is short, 1 is medium, 2 is long and 3 is very long

// 0 - 400mm - short or very light
// 400mm - 750mm - medium or medium weight
// 750mm - 1250mm - long or heavy
// 1250mm+ - very long or very heavy

var GUN_HANDS 2 1 // How many hands the player needs to hold the weapon (used for ladders, shields, .etc .etc)
var HANDS_DRAW 2 1 // used for drawing weapons and stuff, to hide 2nd hand if the player's using it .etc .etc

var GUN_HEAT_VAR 0 1 // gun's temperature

gamearray GUN_HEAT 15

gamearray RESOURCES 128

// 1 = Common metals
// 2 = Precious Metals
// 3 = Fuel
// 4 = Organic material
// 5 = Exotic Material
// 6 = Rare Earths

// 20 = Irdium
// 21 = Mythril
// 22 = Adamantite
// 23 = Orichalcum
// 24 = Neutronium
// 25 = Turbidium
// 26 = Abyssium

// 30 = Cycloid Plasma
// 31 = Anti-matter

var TREASURE_FOUND 0 0

var AMC_BUDGET_INCREASE 0 0 // What to show on the level end screen

var DISP_LOADOUT_COST 0 1
var LOADOUT_COST 0 1 // Total cost of equipment used

var PLAYER_IDENTITY 0 1
var force_taunt 0 1
var voice_comm_menu 0 1
var fire_mode_menu 0 1
var player_taunt -1 2
var voice_cooldown 0 1

var ally_v_coold 0 2

var ally_mag 0 2

var INVASION 0 0

var screen_pal 0 0

var camera_bars -18 0
var cameraoffset 0 1
var prev_q16horiz -1 1
var prev_horiz_set 0 1

var HIDE_SPRITES 1 0

var TIMEZONE 0 0

var allow_fire YES 1

var allow_temp_characters 16 0

// laddervars
var onladder 0 1
var laddervel 0 1
var lastladderx 0 1
var lastladdery 0 1
var fpress 0 1
var bpress 0 1
var spriteid 0 0
var target -1 2

var LADDERTYPE 0 1

var LADDER_ANIM1 0 1
var LADDER_ANIM2 0 1

var control_display 0 1 //

var player_in_vehicle 0 1 // 1 if player is in vehicle, 0 if not

var player_using_hovercraft -1 1
var player_using_fighter -1 1
var player_using_hovertank -1 1
var player_using_VR_tank -1 1
var player_using_mech -1 1
var player_using_horse -1 1
var player_using_submarine -1 1

var player_using_train -1 1

var mech_startup_sequence -1 1

var hc_missile_fire 0 1
var mech_maingun_fire 0 1
var hc_gear 2 1

var forward_accelerate 0 2

var BITS_PRESS 0 1
var EXTBITS_PRESS 0 1

var mech_hud_shake 0 0

var LEAN_COUNT 0 1

var PROJ_HIT_TYPE 0 2

var PENETRATE_STRENGTH 0 2 // the lower the better
var MATERIAL_STRENGTH 0 2 // the lower the stronger

var DISP_STUFF 0 1

gamearray BAR_SIZE 21
gamearray INVEN_BAR_SIZE 9
var invwheel_x 0 1
var invwheel_y 0 1

var r_spookcycler 0 0
var r_spookcounter 0 0
var r_lilithcounter 0 0
var rs_prev_totalclock 0 0

var JET_TOGGLE 0 1 // player has held jump to toggle jetpack on

var jump_speed 0 1

var TSPRITE_PLAYER 0 2

var gun_pushb_disp 0 1 // Display code
var gun_pushb_disp2 0 1 // Display code
var GUN_IS_EMPTY 0 1 // Display var for if gun's mag was emptied

var CHECKBOX -1 1

var CBOXSLOT1 -1 2
var CBOXSLOT1PAL -1 2
var CBOXSLOT2 -1 2
var CBOXSLOT3 -1 2
var CBOXSLOT4 -1 2
var CBOXSLOT5 -1 2
var CBOXSLOT6 -1 2

var SELSLOT 0 1

// ALLY VARIABLES

var ally_temp 0 2

var max_ally 3 1

var ALLYSLOT1 -1 1
var ALLYSLOT2 -1 1
var ALLYSLOT3 -1 1
var ALLYSLOT4 -1 1
var ALLYSLOT5 -1 1
var ALLYSLOT6 -1 1
var ALLYSLOT7 -1 1
var ALLYSLOT8 -1 1

var ALLY_VOICE 0 2 // Countdown timer till ally replies

var PLAYER_VOICEOVER 0 1

// 1 = Ally has died
// 2 = Exerting noise
// 3 = Need a key
// 10 = Using guns machine
// 11 = Fixing wooden board
// 12 = Need a toolkit
// 13 = Fixed something
// 14 = Character special ability needs something
// 15 = Character special ability success

var NOISE_SAID 0 1

// 1 = annoying/ladder
// 2 = alarm active
// 4 = time portal
// 8 = char ability
// 16 = comment on weather
// 32 = item box
// 64 = support char
// 128 = bleh
// 256 = dark area
// 512 = cursed
// 1024 = boss specific stuff

var FOLLOW_PLAYER 0 2
var ALLY_ORDER 0 2

var HEAL_COUNT 0 2

var max_health 0 2

var P_GENDER 0 1 // holds the gender of the played character

var GENDER 0 2 // holds the gender of the soldier
var LAST_NAME 0 2 // holds the name of the soldier

define MALE 0
define FEMALE 1

var INTERNALCOUNT 0 2
var INTERNALCOUNT_2 0 2
var INTERNALCOUNT_3 0 2
var INTERNALCOUNT_4 0 2

// This should probably be a per-player var, but I'll keep it as-is for now to prevent further problems --bdino
var CHAR_APP 0 0 // Character appearence

var loading_tile 0 0 // loading screen tile

// 1 = James Bionic hand
// 2 = Crusader Sang
// 4 = Berserker Merlijn
// 8 = Upgraded Mikko
// 16 = SMART Highwire
// 32 = V Rusty
// 64 = Ringworld James
// 128 = Bearded Micky

var sightz 0 2

var GIVE_ITEM 0 1

var SEEK_ENEMY_COUNT 0 2

var auto_room_type 1 1
var room_type 0 1
var room_type_reset 0 1

// 0 = default
// 1 = buildings
// 2 = hallway
// 3 = open area
// 4 = room

// special actor
// 1 = don't kill
var SPEC_ACT 0 2

var MONSTER_FLAGS 0 2

// 1 = Flying enemy
// 2 = Human
// 4 = cloaking enemy
// 8 = ghostly enemy
// 16 = lava enemy

var npc_talking 0 2

var npc_killed 0 0 // set this var when dead to trigger speech in enemy allies

var npc_sound 0 2 // hold id of speech sound playing to stop on death

// 1 = Triad
// 2 = Mercenaries
// 4 = Russians
// 16 = MJ12
// 32 = PE
// 64 = town guard
// 128 = bad town guard
// 256 = Cycloids
// 512 = bad guys

var lizjumpx 0 1
var lizjumpy 0 1
var lizjumpdist 0 1
var LIZBVAR 0 0
var LIZBVAR2 0 0
var LIZBVAR3 0 0

var PIGBVAR 0 0
var PIGBVAR2 0 0
var PIGBVAR3 0 0
var PIGBRESET 0 2

var bossx 0 2
var bossy 0 2
var bossang 0 2
var newx 0 2
var newy 0 2


var DAYNIGHT 0 0 // Is it day or night? 1 if day, 2 if night, 3 if evening/morning

var SLO_MO_SHOWOFF 0 0
var FISSION_MAILED 0 0

var actor_breathe_count 0 2

// for some HUD bars
var digx 0 1
var digy 0 1

// CULTIST CHOKE VARS
var CHOKE 0 1
var FCHOKE 0 1
var cultist_pal 0 1
var FCHOKESTOP 0 1 // Stops anybody from force choking the player till this is 0 again

// CULTIST SHOTGUN STRUGGLE
var shotgun_struggle -1 1
var shotgun_struggle_num 0 1

// PHANTASM BALL STRUGGLE
var phantasm_stick -1 1
var phantasm_struggle 0 1

// Troll struggle
var troll_struggle -1 1

// succubus struggle
var succubus_struggle -1 1

var chainsaw_struggle -1 1

var npc_chainsaw_struggle -1 1
var npc_chainsaw_id -1 1

var ninja_struggle -1 1
var ninja_struggle_num 0 1

/*
 * LOGO_FLAGS -- defines behavior for the intro, cutscenes, menu and automap -- bitmask MUST be defined here, otherwise it will be overridden when starting a new game!
 * -- ENABLED FLAGS :: UPDATE IF ALTERED --
 * LOGO_ENABLED 1              - 0x0000001
 * LOGO_PLAYANIM 2             - 0x0000002 // required for logo.ivf
 * LOGO_NOE1ENDSCREEN 65536    - 0x0001000
 * LOGO_NOE2ENDSCREEN 131072   - 0x0002000
 * LOGO_NOE3RADLOGO 262144     - 0x0004000
 * LOGO_NODUKETEAMTEXT 524288  - 0x0008000
 * LOGO_NODUKETEAMPIC 1048576  - 0x0010000
 * LOGO_STOPMISCSOUNDS 2097152 - 0x0020000 // disable NITEVISION_ONOFF on main menu
 * LOGO_HIDEEPISODE 16777216   - 0x1000000 // disable hardcoded automap episode display
 * LOGO_NOHELP 33554432        - 0x2000000
 * LOGO_NOCREDITS 67108864     - 0x4000000
*/
var LOGO_FLAGS 0x703F003 0

var allies_present 0 0
var both_present 0 0

// Arrays
gamearray Player_equip 128
gamearray James_equip 128
gamearray Zaxtor_equip 128
gamearray Merlijn_equip 128
gamearray Highwire_equip 128
gamearray Sang_equip 128
gamearray Rusty_equip 128
gamearray Geoffrey_equip 128
gamearray Mikko_equip 128
gamearray Micky_equip 128
gamearray Snowfall_equip 128
gamearray Kagura_equip 128

gamearray secret_count 64

var mission_scare 0 1

var player_spooked 0 1
var override_spook_protection 0 1
var cheat_spook 0 1

var vr_glitched 0 1

// Random Vars
var swear_random 0 1
var altswear_random 0 1
var weap_pick_random 0 1
var footstep_random 0 1
var snowprint 0 1

var player_swap 26 1
var swap_tile -1 1

var give_loadout 1 0

var player_use 26 1
var player_hitspace 0 1
var player_fire 26 1
var player_door 26 1
var player_ship 26 1
var player_bipod 26 1
var player_ninja 26 1
var player_unlock 26 1

var mission_update 0 1

var scan_mode 0 1
var switch_laser 0 1
var hold_down 0 1

var door_locked 26 1
var key_icon -1 1
var key_pal 0 1

var gunsmoke_angle 96 2
var gunsmoke_z 6144 2
var gun_pushback_power 0 2

var wall_pal 0 2

gamevar next_wall 0 2

var bomb_throw_power 0 1

var on_tripwire 0 1
var caught_in_web 0 1
var caught_in_net 0 1
var GENERATOR_ACTIVE 0 0

var shield_reg_disp 0 1

var countdown -1 0
var countdown_fail -1 0
var countdown_minutes 0 0
var countdown_seconds 0 0
var countdown_type 0 0

var myowner 0 2

// Player hit counter stuff
var PBEENHIT 0 1
var PHITANGLE 0 1

gamearray AR_PBEENHIT 17
gamearray AR_PHITANGLE 17

defstate HIT_IND
set temp4 -1
whilevarn temp4 16
    {
    add temp4 1
    ife AR_PBEENHIT[temp4] 0
        {
        set PBEENHIT 45
        setarray AR_PBEENHIT[temp4] 45

        geta[].htang temp
        sub temp sprite[].ang
        setarray AR_PHITANGLE[temp4] temp
        set temp4 16
        }
    }
ends

defstate HIT_IND_ARM
set temp4 -1
whilevarn temp4 16
    {
    add temp4 1
    ife AR_PBEENHIT[temp4] 0
        {
        set PBEENHIT -45
        setarray AR_PBEENHIT[temp4] -45

        geta[].htang temp
        sub temp sprite[].ang
        setarray AR_PHITANGLE[temp4] temp
        set temp4 16
        }
    }
ends


var water_submerge 0 1
var water_screen 30 1
var count_timer 0 0

var hit_key 0 1

var COMM_LINK 0 0
var COMM_COUNTD 0 0

var HEADSHOT 0 2

var disp_txt 0 0

// CAMERA VARIABLES
var camerasprite -1 0 // What number camera
var cameratime 0 2 // How long to show it for
var cameratype -1 0 // Should this camera remove the HUD and add a letter box?
var cameraskipping 0 0 // Set to 1 if skipping cutscene

var cuts_txt -1 0
var cs_textl 1 0 // How many lines of text?
var cs_timer 0 0 // timer of cutscene text

var cs_total_time 0 0 // total length of dialogue

var text_x 0 0 // conversation text x pos
var text_y 0 0 // conversation text y pos

var cameraend 0 0 // hides flicker when cam switches

define RADIO_FULL 12000
define RADIO_HALF 24000

var radio_portrait -1 0
var radio_pal 0 0
var radio_size 0 0

var speaker -1 0 // who's speaking? used for potential animation stuff

// 0 = James
// 1 = Zaxtor
// 2 = Merlijn
// 3 = Highwire
// 4 = Sang
// 5 = Rusty
// 6 = Geoffrey
// 7 = Mikko
// 10 = Bombshell
// 11 = Maarten
// 12 = Jane
// 13 = Micky
// 14 = Snowfall
// 15 = Suitless Micky
// 17 = Kagura
// 20 = Cassandra
// 21 = Axon
// 22 = Engineer
// 23 = Oveus
// 24 = Alea
// 25 = Freija

var CUSENDLEVEL 0 0

var subt_id 0 1 // id of subtitle quote

var gp_subt 0 1 // time to display
var ally_subt 0 1 // time to display

var SCIENTIST_CAM -1 0

var activatetext -1 0

var playsound 0 2
var itemsound 0 2
var cuts_sound 0 2
var sound_pitch 0 1 // can be changed to 2 if need be

var just_changed 0 1 // If the player has changed character, this sets the right anim

// Mounted Weapons
var using_turret -1 1
var turret_type -1 1
// 0 = minigun
// 1 = 50cal
// 2 = ballista
// 3 = magic ballista

var gun_turret_shield 500 2
var gun_turret_sh_temp 0 1

var current_sg_ammo 0 1
var stationary_gun_ammo 1000 2
var firing_count 0 1

// Temp weapons
var temp_weap 0 131073
var normal_ammo 0 131073
var silver_ammo 0 131073
var incend_ammo 0 131073


var silver_bolts 0 131073
var tek_bolts 0 131073
var void_bolts 0 131073

var bolt_cap 50 1


var explosive_shells 0 131073
var flechete_shells 0 131073
var magnum_shells 0 131073
var dragon_shells 0 131073
var tesla_ammo 0 131073
var micro_torpedo 0 131073
var heat_seek_card 0 131073
var atomic_bomb 0 131073
var DUP_missile_ammo 0 131073
// cased grenades
var fortymm_grenades 0 131073 // standard grenades
var fortymm_shells 0 131073 // HE shells (similar to SW)
var fortymm_MIA_shells 0 131073 // MIA grenades
var fortymm_plasma 0 131073 // Plasma grenade
// caseless grenades
var fortymm_caseless 0 131073 // GEP caseless
var fortymm_slug 0 131073 // slug
var fortymm_electro 10 131073 // caseless electro
var fortymm_cryo 0 131073 // Cryo grenade
// magic
var p_blue_mana 0 131073
var p_green_mana 0 131073
var p_orange_mana 0 131073
var p_purple_mana 0 131073
var p_curr_mana 0 131073

var max_blue_mana 100 0
var max_green_mana 50 0

var max_orange_mana 25 0
var max_purple_mana 10 0

var grenade_counter 0 2

var IS_PLAYER 0 2

var swing_type 0 1

var near_crystal 0 1

var MOVESOUND 0 1

var PLAYER_PROTECTED 0 1


var MEDIKIT_USING 0 1

var CROUCH 0 1


// GENERAL
var wp_temp 0 1
var x 0 1
var y 0 1
var x2 0 1
var y2 0 1
var z2 0 1
var tilenum 0 1
var tilenum2 0 1

var fist_tile 0 1

var pal 0 1

var wep_pal 0 1
var arm_pal 0 1

var pal_2 0 1

var shade 0 1

var shoot_countdown 26 2

// FOR CAMERA ARROWS
var PCAMERA 0 1
var CAMID 0 1

// FOR COMPUTER SCREENS
var MOUSEUP 0 1

var Q16_MOUSEX 0 1
var Q16_MOUSEY 0 1

var MOUSEX 0 1
var MOUSEY 0 1

var info_number 0 1

var INFO_SEL 0 1
var INFO_SEL_2 0 1
var INFO_SEL_3 0 1

// bit field for hiding stuff
var COM_FILTER 319 1

// 1 = Episode 1 missions
// 2 = Episode 2 missions
// 4 = Episode 3 missions
// 8 = Episode 4 missions
// 16 = Episode 5 missions
// 2048 = Episode 6 missions

// 32 = Facilities
// 64 = Information
// 128 = Help
// 256 = Resources
// 512 = Filter screen
// 1024 = EDF missions

// FOR FAKE DOOR
var ENDPOINTX 0 2
var ENDPOINTY 0 2
var ENDPOINTZ 0 2

// READING
var DOCUMENT -1 1
var PAGEICON -1 1
var PAGENUMBER 0 1
var MAXPAGES 0 1
var PAGETURNSOUND 0 1



var GOT_PASSWORD 0 1 // has the player gotten a password in the level?

// POWERUPS

var SWORD_RAMP 0 1
var INVINC 0 1

// HITSCAN
var hitx 0 2
var hity 0 2
var hitz 0 2
var hitsect 0 2
var hitsprite 0 2
var hitwall 0 2

var p_hitx 0 1
var p_hity 0 1
var tracker -1 1

var total_player_shade_diff 0 1
var player_shade_diff 0 1

// IF 0, DELETE SOME NON ESSENTIAL SPRITES
var PERFMODE 1 1

var global_trigger 0 0
var destruct_trigger 0 0

var INVEN_REPLACE 0 0

// STORY STUFF
var STORY_TRIGGER1 0 0
var STORY_TRIGGER2 0 0
var STORY_TRIGGER3 0 0

var WORLD_TRIGGER 0 0 // use for basic stuff

var CIVS_PANIC 0 0 // set this to 1 to make civilians run around panicking

gamevar DONE 0 0

// COMPUTER STUFF
var inter_id -1 0
var PCINTER 0 1
var JPCMENU 0 1

// store the indices of the last visited AMC Base map
var amcbase_level -1 0x220400
var amcbase_volume -1 0x220400

var mis_lev -1 0
var mis_vol -1 0
var jump_gate 0 0

// MISSION STUFF
var MISSION_UP 0 1
var MISSIONPOS 320 1
var MISSIONSCREEN 0 1
var MISSIONLINE1 0 0
var MISSIONLINE2 0 0
var MISSIONLINE3 0 0
var MISSIONLINE4 0 0
var MISSIONLINE5 0 0
var MISSIONLINE6 0 0

var tl_pic -1 0

var THISSHADOW -1 2

// Track active bosses
gamearray BOSS_STACK 16
var BOSS_IDX 0 0

var CURBOSS -1 0
var BOSS_TYPE 0 0

// 0 = Default
// 1 = Cycloid
// 2 = Demon
// 3 = Medievil
// 4 = Robotic
// 5 = Paranormal
// 6 = Shadow Realm
// 7 = Egyptian
// 8 = Trenton Solari

var SHIP_INTEGRITY -1 0
var HUGE_BOSS_HEALTH -1 0

var REACTOR_VAR -1 0
var REACTOR_BREACH 0 0

var ITEMBITFIELD 0 2

// KEYS ( most of these are bitfields)
var KEYCARDTYPE 0 1 // Tells the code to display normal access cards or runes for example
var RUNEKEYS 0 131073
var SCARABKEYS 0 131073
var ACCESSKEY2 0 131073
var SW_KEYS 0 131073

var PLUGKEY 0 131073
var HELLGKEYS 0 0
var HELLGKEYSA 0 0
var ABYSS_KEYS 0 131073


var OLDKEYS 0 131073
// 1 = flame key
// 2 = spider key
// 4 = eagle key
// 8 = moon key
// 16 = skull key
// 32 = eye key

var NORMAL_KEYS 0 131073

var GENERIC_KEYS 0 131073


var COGS 0 131073
var FLOPPY_DISK 0 131073

var HOLO_ACCESS 0 131073
var SWIPECARDS 0 131073

var INV_SEL_X 0 1
var INV_SEL_Y 0 1
var P_SWHEEL 0 1

var WHEEL_ROTATE 0 1

var DISP_KEY 40 1
var DISP_KEY_PIC 0 1
var DISP_KEY_PAL -1 1

var DISP_MAINMENU 1 0

var DISP_RES 40 1
var DISP_RES_PIC 0 1
var DISP_RES_PAL -1 1

var DISP_GUN 40 1
var DISP_GUN_PIC 0 1
var DISP_GUN_CHAR 0 1

var EGYPT_KEYS 0 131073
var EGYPT_ARTIFACTS 0 131073

// found in data.con but kept here so I can find the bitlist easily enough
// var ELYSION_QUEST 0 131073

// 1 = ALL DONE
// 2 = Spoken to the wizard
// 4 = Micky quest
// 8 = Rusty quest
// 16 = James Quest
// 32 = Merlijn quest
// 64 = Micky quest done
// 128 = Sang quest
// 256 = Sang quest done
// 512 = Rusty Quest done
// 1024 = Snowfall quest
// 2048 = Snowfall quest done
// 4096 = James quest done
// 8192 = Kagura quest
// 16384 = Kagura quest done
// 32768 = Zaxtor quest
// 65536 = Zaxtor Quest done
// 131072 = Merlijn quest done
// 262144 = Mikko quest
// 524288 = Mikko quest done

// 304317 = activate all quests
// 950270
// 154432 = all quests done

var temple_key 0 1
// 1 = 1st Half
// 2 = 2nd Half
// 4 = put togher
// 8 = AI uploaded

// 1 = HIGH JUMP SANDALS
// 2 = OXYGEN MASK
// 4 = POWER BRACELETS
// 8 = SLOW-FALL FEATHER

var GOT_EXPLOSIVE 0 131073
var AIRSTRIKE_MARKER 0 131073
var AIR_FILTER 0 131073
var FIRE_SUIT 0 131073
var JUGGERN_SUIT 0 131073
var SPACE_SUIT 0 131073
var LIFE_SUPPORT 14400 131073
var GAS_MASK 0 131073
var GOT_FLIPPER 0 131073
var JUMP_BOOTS 0 131073 // 0 = not acquired, 1 = acquired
var JUMP_BOOTS_USED 0 131073 // 0 = not used in current fall, 1 = used
var TOOLBOX 0 131073
var HEAT_GOGGLES 0 131073
var HEAT_SINKS 0 131073
var ROPE 0 131073
var GOT_FIREWALL 0 131073
var FIREWALL_ID 0 1 // set to Firewall ID

var DROWN_COUNT 0 1
var OXYGEN_HIT 0 1 // records HP damage done by drowning

var AUTOAIM_STATUS -1 1
var AUTORUN_STATUS -1 1

var GAS_MASK_PUTON 26 1

var FORTUNE_QUOTE 0 1
var FORTUNE_TIMER 0 1

var ingas 0 131073
var infire 0 131073
var inspace 0 131073
var flash_banged 0 131073

// Character specific items
var PS_ITEM 0 1

// 1 = James Forceshield
// 2 = Geo Bandana
// 3 = Snowfall shield
// 4 = Sang Mirror Orb

// WEAPONMAGS

// DEPRECATED => gun_mag in favor of gun_mags array that can hold the mag for each weapon slot.
var gun_mag 0 131073 // The Var that displays the magazine count on the HUD

// Separate gun ammo into the current loaded "mag" and the "pools"
// if the ammo_amount for a given weapon is 0, this messes up hardcoded stuff so it shouldn't be 0 if there's still either mag or pool remaining
// the weapon HUD elements should always use mag or pool value where applicable
// Adding to ammopools instead of ammo_amount is going to be a massive refactoring
array gun_mags 10
var gun_mags_arr_count 10 0
array gun_ammopools 10

var temp_wep_mag 0 131073 // What's in the temp weapon's magazine
var max_temp_wep_mag 0 1 // The maximum amount allowed in the temp weapon's magazine

var PISTOLMAG 0 131073 // What's in the Pistol's magazine
var MAXPISTOLMAG 0 1 // The maximum amount of ammo in the pistol's mag allowed
var CURPISTOLAMMO 0 131073 // total ammo of the pistol (can be alt ammo)

var SHOTGUNMAG 0 131073 // How many shells does the shotgun have
var MAX_SHOTGUNMAG 0 1 // Max number of shells allowed in shotgun

var SHOTGUNBOXMAG 0 131073 // How many shells in the shotgun's magazine
var MAX_SHOTGUNBOXMAG 0 1

var MGUNMAG 0 131073 // What's in the assault rifle's magazine
var MAXMGUNMAG 0 1 // The maximum amount of ammo in the assault rifle's mag allowed

var ROCKETMAG 0 131073 // generally slot 5 weapon

var slot6_mag 0 131073 // generally slot 6 weapon
var max_slot6_mag 0 1

var SLUGSHOTMAG 0 131073 // generally slot 11 weapon

var rifle_mag 0 131073 // The Sniper rifle's magazine
var max_rifle_mag 0 1 // Max Rifle magazine

var MACHINE_MAG 0 131073 // Machine Gun's magazine
var MAX_MACHINE_MAG 0 1 // Maximum ammo for machine gun

var ALTMAG 0 131073 // Alternate fire's mag

// How drunk the player is
var INEBRIATION 0 1

var ALT_ANIM 20 1
var ALT_ANIM_2 20 1

// SKILL LEVELS
var SKILL_LEVEL 0 0
var SKILLCHANCE 0 0 // used for determining skill based stuff

var RANDOM_CHANCE 0 2

var angvar 0 2
var angvar_backup 0 2

// Get's the players angle and view angle so it locks when viewing computers
var PANG 0 1
var PHORIZ 0 1

// Determines the rotation for some weapon's muzzleflash
var rot_flash 0 2
var rot_flash2 0 2

var gunsmoke_disp 40 1
var gunsmoke_disp2 40 1

var ZOOMAMOUNT 4 1

var gui_pos_x 0 1
var gui_pos_y 0 1

var gui_pos_x_temp 0 1
var gui_pos_y_temp 0 1

var gui_pos_x2 0 1
var gui_pos_y2 0 1

var gui_pos_x_temp2 0 1
var gui_pos_y_temp2 0 1

var rain_temp 0 1

var pdestination -1 131073
var WAIT 0 2
var playerwait 0 131073
var xoff 0 131073
var yoff 0 131073
var zoff 0 131073

var alpha 0 2

defstate SPAWN_IN_PLAYER_FRONT
        set temp3 player[].posx
        add temp3 512
        rotatepoint player[].posx player[].posy temp3 player[].posy player[].ang temp5 temp6
        seta[RETURN].x temp5
        seta[RETURN].y temp6
        geta[RETURN].ang temp4
        sub temp4 -1024
        seta[RETURN].ang temp4
ends

defstate SPAWN_IN_FRONT
        set temp3 sprite[].x
        add temp3 512
        rotatepoint sprite[].x sprite[].y temp3 sprite[].y sprite[].ang temp5 temp6
        seta[RETURN].x temp5
        seta[RETURN].y temp6
        geta[RETURN].ang temp4
        sub temp4 -1024
        seta[RETURN].ang temp4
ends
defstate SPAWN_BEHIND
        set temp3 sprite[].x
        sub temp3 64
        rotatepoint sprite[].x sprite[].y temp3 sprite[].y sprite[].ang temp5 temp6
        seta[RETURN].x temp5
        seta[RETURN].y temp6
        geta[RETURN].ang temp4
        sub temp4 -1024
        seta[RETURN].ang temp4
ends

defstate GETHITAGLOTAG
    ifn sprite[].hitag 0 { geta[].hitag HITAGSAVED seta[].hitag 0 }
    ifn sprite[].lotag 0 { geta[].lotag LOTAGSAVED seta[].lotag 0 }
ends

defstate GETHITAG
    ifn sprite[].hitag 0 { geta[].hitag HITAGSAVED seta[].hitag 0 }
ends

defstate GETLOTAG
    ifn sprite[].lotag 0 { geta[].lotag LOTAGSAVED seta[].lotag 0 }
ends

defstate GETEXTRA
    ifg sprite[].extra 0 { geta[].extra EXTRASAVED seta[].extra -1 }
ends

defstate GETALLTAGS
{
    geta[].hitag HITAGSAVED
    geta[].lotag LOTAGSAVED
    geta[].extra EXTRASAVED
    ifn sprite[].xvel 0 geta[].xvel XVELSAVED
    ifn sprite[].yvel 0 geta[].yvel YVELSAVED
    ifn sprite[].zvel 0 geta[].zvel ZVELSAVED
    geta[].clipdist CLIPDISTSAVED
    seta[].hitag 0
    seta[].lotag 0
    seta[].extra 0
    seta[].xvel 0
    seta[].yvel 0
    seta[].zvel 0
}
ends

var my_cos 0 2
var my_sin 0 2
var move_angvar 0 2

// TODO James give this a proper name and location.. you used the same name as a state I already wrote which seems to mess with things :P
defstate skybox_movesprite_state
    geta[].ang move_angvar
    cos my_cos move_angvar
    sin my_sin move_angvar

        // divide or multiply the cos and sin values to change the speed.
        // default result is already quite fast so you probably want to divide (shiftr)
    shiftr my_cos 4
    shiftr my_sin 4

    movesprite THISACTOR my_cos my_sin 0 CLIPMASK0 RETURN
ends

var IN_DREAM 0 0

gamearray INVENTORY_SLOTS 32
var WH_SLOT_X 0 2
var WH_SLOT_Y 0 2
var THIS_SLOT 0 1

var DISTANCE 0 1

var xydist 0 2

var PIE_temp 0 2
var PIE_temp2 0 2
var PIE_temp3 0 2

defstate pythagoras
// next code gets distance between (x,y) and (hitx,hity), puts result in xydist

set PIE_temp x
set PIE_temp2 hitx
sub PIE_temp PIE_temp2
mulvarvar PIE_temp PIE_temp

set PIE_temp2 y
set PIE_temp3 hity
sub PIE_temp2 PIE_temp3
mulvarvar PIE_temp2 PIE_temp2

add PIE_temp PIE_temp2
sqrt PIE_temp PIE_temp
set xydist PIE_temp
ends

var GUN_CHARGE 0 1

var RUSTY_BAYONET 0 1

var RUSTY_MINE_GUN 0 2

var SWORD_ANIM 0 1

var BLOOD_PAL 0 1

var WEP0_BLOODY 0 1
var WEP1_BLOODY 0 1
var WEP2_BLOODY 0 1
var WEP3_BLOODY 0 1
var WEP9_BLOODY 0 1

gamearray GEO_MEGA_SHOT 10 // name kept for simplicity's sake
// 0 = Geoffrey's mega pistol shot
// 1 = Zilla inc Atomic bomb
// 2 = Zax's Super galil atom bomb

var GEO_CALCULATE_TRAJ 0 1

var KAGURA_CHARGE 0 1

var DEATH_CAM -1 1

var p_rollhoriz_goal 100 1
var p_isbfrolling 0 1

var SWORD_BLOCK 0 1

var vr_bar_left 127 1
var vr_bar_right 127 1

var CONTROL_VR -1 1
var VR_ACTION_POINTS 0 1

var SHOOTDYNAMITE -1 0
var SHOOTGRENADE -1 0
var SHOOTHOLYG -1 0
var SHOOTDISCBOMB -1 0
var SHOOTCLUSTER -1 0

var command 0 2
var global_display_timer 0 131072

// PLAYER HEALTH AND ARMOUR VALUES
var pmax_stamina 100 1
var pmax_hp_countd 0 1
var pmax_health 100 1

// FIRST AID STUFF
// firstaid total => indicates to how far we can overfill a first aid kit with healing items
// This is calculated based on player max health + some modifying factors (research)
var pmax_firstaid_total 0 1

// firstaid onpickup => indicates the maximum amount of health that is allowed to be present in the current firstaid inventory item before new pickups of the inventory item are no longer allowed
// this is 100 for most characters except where research allows for more (same as with total)
var pmax_firstaid_onpickup 100 1

// so eg, you're playing as Zaxtor with 255 HP:
// no inventory item and you pick it up => 100 in it
// no heal done and new item encountered => not picked up
// you healed and there's now 99 or less => picked up and value is back to 100
// the value is at any point below 255 and you pick up a healing item (and you have the research yadda yadda) => gets added to first aid kit UP TO 255.

var PHEALTH 0 1
var PARMOUR 0 1
var PBOOST 0 1

var P_HAS_SHIELD 0 131073
var P_ENERGYSHIELD 0 131073
var P_MAX_SHIELD 0 131073
var P_REC_DELAY 0 131073

var P_SPIRIT_ARMOUR 0 131073
var P_FIRE_ARMOUR 0 131073

var mindshield_cooldown 0 1 // cooldown for mindshield research

var ARM_BLEEDOFF 0 1 // holds damage that affects player

var MAX_FIRE_DAMAGE 100 4096
var start_fire_damage -1 2 // starting value for fire damage, set once at start of processing and reset on end
var fire_damage 0 2
var fire_protect 0 1

var spirit_damage 0 2
var ice_damage 0 2
var energy_damage 0 2
var silence_damage 0 2
var emp_damage 0 2
var acid_damage 0 2

var kag_blush 0 1

var IFF_COOLD 0 1 // Cooldown of drone IFF

var CURSED 0 1
var BLINDED 0 1

var COUNTER 0 1
var COUNTER_2 0 1

var CSPAWNPOSX 0 2
var CSPAWNPOSY 0 2
var CSPAWNPOSZ 0 2
var CSPAWNANG 0 2

var hud_disp 1 1

var CUSTOMKEYCARDPOS 0 1
var CKEYCARDTILE 0 1
var CKEYCARDTILE2 0 1
var CKEYCARDTILE3 0 1
var CKEYCARDPAL 0 1
var CTRIPBOMB 0 1
var CKNEE 0 1
var CDETON 0 1
var CTIP 0 1
var CPIPEBOMB 0 1
var CHOLDING_R 9431 1 // right hand
var CHOLDING_L 9431 1 // left hand
var CHOLDING_3 0 1 // left hand 2 for launcher nades and stuff

var C_ARM_1 0 1 // Holding arm 1 (shorter version)
var C_ARM_2 0 1 // Holding arm 2 (longer version)

var C_HAND_1 0 1
var C_HAND_2 0 1

var C_UNIQUE_1 0 1
var C_UNIQUE_2 0 1
var C_UNIQUE_3 0 1
var C_UNIQUE_4 0 1

var C_PISTOL_R 0 1 // Right pistol hand
var C_PISTOL_L 0 1 // Left Pistol hand

var footstep_count 0 2
var old_fs_count 0 2

var FLOORTEX 0 2
var STEPSOUNDFX 0 2

var CHAR -1 1
var P_CHAR -1 2

// char defines to help with readability, C_ prefix to avoid possible conflicts
define C_JAMES 0
define C_ZAXTOR 1
define C_MERLIJN 2
define C_HIGHWIRE 3
define C_SANG 4
define C_RUSTY 5
define C_GEOFFREY 6
define C_MIKKO 7
define C_CULTIST 9
define C_BOMBSHELL 10
define C_MAARTEN 11
define C_JANE 12
define C_MICKY 13
define C_SNOWFALL 14
define C_KAGURA 17

// These defines are used for flags on mission box
define FLAG_ALL 0
define FLAG_JAMES 1
define FLAG_ZAXTOR 2
define FLAG_MERLIJN 4
define FLAG_HIGHWIRE 8
define FLAG_SANG 16
define FLAG_RUSTY 32
define FLAG_GEOFFREY 64
define FLAG_MIKKO 128
define FLAG_MICKY 256
define FLAG_SNOWFALL 512
define FLAG_KAGURA 1024
define FLAG_CULTIST 2048
define FLAG_BOMBSHELL 4096
define FLAG_JANE 8192
define FLAG_MAARTEN 16384

var m_charselect_flags 0 1
var m_charselect_current 0 1
var m_charselect_forced 0 1 // 0 = not forced (specify no flag for any character, or specify subset via flags), 1 = forced (either single char or multi char missions like eg for providence)
var m_charselect_used 0 1 // 0 = the new char select is not yet applied to this mission (legacy), 1 = used. Only switch to chosen character if this value is 1. This variable will be removed when all is migrated.

var char_help -1 1
var CHARSELECT 1 1
var CHARSTART 0 1
var LOCATION 8448 0

var CHARSHADE 0 1

var QUICKK 13 1
var GOT_KNIFE 0 131073
var KNIFE_ATTACK 26 1
var MELEE_GRAPHIC 0 1
var ROUNDHOUSE_KICK 26 1
var SLIDE_KICK 26 1
var SPIN_KICK 26 1
var TWIRL_KICK 26 1
var FLYING_KICK 26 1
var DROP_KICK 26 1
var WALL_KICK 0 1

var MELEE_LOCKED_ON -1 1
var UPPER_CUT 20 1

var ZERO_G_ZVEL 0 1

var END_LEVEL 0 1
// as soon as end_level is ever above 0, this value gets set to 1 and is not reset until next map load.
// this makes it so that the loading screen doesn't quickly disappear between the period where end_level gets set back to 0 and the next map actually loads.
var END_LEVEL_TRIGGERED -1 1

var ROLL_LEFT 21 1
var ROLL_RIGHT 21 1
var ROLL_BACKWARDS 27 1
var ROLL_FORWARDS 27 1

var stamina_shake 0 1 // visual shake to stamina bar so player can see they don't have enough
var p_stamina 100 1
var DIVING 0 1

var MERL_SPIN_SLASH 27 1

var knockbackang 0 1
var knockback 0 1
var knockback2 0 1
var knockback_slide 0 1
var knockbackheight 0 1

var my_x 0 2
var my_x_backup 0 2
var my_y 0 2
var my_y_backup 0 2
var my_z 0 2
var mx 0 2
var my 0 2
var mz 0 2
var z 0 2
var xvel 0 2
var yvel 0 2

var player_bike 0 1


// Zaxtor game vars

var temp266 0 0
var temp267 0 0
var DOOROP_X_1 0 0
var FFIELDTOLERANCE_LV 0 0
var FFIELDRESISTANCE 0 0
var BARRIERPWRLV 0 0
var POWERINGSOMETHINGX 0 0
var EX_BEAM 0 0
var EX_BEAMF 0 0
var EX_BEAMOPF 0 0
var EX_BEAMOPF01 0 0
var EX_BEAMOPF02 0 0
var EX_BEAMOPF03 0 0
var EX_BEAMOPF04 0 0
var EX_BEAMOPF05 0 0
var EX_BEAMOPF06 0 0
var EX_BEAMOPF07 0 0
var EX_BEAMOPF08 0 0
var EX_BEAMOPF09 0 0
var EX_BEAMOPF10 0 0
var JBGENEDEAD 0 0
var ACCUNLOCKED 0 0
var SWITC_H_CODES 0 0
var GIVINGANItempAPER 0 0
var PYRAMIDCODAGE 0 0
var INSIDEQUICKFALL 0 0
var G_MOVINGPRT 0 0
var G_MOVINGPRT2 0 0
var BEETLECODES01 0 0
var BEETLECODES02 0 0
var BEETLECODES03 0 0
var BEETLECODES04 0 0
var BEETLECODES05 0 0
var BEETLECODES06 0 0
var BEETLECODES07 0 0
var BEETLECODES08 0 0

defstate PAIN_SKILL_LEVELADJUST // sets amount of time enemy plays pain animation for
ife SKILL_LEVEL 1 set PAIN_AMOUNT 16
else ife SKILL_LEVEL 2 set PAIN_AMOUNT 13
else ife SKILL_LEVEL 3 set PAIN_AMOUNT 6
else ife SKILL_LEVEL 4 set PAIN_AMOUNT 3
else ife SKILL_LEVEL 5 set PAIN_AMOUNT 1
ends

defstate SKILL_SHOOT_LEVELADJUST // chance to shoot depending on skill level
ife SKILL_LEVEL 1 set SKILLCHANCE 8
else ife SKILL_LEVEL 2 set SKILLCHANCE 16
else ife SKILL_LEVEL 3 set SKILLCHANCE 32
else ife SKILL_LEVEL 4 set SKILLCHANCE 48
else ife SKILL_LEVEL 5 set SKILLCHANCE 64
ifn CHAR -1
	{
	ife ARTIFACTS_LOADOUT[CHAR] 1 sub SKILLCHANCE 2
	else ife ARTIFACTS_LOADOUT[CHAR] 2 sub SKILLCHANCE 2
	else ife ARTIFACTS_LOADOUT[CHAR] 5 sub SKILLCHANCE 2
	}
// stayput enemies should fire more often since they don't have full mobility
ifactornotstayput nullop else mul SKILLCHANCE 2
randvar RANDOM_CHANCE 256
ends

// Copied to skill_accuracy_penalty in TARGET.CON. Usage of this state to be phased out.
defstate SKILL_ENEMY_ACCURACY // accuracy penalty based on skill level for enemies
ifl SKILL_LEVEL 5
    {
    geta[].ang temp
    ife SKILL_LEVEL 1 randvar temp2 128
    else ife SKILL_LEVEL 2 randvar temp2 96
    else ife SKILL_LEVEL 3 randvar temp2 64
    else ife SKILL_LEVEL 4 randvar temp2 32
    ifrnd 128 add temp temp2
    else sub temp temp2
    seta[].ang temp
    }
ends

defstate DARKNESS_ENEMY_ACCURACY // slight accuracy penalty if player is in a dark area
    ifg sprite[PLAYER_IDENTITY].shade 20
        {
        geta[].ang temp3
        ife SKILL_LEVEL 1 randvar temp2 48
        else ife SKILL_LEVEL 2 randvar temp2 32
        else ife SKILL_LEVEL 3 randvar temp2 24
        else ife SKILL_LEVEL 4 randvar temp2 16
        ifrnd 128 add temp3 temp2
        else sub temp3 temp2
        seta[].ang temp3
        }
ends

defstate DARKNESS_TARGET_ACCURACY // slight accuracy penalty if target is in a dark area
ifn target -1
    {
    ifg sprite[target].shade 20
        {
        geta[].ang temp3
        ife SKILL_LEVEL 1 randvar temp2 48
        else ife SKILL_LEVEL 2 randvar temp2 32
        else ife SKILL_LEVEL 3 randvar temp2 24
        else ife SKILL_LEVEL 4 randvar temp2 16
        ifrnd 128 add temp3 temp2
        else sub temp3 temp2
        seta[].ang temp3
        }
    }
ends

defstate SKILL_LEVELADJUST // increases chance on lower skill levels
ife SKILL_LEVEL 1 set SKILLCHANCE 128
else ife SKILL_LEVEL 2 set SKILLCHANCE 64
else ife SKILL_LEVEL 3 set SKILLCHANCE 16
else ife SKILL_LEVEL 4 set SKILLCHANCE 8
else ife SKILL_LEVEL 5 set SKILLCHANCE 4
ifn CHAR -1
{
ife ARTIFACTS_LOADOUT[CHAR] 1 add SKILLCHANCE 32
else ife ARTIFACTS_LOADOUT[CHAR] 2 add SKILLCHANCE 32
else ife ARTIFACTS_LOADOUT[CHAR] 5 add SKILLCHANCE 32
}
randvar RANDOM_CHANCE 256
ends

// Thanks to Hunter_Rus for this code
// Return between floor and THISACTOR in z variable.
// Return actual sector in SECT.

// Get sector floor distance (regular and TROR)
defstate getfloordist
  geta[].sectnum upd_sect
  updatesectorz sprite[].x sprite[].y sprite[].z upd_sect
  ifn upd_sect -1 getflorzofslope upd_sect sprite[].x sprite[].y z
  sub z sprite[].z
  shiftvarr z 8
  sub z 1
ends

// Get distance for all types of floors (sector, TROR and spritebridge)
defstate getfloordist_sbs
  geta[].sectnum upd_sect
  updatesectorz sprite[].x sprite[].y sprite[].z upd_sect

  // The following is done to check for both spritefloors and TROR floors
  ifn upd_sect -1
    {
    hitscan sprite[].x sprite[].y sprite[].z upd_sect 0 0 10000 temp temp temp temp temp temp2 4294901808
    getflorzofslope upd_sect sprite[].x sprite[].y temp3
    }
  ifl temp3 temp2 set z temp3
  else set z temp2

  sub z sprite[].z
  shiftvarr z 8
  sub z 1
ends

defstate getceildist
  geta[].sectnum upd_sect
  updatesector sprite[].x sprite[].y upd_sect
  ifn upd_sect -1 getceilzofslope upd_sect sprite[].x sprite[].y temp5
  geta[].z z
  sub z temp5
  shiftvarr z 8
  sub z 1
ends

var myspawner -1 2
var ceiltext -1 0

var weather_type 0 0
// 1 = cold
// 2 = low gravity
// 3 = no gravity

/*
new floor cstats
8192 = cold breathe
16384 = electric
65536 = water

262144 = floor scroll

new ceiling stats
8192 = no spawn
16384 = low gravity

*/

var wallx 0 0
var wally 0 0
var wallx2 0 0
var wally2 0 0

defstate sector_slope
geta[].sectnum mysector
ifn sector[mysector].floorslope 0
{
  getsector[mysector].wallptr temp
  getwall[temp].point2 temp2
  getwall[temp].x wallx
  getwall[temp].y wally
  getwall[temp2].x wallx2
  getwall[temp2].y wally2
  subvarvar wallx wallx2
  subvarvar wally wally2
  getangle angvar wallx wally
  ifg sector[mysector].floorslope 0 sub angvar 512 else
  add angvar 512
}
ends

var FILLER 0 2

var NUKE_ACTIVE 0 0 // if a Nuclear explosion is present

var RAINREPLACE 0 0
var rainstart 0 0
var raining 0 0 // number of rain or snow sprites spawned per tick, negative when snowing
var rainpal 0 0
var raincstat 0 0
var rainradius 0 0
var snowceiling 0 0
var mtype 0 2

var mantling 0 1
var mantcheck 0 1
var jumped 0 1
var mantwait 0 1
var mantz 0 1

var hp 0 1

defstate checkwall // checks to see if there is a close wall

// WALL_CLOSE will be set to 1 if the answer is yes, 0 otherwise
set WALL_CLOSE 0

// we start by checking for the dreaded slope at feet problem

geta[].z z
geta[].x x
geta[].y y
geta[].sectnum mysector
geta[].ang angvar
set zdist 0
cos mycos angvar
sin mysin angvar

hitscan x y z mysector mycos mysin zdist hitsector hitwall hitsprite hitx hity hitz clipmask
state pythagoras
set xydist2 xydist // saves the distance
sub z 1536
hitscan x y z mysector mycos mysin zdist hitsector hitwall2 hitsprite hitx hity hitz clipmask
state pythagoras
ifn hitwall -1
ife hitwall hitwall2 ifg xydist xydist2 break // it's one of those slopes...

sub z 1536 // now we do the first "real" hitscan
hitscan x y z mysector mycos mysin zdist hitsector hitwall hitsprite hitx hity hitz clipmask
state pythagoras

ifg xydist 512 break //512

//ife hitwall -1 ifn hitsprite -1 set hitwall hitsprite // treats sprite as wall

// now a second hitscan to see whether the upper body is above the wall

sub z 7168
hitscan x y z mysector mycos mysin zdist hitsector hitwall2 hitsprite hitx hity hitz clipmask

//ife hitwall2 -1 ifn hitsprite2 -1 set hitwall2 hitsprite2 // treats sprite as wall

state pythagoras
ifg xydist 512 ifvarvarn hitwall hitwall2 set WALL_CLOSE 1

ends

defstate checkwall_2 // checks to see if there is a close wall

// WALL_CLOSE will be set to 1 if the answer is yes, 0 otherwise
set WALL_CLOSE 0


// we start by checking for the dreaded slope at feet problem

geta[].z z
geta[].x x
geta[].y y
geta[].sectnum mysector
set zdist 0
cos mycos player[].posxv
sin mysin player[].posyv

hitscan x y z mysector mycos mysin zdist hitsector hitwall hitsprite hitx hity hitz CLIPMASK0
state pythagoras
set xydist2 xydist // saves the distance

hitscan x y z mysector mycos mysin zdist hitsector hitwall2 hitsprite hitx hity hitz CLIPMASK0
state pythagoras
ifn hitwall -1
ife hitwall hitwall2 ifg xydist xydist2 break // it's one of those slopes...

hitscan x y z mysector mycos mysin zdist hitsector hitwall hitsprite hitx hity hitz CLIPMASK0
state pythagoras

ifg xydist 512 break //512
ifl xydist 0 break

set WALL_CLOSE 1
ends

defstate check_actor_hitscan
geta[].x x
geta[].y y
geta[].sectnum temp
geta[].ang temp3

sin my temp3
cos mx temp3
geta[].z z
sub z 4096

hitscan x y z temp mx my 0 hitsect hitwall hitsprite hitx hity hitz 16777280
ends

defstate supply_system
    readarrayfromfile FACILITIES_OWNED F_FACILITIES_AMCTC
    readgamevar SUPPLY_LEVEL
	add SUPPLY_LEVEL 1
    ife FACILITIES_OWNED[0] 2 add SUPPLY_LEVEL 1 // Euro factory 1?
    ife FACILITIES_OWNED[1] 2 add SUPPLY_LEVEL 1 // Africa factory 1?
    ife FACILITIES_OWNED[2] 2 add SUPPLY_LEVEL 2 // Brazil factory 1?
    ife FACILITIES_OWNED[3] 2 add SUPPLY_LEVEL 4 // Lunar factory 1?
    ife FACILITIES_OWNED[7] 2 add SUPPLY_LEVEL 4 // Io factory 1?
    ife FACILITIES_OWNED[8] 2 add SUPPLY_LEVEL 3 // Ganymede factory 1?
	ife FACILITIES_OWNED[13] 2 add SUPPLY_LEVEL 4 // Umbriel factory?
    set max_supply_level 100
    ife FACILITIES_OWNED[4] 2 add max_supply_level 100 // China Warehouse?
    ifg SUPPLY_LEVEL max_supply_level set SUPPLY_LEVEL max_supply_level
    savegamevar SUPPLY_LEVEL
ends

defstate fatigue_system
ifg SKILL_LEVEL 1
 ifn CHAR -1
    {
	ifn CHAR 11 // Maarten can't be fatigued
		{
		getp[].player_par temp8
		ife MEAL_BUFF[CHAR] 6 divvar temp8 20
		else divvar temp8 10
		set temp9 pmax_health
		sub temp9 PHEALTH // how hurt is the player?
		ifn temp9 0 mulvar temp9 10
		add temp8 temp9
		readarrayfromfile AGENT_FATIGUE F_AGENT_FATIGUE_AMCTC
		set temp7 AGENT_FATIGUE[CHAR]
		add temp7 temp8
		setarray AGENT_FATIGUE[CHAR] temp7
		}
    set temp5 0
    whilevarn temp5 20
        {
        ifvarvarn temp5 CHAR // cycle through the other characters
            {
            set temp4 AGENT_FATIGUE[temp5]
            getp[].player_par temp8
            divvar temp8 8
            sub temp4 temp8 // reduce that agent's fatigue by the rest amount
            clamp temp4 0 15000
            setarray AGENT_FATIGUE[temp5] temp4
            }
        add temp5 1
        }
    writearraytofile AGENT_FATIGUE F_AGENT_FATIGUE_AMCTC
    }
ifn CHAR -1 setarray MEAL_BUFF[CHAR] 0
writearraytofile MEAL_BUFF F_MEAL_AMCTC
ends

var log_kills 0 1
var log_loadout 0 1
var log_treasure 0 1
var log_budgetinc 0 1

var airdrop_available 0 0
var airdrop_cooldown 0 1

defstate budget_system
ife cheated 0
    {
    state supply_system
    readgamevar AMC_BUDGET
    al AMC_BUDGET
    ifl AMC_BUDGET 0 set AMC_BUDGET 0
    add AMC_BUDGET 1 // gives 1k initially
    ifg TREASURE_FOUND 0 add AMC_BUDGET TREASURE_FOUND // add treasure
    getp[].actors_killed log_kills
    divvar log_kills 10 // gives 1k extra for every 10 enemies killed
    ifl log_kills 1 set log_kills 1 // gives a minimum of 1
    add AMC_BUDGET log_kills
    set AMC_BUDGET_INCREASE log_kills // budget increase reports on the bonus screen
    ifg TREASURE_FOUND 0 add AMC_BUDGET_INCREASE TREASURE_FOUND
    set log_treasure TREASURE_FOUND
    add AMC_BUDGET_INCREASE 1 // add the default 1 budget
    set log_loadout LOADOUT_COST
    divvar log_loadout 1000
    ifl log_loadout 0 set log_loadout 0
    sub AMC_BUDGET log_loadout
    sub AMC_BUDGET_INCREASE log_loadout
	set log_budgetinc AMC_BUDGET_INCREASE
    savegamevar AMC_BUDGET
    al AMC_BUDGET
    }
ends

defstate reset_PDA
    set MISSION_UP 0
    set MISSIONPOS 320
    set MISSIONSCREEN 0
ends


// ==========================================================================================
// Gamevars used for Postdamagesprite (damage modifiers, effects, etc.)
// ==========================================================================================

//TODO: Could reduce variable usage here for the temp variables and NEW_DAMAGE

gamevar EV_TARG_SPRITE 0 0
gamevar EV_NEW_DAMAGE 0 0
gamevar EV_PREVIOUS_TOTAL_DAMAGE 0 2
var EV_ACID_DAMAGE 0 0 // In the damage mod handling, if a target currently is taking acid_damage, any weapon will work against them. Ie. damage mod for recuded damage will be skipped if non-zero

gamevar EV_PROJ_TYPE 0 0
gamevar EV_PID 0 0
gamevar EV_CAN_HEADSHOT 0 0
gamevar EV_temp 0 0
gamevar EV_temp2 0 0
gamevar EV_temp3 0 0
gamevar EV_temp4 0 0

// ==========================================================================================

// ==========================================================================================
// UI VARIABLES
// ==========================================================================================
// Might refactor these into PCINTER at some point
var show_rs_ui 0 1
var show_bst_ui 0 1

// Tabs
var ui_tab 0 1
var ui_tab_query 0 1
var ui_help_tab -1 1 // define which tab is the help tab
var ui_tabrow_x 0 1
var ui_tabrow_y 0 1

// Defs list stuff (research terminal, bestiary)
var ui_query_id 0 1
var ui_item -1 1

var ui_popup_shown 0 0
var click_handled 0 1
var clicked 0 1

// scrollbar stuff
var g_scroll_pos 0 0
var g_scroll_y_pos_end 0 0 // to be defined by caller, is specific to interface
var g_scroll_baryvel 0 0 // scroll bar y velocity per scroll
var g_scroll_hold 0 0

// UI Help
var ui_help_query_id 0 1
var ui_help_id 0 1

// GUN COLOUR CUSTOMISATION

// This controls all gun colouring, just add a new bitfield here to set up a new colour

defstate cus_gun_colour
ifand SPECIALIST_CUSTOM[cosm_col_id] 1 set cosm_col 0
else ifand SPECIALIST_CUSTOM[cosm_col_id] 2 set cosm_col 10
else ifand SPECIALIST_CUSTOM[cosm_col_id] 4 set cosm_col 13
else ifand SPECIALIST_CUSTOM[cosm_col_id] 8 set cosm_col 12
else ifand SPECIALIST_CUSTOM[cosm_col_id] 16 set cosm_col 15
else ifand SPECIALIST_CUSTOM[cosm_col_id] 32 set cosm_col 49
else ifand SPECIALIST_CUSTOM[cosm_col_id] 64 set cosm_col 16
else ifand SPECIALIST_CUSTOM[cosm_col_id] 128 set cosm_col 36
else ifand SPECIALIST_CUSTOM[cosm_col_id] 256 set cosm_col 43
else ifand SPECIALIST_CUSTOM[cosm_col_id] 512 set cosm_col 21
else set cosm_col 11

ifand SPECIALIST_CUSTOM[cosm_col_id] 1 set cosm_col 0
else ifand SPECIALIST_CUSTOM[cosm_col_id] 2 set cosm_col 16
else ifand SPECIALIST_CUSTOM[cosm_col_id] 4 set cosm_col 12
else ifand SPECIALIST_CUSTOM[cosm_col_id] 8 set cosm_col 13
else ifand SPECIALIST_CUSTOM[cosm_col_id] 16 set cosm_col 36
else ifand SPECIALIST_CUSTOM[cosm_col_id] 32 set cosm_col 43
else ifand SPECIALIST_CUSTOM[cosm_col_id] 64 set cosm_col 21
else ifand SPECIALIST_CUSTOM[cosm_col_id] 128 set cosm_col 10
else ifand SPECIALIST_CUSTOM[cosm_col_id] 256 set cosm_col 49
else ifand SPECIALIST_CUSTOM[cosm_col_id] 512 set cosm_col 15
else set cosm_col 11
ends

// this controls the cosmetic option in the loadout menu, add a new bitfield here for every gun colour

defstate customise_gun_colour
	ifand temp4 1 { xorvar temp4 1 orvar temp4 2 }
	else ifand temp4 2 { xorvar temp4 2 orvar temp4 4 }
	else ifand temp4 4 { xorvar temp4 4 orvar temp4 8 }
	else ifand temp4 8 { xorvar temp4 8 orvar temp4 16 }
	else ifand temp4 16 { xorvar temp4 16 orvar temp4 32 }
	else ifand temp4 32 { xorvar temp4 32 orvar temp4 64 }
	else ifand temp4 64 { xorvar temp4 64 orvar temp4 128 }
	else ifand temp4 128 { xorvar temp4 128 orvar temp4 256 }
	else ifand temp4 256 { xorvar temp4 256 orvar temp4 512 }
	else ifand temp4 512 xorvar temp4 512
	else orvar temp4 1
ends

defstate loadout_gun_col
			gametextz 2822 190 135 2190 0 1 0 0 0 xdim ydim 32768

			state cus_gun_colour
			set disp_temp5 cosm_col
			rotatesprite gui_pos_x2 gui_pos_y2 32768 0 3595 0 disp_temp5 0 0 0 xdim ydim

			ifl gui_pos_x_temp2 15
			 ifg gui_pos_x_temp2 -15
			  ifl gui_pos_y_temp2 8
			   ifg gui_pos_y_temp2 -8
					{
					set mouse_hint 3096 // refers to quote in user.con
					sub mouse_hint_timer 2
					ifand BITS_PRESS 4
					 ifcount 13
						{
						sound 925
						set temp4 SPECIALIST_CUSTOM[cosm_col_id]
						state customise_gun_colour
						setarray SPECIALIST_CUSTOM[cosm_col_id] temp4
						resetcount
						}
					}
ends


var tweap_init 0 2
var tweap_index -1 2
var tweap_picnum -1 2
var tweap_pickup_amount -1 2
var tweap_max_amount -1 2
var tweap_do_self_swap -1 2
var tweap_no_disp_ammo -1 2

// Variables used for the targeting system by Sangman. ==================================================================================================================================================================

// The array is a flat list of actor sprites that have any faction assigned.
// Actors will loop this list and target the closest actor that has a different faction than them (weight stuff permitting)
// Allies are specifically checked last, otherwise too much bias towards attacking the player which ruins infighting appearance
// -2 => no more actors, stop checking list
// -1 => contained an actor, but died/was removed, available space
// 0 and above => spritenum of actor
array targets 16384
var targets_range 16384 4096 // 4096 = readonly flag, will probably never be higher than 16384 but you never know. Just keep it equal to array length above at all times

var indexes_initialized -1 0
var targets_next_index 0 0
var zsight_correction 8192 2
var targets_iterator 0 2 // used as counter in for loops

var weight_increase -1 2 // actor defines what weight it adds
var current_weight -1 2 // current assigned weight
var max_weight -1 2 // max weight
var angle_variance 0 2 // movement angle variance

var targets_my_index -1 2 // my index in the targets array, used for cleanup after death/removal
var my_target -1 2
var my_previous_target -1 2
var seek_previous_target 0 2

var target_last_x -1 2
var target_last_y -1 2
var target_last_z -1 2 // for flying enemies might be relevant I guess?

var accuracy_penalty -1 2 // set to 1 to introduce an accuracy penalty based on skill level

var friendlyfire -1 2 // "validateshoot" state will set this to 1 if there is a friendly actor in the way of the target
var wallinbetween -1 2 // "validateshoot" state will set this to 1 if there is a wall (probably a masked wall) in between

// for large scale fights
var squad_leader -1 2
var squad_id -1 2
var next_squad_id 1 0

// These fakes mimic the way fta and ftq work, but they won't display a quote on the screen in a normal sense but using gametextz
// This causes the text to appear in front of helmet huds
var fake_fta -1 1
var fake_ftq -1 1
