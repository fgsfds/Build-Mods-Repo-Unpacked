
// the player actor and other
// closely related code

defstate setplasmagun

	set WEAPON9_SHOOTS PLAYERPLASMA
	set WEAPON9_FIRESOUND TERMLASER
	set WEAPON9_INITIALSOUND -1
	set WEAPON9_SHOTSPERBURST 0
	set WEAPON9_TOTALTIME 4
	set WEAPON9_FIREDELAY 2
	set WEAPON9_FLAGS 0
	set WEAPON9_FLASHCOLOR 16711780
	set WEAPON9_SELECTSOUND SELECT9
	
ends

defstate switchrailgun
	
	ifvarand gotrailgun 2 // just put railgun in top position
	{
		set WEAPON7_FIREDELAY 2
		set WEAPON7_TOTALTIME 18
		set WEAPON7_HOLDDELAY 3
		set WEAPON7_FLAGS 0
		set WEAPON7_SHOOTS RAILPROJ
		set WEAPON7_FIRESOUND RIFLEFIRE
		set WEAPON7_SHOTSPERBURST 0
		set WEAPON7_INITIALSOUND RIFLEREADY
		set WEAPON7_SELECTSOUND RIFLEREADY
		set WEAPON7_SPAWN 0
		set WEAPON7_SOUND2SOUND 0
		
		ife pchar 4 // Deanova
		{
			set WEAPON7_INITIALSOUND DISINCHARGE
			set WEAPON7_FIREDELAY 13
			set WEAPON7_TOTALTIME 24
			set WEAPON7_SHOOTS DISINBEAM
			set WEAPON7_FIRESOUND DISINTEGRATOR
			break
		}
		ife pchar 3 // disintegrator
		{
			set WEAPON7_INITIALSOUND DISINCHARGE
			set WEAPON7_FIREDELAY 13
			set WEAPON7_TOTALTIME 24
			set WEAPON7_SHOOTS DISINBEAM
			set WEAPON7_FIRESOUND DISINTEGRATOR
			break
		}
		
		set temp NO
		ife pchar 0 ifvarand dukeupgrades[DEVISTATOR_WEAPON] 4 set temp YES
		ife pchar 1 ifvarand shellyupgrades[DEVISTATOR_WEAPON] 4 set temp YES
		ife pchar 2 ifvarand wesupgrades[DEVISTATOR_WEAPON] 4 set temp YES
		ife temp YES
		{
			set WEAPON7_SPAWN SHELL
			set WEAPON7_SPAWNTIME 4
			set WEAPON7_FIRESOUND BARRETFIRE
			set WEAPON7_TOTALTIME 30
			set WEAPON7_SOUND2SOUND BARRETBOLT
			set WEAPON7_SOUND2TIME 12
			set WEAPON7_SHOOTS BARRETPROJ
			set WEAPON7_FLAGS 16384
			set WEAPON7_INITIALSOUND SELBARRET
			set WEAPON7_SELECTSOUND SELBARRET
		}
	}
	else // just put railgun in bottom position
	{
		set WEAPON7_FIREDELAY 3
		set WEAPON7_TOTALTIME 6
		set WEAPON7_HOLDDELAY 5
		set WEAPON7_FLAGS 72
		set WEAPON7_SHOOTS RPG
		set WEAPON7_FIRESOUND DUKEDEV
		ifvarand dukeupgrades[DEVISTATOR_WEAPON] 2 set WEAPON7_SHOTSPERBURST 4 else
		set WEAPON7_SHOTSPERBURST 2
		set WEAPON7_INITIALSOUND -1 // CAT_FIRE
		set WEAPON7_SELECTSOUND SELECT7
		set WEAPON7_SOUND2SOUND 0
		ife pchar 1
		{
			set WEAPON7_FIRESOUND GRENADE_SHOOT
			set WEAPON7_INITIALSOUND -1
			ifvarand shellyupgrades[DEVISTATOR_WEAPON] 2 set WEAPON7_SHOTSPERBURST 2 else
			set WEAPON7_SHOTSPERBURST 0
			set WEAPON7_SHOOTS GRENADEPROJ
			set WEAPON7_TOTALTIME 12
			set WEAPON7_FLAGS 0
			
			ifvarand shellyupgrades[DEVISTATOR_WEAPON] 1
			{
				set WEAPON7_SHOOTS STICKYPROJ
				set WEAPON7_SHOTSPERBURST 3
				set WEAPON7_FLAGS 72
			}
		}
		else
		ife pchar 2
		{
			set WEAPON7_FIRESOUND NEWSHOTFIRE
			set WEAPON7_INITIALSOUND -1
			
			ifvarand wesupgrades[DEVISTATOR_WEAPON] 2 set WEAPON7_SHOTSPERBURST 10 else
			set WEAPON7_SHOTSPERBURST 5
			set WEAPON7_SHOOTS EXPBULLET
			set WEAPON7_TOTALTIME 6
			set WEAPON7_FLAGS 0
		}
		else
		ife pchar 3
		{
			set WEAPON7_FIRESOUND BIGBLASTER
			set WEAPON7_INITIALSOUND -1
			set WEAPON7_SHOTSPERBURST 2
			set WEAPON7_SHOOTS BLASTBALL
			set WEAPON7_TOTALTIME 6
			set WEAPON7_FLAGS 65552
		}
		else ife pchar 4
		{
			set WEAPON7_FIRESOUND BIGBLASTER
			set WEAPON7_INITIALSOUND -1
			set WEAPON7_SHOTSPERBURST 2
			set WEAPON7_SHOOTS BLASTBALL
			set WEAPON7_TOTALTIME 6
			set WEAPON7_FLAGS 65552
		}
	}
ends

defstate shellyweapons


	set WEAPON1_FLAGS 32768
	set WEAPON1_RELOAD 34
	set WEAPON1_TOTALTIME 9
	set WEAPON1_SHOOTS DEAGLEBULLET
	set WEAPON1_SPAWN SHELL
	set WEAPON1_FIRESOUND DEAGLE_FIRE
	set WEAPON1_RELOADSOUND1 DEAGLE_CLIPOUT
	set WEAPON1_RELOADSOUND2 DEAGLE_CLIPIN
	ife LASERMODE 3 set WEAPON1_SELECTSOUND SELECT7 else
	ife LASERMODE YES set WEAPON1_SELECTSOUND SWITCHTOLASER else
	set WEAPON1_SELECTSOUND DEAGLE_SLIDE
	set WEAPON1_SHOTSPERBURST 0
	set WEAPON1_CLIP 999
	set PISTOLCLIP 12
	
	// ifvarand shellyupgrades[KNEE_WEAPON] 1 // deflect bullets
	// {
		// setarray weap_owned[294] YES
		// setarray weap_owned[194] YES
		// setarray weap_owned[94] YES
		// set tempb dukeupgrades[KNEE_WEAPON]
		// orvar tempb 1
		// setarray dukeupgrades[KNEE_WEAPON] tempb
		// set tempb wesupgrades[KNEE_WEAPON]
		// orvar tempb 1
		// setarray wesupgrades[KNEE_WEAPON] tempb
		
	// }
	
	ifvarand shellyupgrades[PISTOL_WEAPON] 16 // alien pistol upgrade
	{
		setarray weap_owned[5] YES
		set tempb dukeupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray dukeupgrades[PISTOL_WEAPON] tempb
		set tempb wesupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray wesupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[105] YES
		setarray weap_owned[205] YES
	}
	
	ifvarand shellyupgrades[PISTOL_WEAPON] 32 // +max ammo
	{
		setarray weap_owned[6] YES
		set tempb dukeupgrades[PISTOL_WEAPON]
		orvar tempb 32
		setarray dukeupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[106] YES
		
		set tempb wesupgrades[PISTOL_WEAPON]
		orvar tempb 32
		setarray wesupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[206] YES
		smaxammo PISTOL_WEAPON 400
	}
	
	
	ifvarand shellyupgrades[PISTOL_WEAPON] 8 // glock18
	{
		setarray weap_owned[101] YES
		set WEAPON1_SHOOTS SHOTSPARK1
		set PISTOLCLIP 33
		set WEAPON1_RELOAD 30
		set WEAPON1_FIRESOUND GLOCKFIRE
		set WEAPON1_FLAGS 98380
		
		ifvarand shellyupgrades[PISTOL_WEAPON] 4 // dual
		{
			setarray weap_owned[103] YES
			set WEAPON1_RELOAD 56
			set WEAPON1_SHOTSPERBURST 2
			set WEAPON1_TOTALTIME 6 
			orvar WEAPON1_FLAGS 64
			set PISTOLCLIP 40
		}
		else
		set WEAPON1_TOTALTIME 4
		
		set WEAPON1_RELOADSOUND1 GLOCKMAGOUT
		set WEAPON1_RELOADSOUND2 GLOCKMAGIN
		set WEAPON1_SELECTSOUND GLOCKMAGIN
	}
	else
	ifvarand shellyupgrades[PISTOL_WEAPON] 4
	{
		setarray weap_owned[103] YES
		set WEAPON1_RELOAD 58
	}
	ifvarand shellyupgrades[PISTOL_WEAPON] 1
		setarray weap_owned[102] YES
	set WEAPON2_INITIALSOUND 0
	set WEAPON2_RELOAD 12
	set WEAPON2_FIREDELAY 3
	set WEAPON2_TOTALTIME 24
	set WEAPON2_CLIP 0
	set WEAPON2_SHOOTS SHOTSPARK1
	set WEAPON2_SHOTSPERBURST 7
	set WEAPON2_SOUND2SOUND FASTCOCK
	set WEAPON2_SOUND2TIME 12
	set WEAPON2_SPAWNTIME 18
	set WEAPON2_FLAGS 1024
	set WEAPON2_SPAWN SHOTGUNSHELL
	set WEAPON2_FIRESOUND T2SHOTTY // SHOTGUN_FIRE
	set WEAPON2_SELECTSOUND FASTCOCK
	
	ifvarand shellyupgrades[SHOTGUN_WEAPON] 1 // explosive rounds
	{
		setarray weap_owned[111] YES
		setarray weap_owned[11] YES
		set tempb dukeupgrades[SHOTGUN_WEAPON]
		orvar tempb 1
		setarray dukeupgrades[SHOTGUN_WEAPON] tempb
	}
		
	ifvarand shellyupgrades[SHOTGUN_WEAPON] 4 // has bow
	ifvarand gotbow 2
	{
		setarray weap_owned[114] YES
		set WEAPON2_FIREDELAY 16
		set WEAPON2_FLAGS 256
		set WEAPON2_SHOOTS ARROWPROJ
		ife arrowtype 3 set WEAPON2_SHOTSPERBURST 3 else
		set WEAPON2_SHOTSPERBURST 1
		set WEAPON2_TOTALTIME 20
		set WEAPON2_RELOAD 0
		set WEAPON2_SPAWN 0
		set WEAPON2_SOUND2SOUND -1
		set WEAPON2_SOUND2TIME 0
		set WEAPON2_FIRESOUND -1
		set WEAPON2_SELECTSOUND SELECTBOW
	}
	else
	ifvarand shellyupgrades[SHOTGUN_WEAPON] 128 // semi-auto
	{
		set WEAPON2_TOTALTIME 11
		set WEAPON2_CLIP 999 // 8
		set WEAPON2_RELOAD 40
		
		set WEAPON2_RELOADSOUND1 FASTCOCK
		set WEAPON2_RELOADSOUND2 GLOCKMAGIN
		
		set temp wesupgrades[SHOTGUN_WEAPON]
		orvar temp 128
		setarray wesupgrades[SHOTGUN_WEAPON] temp
		setarray weap_owned[112] YES
		setarray weap_owned[212] YES
	}

	ifvarand shellyupgrades[SHOTGUN_WEAPON] 8 // explosive arrows
		setarray weap_owned[115] YES
	ifvarand shellyupgrades[SHOTGUN_WEAPON] 16 // multishot arrows
		setarray weap_owned[116] YES
	ifvarand shellyupgrades[SHOTGUN_WEAPON] 64 // electric arrows
		setarray weap_owned[117] YES
		
	ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 orvar gotshock 1 else
	{
		ifvarand gotshock 2 xorvar gotshock 2
		ifvarand gotshock 1 xorvar gotshock 1
	}
	
	ifvarand shellyupgrades[CHAINGUN_WEAPON] 16 // chain gang
	{
		setarray weap_owned[425] YES
		setarray weap_owned[325] YES
		setarray weap_owned[225] YES
		setarray weap_owned[125] YES
		setarray weap_owned[25] YES
		set tempb dukeupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray dukeupgrades[CHAINGUN_WEAPON] tempb
		set tempb wesupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray wesupgrades[CHAINGUN_WEAPON] tempb
	}
	ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 // EXECUTIONER
	ifvarand gotshock 2
	{
		setarray weap_owned[24] YES
		setarray weap_owned[124] YES
		setarray weap_owned[224] YES
		setarray weap_owned[324] YES
		setarray weap_owned[424] YES
		set WEAPON3_SHOOTS SHOCKBEAM
		set WEAPON3_FIRESOUND LIGHTNINGFIRE
		set WEAPON3_FLAGS 0
		set WEAPON3_TOTALTIME 14
		set WEAPON3_FLASHCOLOR 16744576 
		set WEAPON3_CLIP 0
		set WEAPON3_RELOAD 0
		set WEAPON3_SPAWN 0
		set WEAPON3_SPAWNTIME 0
		set WEAPON3_SELECTSOUND SWITCHTOLASER
	}
	else
	ifvarand shellyupgrades[CHAINGUN_WEAPON] 1
	{
		setarray weap_owned[121] YES
		set WEAPON3_CLIP 30
		set WEAPON3_SHOOTS CHAINGUN
		set WEAPON3_FIRESOUND SHELLYFIRE
		set WEAPON3_RELOAD 60
		set WEAPON3_SELECTSOUND M4READY
		set WEAPON3_SHOTSPERBURST 2
		set WEAPON3_TOTALTIME 12
		set WEAPON3_FLAGS 73812
		set WEAPON3_SPAWN SHELL
		set WEAPON3_SPAWNTIME 1
	}
	else
	{
		set WEAPON3_CLIP 30
		set WEAPON3_SHOOTS SHOTGUN
		set WEAPON3_FIRESOUND SHELLYFIRE
		set WEAPON3_RELOAD 60
		set WEAPON3_SELECTSOUND M4READY
		set WEAPON3_SHOTSPERBURST 0
		set WEAPON3_FLAGS 73812
		set WEAPON3_SPAWN SHELL
		set WEAPON3_SPAWNTIME 1
	}
	ifvarand shellyupgrades[CHAINGUN_WEAPON] 2 // AP
	{
		setarray weap_owned[322] YES
		setarray weap_owned[222] YES
		setarray weap_owned[122] YES
		setarray weap_owned[22] YES
		set tempb mandoupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray mandoupgrades[CHAINGUN_WEAPON] tempb
		set tempb dukeupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[CHAINGUN_WEAPON] tempb
		set tempb wesupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray wesupgrades[CHAINGUN_WEAPON] tempb
	}

	ifvarand shellyupgrades[CHAINGUN_WEAPON] 4 // +max ammo
		smaxammo CHAINGUN_WEAPON 400
	
	set WEAPON4_SHOTSPERBURST 0
	ifvarand shellyupgrades[RPG_WEAPON] 1
		setarray weap_owned[131] YES
	ifvarand shellyupgrades[RPG_WEAPON] 2
	{
		setarray weap_owned[132] YES
		setarray weap_owned[32] YES
		set tempb dukeupgrades[RPG_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[RPG_WEAPON] tempb
	}
	ifvarand shellyupgrades[RPG_WEAPON] 4
	{
		setarray weap_owned[133] YES
		setarray weap_owned[33] YES
		set tempb dukeupgrades[RPG_WEAPON]
		orvar tempb 4
		setarray dukeupgrades[RPG_WEAPON] tempb
	}
	ifvarand WEAPON4_FLAGS 8 xorvar WEAPON4_FLAGS 8
	set WEAPON4_SELECTSOUND RPGLOAD
	set WEAPON4_SHOOTS RPG
	set WEAPON4_SOUND2SOUND 0
	ife nukeselect YES
	{
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 5
	}
	else
	{	
		ifvarand shellyupgrades[RPG_WEAPON] 1 
		{
			set WEAPON4_FIRESOUND ROCKETFIRE2 
			set WEAPON4_TOTALTIME 20
		}
		else
		{
			set WEAPON4_FIRESOUND RPG_SHOOT
			set WEAPON4_TOTALTIME 30
		}
		set WEAPON4_FIREDELAY 4
	}
	
	ifvarand shellyupgrades[HANDBOMB_WEAPON] 1
		setarray weap_owned[141] YES
	set PIPEBOMB_CONTROL 2
	set GRENADE_LIFETIME 60
	set WEAPON5_SELECTSOUND 0
	
	// ifvarand dukeupgrades[SHRINKER_WEAPON] 1
	// {
		// set tempb shellyupgrades[SHRINKER_WEAPON]
		// orvar tempb 1
		// ifvarand dukeupgrades[SHRINKER_WEAPON] 2 { orvar tempb 2 setarray weap_owned[152] YES }
		// setarray shellyupgrades[SHRINKER_WEAPON] tempb
		// setarray mandoupgrades[SHRINKER_WEAPON] tempb
	// }
	
	set WEAPON6_FLASHCOLOR 8454016
	set WEAPON6_SELECTSOUND SWITCHTOLASER
	set WEAPON6_FLAGS 2
	set WEAPON6_INITIALSOUND SHRINKER_FIRE
	smaxammo SHRINKER_WEAPON 50
	// ifvarand shellyupgrades[SHRINKER_WEAPON] 1
	ifvarand dukeupgrades[SHRINKER_WEAPON] 1
	{
		setarray weap_owned[151] YES
		set WEAPON6_SHOOTS BMFGPROJ
		set WEAPON6_FIRESOUND -1
		set WEAPON6_FIREDELAY 30 // 14
		set WEAPON6_TOTALTIME 40 // 24
	}
	else
	{
		set WEAPON6_SHOOTS SHRINKER
		set WEAPON6_FIRESOUND 0
		set WEAPON6_FIREDELAY 10
		set WEAPON6_TOTALTIME 12
	}

	
	state switchrailgun
	
	
	ifvarand shellyupgrades[DEVISTATOR_WEAPON] 1
		setarray weap_owned[161] YES
		
		
	ifvarand shellyupgrades[DEVISTATOR_WEAPON] 2
	{
		setarray weap_owned[62] YES
		setarray weap_owned[162] YES
		setarray weap_owned[262] YES
		set tempb dukeupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[DEVISTATOR_WEAPON] tempb
		set tempb wesupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray wesupgrades[DEVISTATOR_WEAPON] tempb
	}	
		
	ifvarand shellyupgrades[DEVISTATOR_WEAPON] 4
		setarray weap_owned[171] YES
		
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 1
	{
		setarray weap_owned[81] YES
		set WEAPON8_FLAGS 16640
		set WEAPON8_SHOOTS SPIDERMINEFALLING
	}
	else
	{
		setarray weap_owned[80] YES
		set WEAPON8_WORKSLIKE 8
		set WEAPON8_FLAGS 3072
		set WEAPON8_SHOOTS HANDHOLDINGLASER
	}
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
		setarray weap_owned[83] YES
	
	// ifvarand shellyupgrades[TRIPBOMB_WEAPON] 1
	// {
		// setarray weap_owned[181] YES
		// set WEAPON8_FLAGS 16640
		// set WEAPON8_SHOOTS SPIDERMINEFALLING
	// }
	// else
	// {
		// setarray weap_owned[180] YES
		// set WEAPON8_WORKSLIKE 8
		// set WEAPON8_FLAGS 3072
		// set WEAPON8_SHOOTS HANDHOLDINGLASER
	// }
	
	// ifvarand shellyupgrades[TRIPBOMB_WEAPON] 2 // SPIDER MOBILITY
	// {
		// setarray weap_owned[382] YES
		// setarray weap_owned[282] YES
		// setarray weap_owned[182] YES
		// setarray weap_owned[82] YES
		// set tempb dukeupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 2
		// setarray dukeupgrades[TRIPBOMB_WEAPON] tempb
		// set tempb wesupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 2
		// setarray wesupgrades[TRIPBOMB_WEAPON] tempb
	// }
	
	// ifvarand shellyupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
	// {
		// setarray weap_owned[83] YES
		// setarray weap_owned[183] YES
		// set tempb dukeupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 4
		// setarray dukeupgrades[TRIPBOMB_WEAPON] tempb
	// }
	
	ife weap_owned[53] YES setarray weap_owned[153] YES
	ife weap_owned[153] YES
	{
		set tempb shellyupgrades[FREEZE_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[FREEZE_WEAPON] tempb
	}
	
	set WEAPON9_SELECTSOUND SELECT9
	ifvarand gotplasma 2 state setplasmagun
	else
	ifvarand shellyupgrades[FREEZE_WEAPON] 1
	{
		setarray weap_owned[191] YES
		set WEAPON9_SHOOTS FIREBEAM
		set WEAPON9_FIRESOUND -1 // FLAMER_SHOOT
		set WEAPON9_INITIALSOUND -1
		set WEAPON9_SHOTSPERBURST 0
		set WEAPON9_TOTALTIME 5
		set WEAPON9_FIREDELAY 3
		set WEAPON9_FLAGS 65536
		set WEAPON9_FLASHCOLOR 255
	}
	else
	{
		setarray weap_owned[190] YES
		set WEAPON9_SHOOTS FIREBOLT
		set WEAPON9_FIRESOUND FLAMER_SHOOT
		set WEAPON9_INITIALSOUND -1
		set WEAPON9_SHOTSPERBURST 3
		set WEAPON9_TOTALTIME 5
		set WEAPON9_FIREDELAY 3
		set WEAPON9_FLAGS 65536
		set WEAPON9_FLASHCOLOR 16744576
	}

	set WEAPON11_FIREDELAY 3
	set WEAPON11_CLIP 0
	set WEAPON11_SHOOTS GROWSPARK 
	set	WEAPON11_SHOTSPERBURST 0
	set WEAPON11_FIRESOUND BAB_IMPACT 
	set WEAPON11_SELECTSOUND SWITCHTOLASER
	set WEAPON11_FLAGS 2
	set WEAPON11_TOTALTIME 5
	set WEAPON11_FLASHCOLOR 24575 
	smaxammo GROW_WEAPON 99
	
	// ifvarand shellyupgrades[GROW_WEAPON] 1
	// {
		// setarray weap_owned[55] YES
		// setarray weap_owned[155] YES
		// set tempb dukeupgrades[GROW_WEAPON]
		// orvar tempb 1
		// setarray dukeupgrades[GROW_WEAPON] tempb
	// }
	// ifvarand shellyupgrades[GROW_WEAPON] 2
	// {
		// setarray weap_owned[56] YES
		// setarray weap_owned[156] YES
		// set tempb dukeupgrades[GROW_WEAPON]
		// orvar tempb 2
		// setarray dukeupgrades[GROW_WEAPON] tempb
	// }

ends

defstate wesweapons

	set WEAPON1_FLAGS 32768
	set WEAPON1_RELOAD 34
	set WEAPON1_SPAWN -1
	set WEAPON1_TOTALTIME 8
	set WEAPON1_SHOOTS WESBULLET
	set WEAPON1_FIRESOUND REVOLVER_FIRE
	set WEAPON1_RELOADSOUND1 DUMPCYLINDER
	set WEAPON1_RELOADSOUND2 GLOCKMAGIN
	ife LASERMODE 3 set WEAPON1_SELECTSOUND SELECT7 else
	ife LASERMODE YES set WEAPON1_SELECTSOUND SWITCHTOLASER else
	set WEAPON1_SELECTSOUND GLOCKMAGIN
	set WEAPON1_CLIP 999
	set WEAPON1_SHOTSPERBURST 0
	set PISTOLCLIP 8
	ifg THISCLIP PISTOLCLIP set THISCLIP PISTOLCLIP
	

	// ifvarand wesupgrades[KNEE_WEAPON] 1 // deflect bullets
	// {
		// setarray weap_owned[294] YES
		// setarray weap_owned[194] YES
		// setarray weap_owned[94] YES
		// set tempb dukeupgrades[KNEE_WEAPON]
		// orvar tempb 1
		// setarray dukeupgrades[KNEE_WEAPON] tempb
		// set tempb shellyupgrades[KNEE_WEAPON]
		// orvar tempb 1
		// setarray shellyupgrades[KNEE_WEAPON] tempb
	// }
	
	ifvarand wesupgrades[PISTOL_WEAPON] 16 // alien pistol upgrade
	{
		setarray weap_owned[205] YES
		set tempb shellyupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray shellyupgrades[PISTOL_WEAPON] tempb
		set tempb dukeupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray dukeupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[5] YES
		setarray weap_owned[105] YES
	}
	
	ifvarand wesupgrades[PISTOL_WEAPON] 32 // +max ammo
	{
		setarray weap_owned[206] YES
		set tempb dukeupgrades[PISTOL_WEAPON]
		orvar tempb 32
		setarray dukeupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[6] YES
		setarray weap_owned[106] YES
		smaxammo PISTOL_WEAPON 400
	}

	ifvarand wesupgrades[PISTOL_WEAPON] 4 // dual
	{
		setarray weap_owned[203] YES
		set WEAPON1_TOTALTIME 9
	}
	ifvarand wesupgrades[PISTOL_WEAPON] 1 // AP
	setarray weap_owned[202] YES
	
	set WEAPON2_INITIALSOUND 0
	ifvarand wesupgrades[SHOTGUN_WEAPON] 4 // has bow
	ifvarand gotbow 2
	{
		setarray weap_owned[114] YES
		set WEAPON2_FIREDELAY 16
		set WEAPON2_FLAGS 256
		set WEAPON2_SHOOTS ARROWPROJ
		ife arrowtype 3 set WEAPON2_SHOTSPERBURST 3 else
		set WEAPON2_SHOTSPERBURST 1
		set WEAPON2_TOTALTIME 20
		set WEAPON2_RELOAD 0
		set WEAPON2_SPAWN 0
		set WEAPON2_SOUND2SOUND -1
		set WEAPON2_SOUND2TIME 0
		set WEAPON2_FIRESOUND -1
		set WEAPON2_SELECTSOUND SELECTBOW
	}
	else
	{
		set WEAPON2_RELOAD 12
		set WEAPON2_FIREDELAY 3
		set WEAPON2_TOTALTIME 26
		set WEAPON2_CLIP 0
		set WEAPON2_SHOOTS SHOTSPARK1
		set WEAPON2_SHOTSPERBURST 8
		set WEAPON2_SOUND2SOUND NEWSHOTCOCK
		set WEAPON2_SOUND2TIME 12
		set WEAPON2_SPAWNTIME 18
		set WEAPON2_FLAGS 1024
		set WEAPON2_SPAWN SHOTGUNSHELL
		set WEAPON2_FIRESOUND WES_SHOTTY
		set WEAPON2_SELECTSOUND NEWSHOTCOCK
		
		ifvarand wesupgrades[SHOTGUN_WEAPON] 128 // semi-auto
		{
			set WEAPON2_TOTALTIME 11
			set WEAPON2_CLIP 999 // 8
			set WEAPON2_RELOAD 40
			
			set WEAPON2_RELOADSOUND1 FASTCOCK
			set WEAPON2_RELOADSOUND2 GLOCKMAGIN
			
			set tempb shellyupgrades[SHOTGUN_WEAPON]
			orvar tempb 128
			setarray shellyupgrades[SHOTGUN_WEAPON] tempb
			setarray weap_owned[112] YES
			setarray weap_owned[212] YES
		}
	}
	
	
	ifvarand wesupgrades[SHOTGUN_WEAPON] 1 // explosive
	{
		setarray weap_owned[11] YES
		setarray weap_owned[111] YES
		set tempb shellyupgrades[SHOTGUN_WEAPON]
		orvar tempb 1
		setarray shellyupgrades[SHOTGUN_WEAPON] tempb
	}
	
	
	set WEAPON3_SHOTSPERBURST 0
	
	ifvarand wesupgrades[CHAINGUN_WEAPON] 8 orvar gotshock 1 else
	{
		ifvarand gotshock 2 xorvar gotshock 2
		ifvarand gotshock 1 xorvar gotshock 1
	}
	ifvarand wesupgrades[CHAINGUN_WEAPON] 16 // chain gang
	{
		setarray weap_owned[25] YES
		setarray weap_owned[125] YES
		setarray weap_owned[225] YES
		setarray weap_owned[325] YES
		setarray weap_owned[425] YES
		set tempb shellyupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray shellyupgrades[CHAINGUN_WEAPON] tempb
		set tempb dukeupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray dukeupgrades[CHAINGUN_WEAPON] tempb
	}
	ifvarand wesupgrades[CHAINGUN_WEAPON] 8 // EXECUTIONER
	ifvarand gotshock 2
	{
		setarray weap_owned[24] YES
		setarray weap_owned[124] YES
		setarray weap_owned[224] YES
		setarray weap_owned[324] YES
		setarray weap_owned[424] YES
		set WEAPON3_SHOOTS SHOCKBEAM
		set WEAPON3_FIRESOUND LIGHTNINGFIRE
		set WEAPON3_FLAGS 0
		set WEAPON3_TOTALTIME 14
		set WEAPON3_FLASHCOLOR 16744576 
		set WEAPON3_CLIP 0
		set WEAPON3_RELOAD 0
		set WEAPON3_SPAWN 0
		set WEAPON3_SPAWNTIME 0
		set WEAPON3_SELECTSOUND SWITCHTOLASER
		
	}
	else
	{
		
		set WEAPON3_CLIP 32
		set WEAPON3_SHOOTS CHAINGUN
		set WEAPON3_FIRESOUND SHELLYFIRE
		set WEAPON3_RELOAD 45
		set WEAPON3_SELECTSOUND M4READY
		set WEAPON3_SHOTSPERBURST 0
		set WEAPON3_FLAGS 73812
		set WEAPON3_TOTALTIME 12
		set WEAPON3_SPAWN SHELL
		set WEAPON3_SPAWNTIME 1
		ifvarand wesupgrades[CHAINGUN_WEAPON] 1 // dual wielding
		set WEAPON3_SHOTSPERBURST 2
	}
	
	ifvarand wesupgrades[CHAINGUN_WEAPON] 2 // AP rounds
	{
		setarray weap_owned[22] YES
		setarray weap_owned[122] YES
		setarray weap_owned[322] YES
		set tempb mandoupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray mandoupgrades[CHAINGUN_WEAPON] tempb
		set tempb shellyupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[CHAINGUN_WEAPON] tempb
		set tempb dukeupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[CHAINGUN_WEAPON] tempb
		
	}
	
	ifvarand wesupgrades[CHAINGUN_WEAPON] 4 // +max ammo
		smaxammo CHAINGUN_WEAPON 400
	
	ifvarand WEAPON4_FLAGS 8 xorvar WEAPON4_FLAGS 8
	set WEAPON4_SELECTSOUND RPGLOAD
	set WEAPON4_SHOTSPERBURST 0
	set WEAPON4_SHOOTS RPG 
	set WEAPON4_SOUND2SOUND 0
	ife nukeselect YES
	{
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 5
	}
	else
	{
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 50
		set WEAPON4_SOUND2TIME 25
		set WEAPON4_SOUND2SOUND RPGPICK
		set WEAPON4_FIREDELAY 4
	}
	set PIPEBOMB_CONTROL 2
	set GRENADE_LIFETIME 60
	set WEAPON5_SELECTSOUND 0
	
	// ifvarand dukeupgrades[HANDBOMB_WEAPON] 1
	// {
		// set tempb wesupgrades[HANDBOMB_WEAPON]
		// orvar tempb 1
		// setarray wesupgrades[HANDBOMB_WEAPON] tempb
	// }
	// ifvarand dukeupgrades[HANDBOMB_WEAPON] 2
	// {
		// set tempb wesupgrades[HANDBOMB_WEAPON]
		// orvar tempb 2
		// setarray wesupgrades[HANDBOMB_WEAPON] tempb
	// }
	ifvarand wesupgrades[HANDBOMB_WEAPON] 1
		setarray weap_owned[241] YES
		
	ifvarand wesupgrades[HANDBOMB_WEAPON] 2
		setarray weap_owned[242] YES
		
	set WEAPON6_INITIALSOUND 0
	set WEAPON6_FIREDELAY 2
	set WEAPON6_SHOOTS BLOODBULLET 
	set WEAPON6_FIRESOUND RPG_SPLIT 
	set WEAPON6_SELECTSOUND GLOCKMAGIN
	set WEAPON6_CLIP 99999
	set WEAPON6_RELOAD 50
	set WEAPON6_RELOADSOUND1 SKARCLIPOUT
	set WEAPON6_RELOADSOUND2 SKARCLIPIN
	set WEAPON6_FLAGS 16384
	set WEAPON6_TOTALTIME 4
	set WEAPON6_FLASHCOLOR 24575
	smaxammo SHRINKER_WEAPON 200
	
	ifvarand wesupgrades[DEVISTATOR_WEAPON] 1
		setarray weap_owned[61] YES
		
	
		
	ifvarand wesupgrades[DEVISTATOR_WEAPON] 2
	{
		setarray weap_owned[62] YES
		setarray weap_owned[162] YES
		set tempb shellyupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[DEVISTATOR_WEAPON] tempb
		
		set tempb dukeupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[DEVISTATOR_WEAPON] tempb
	}
	
	ifvarand wesupgrades[DEVISTATOR_WEAPON] 4 // barret upgrade
		setarray weap_owned[271] YES
	

	state switchrailgun
	
		
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 1
	{
		setarray weap_owned[81] YES
		set WEAPON8_FLAGS 16640
		set WEAPON8_SHOOTS SPIDERMINEFALLING
	}
	else
	{
		setarray weap_owned[80] YES
		set WEAPON8_WORKSLIKE 8
		set WEAPON8_FLAGS 3072
		set WEAPON8_SHOOTS HANDHOLDINGLASER
	}
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
		setarray weap_owned[83] YES
	
	
	// ifvarand wesupgrades[TRIPBOMB_WEAPON] 1
	// {
		// setarray weap_owned[281] YES
		// set WEAPON8_FLAGS 16640
		// set WEAPON8_SHOOTS SPIDERMINEFALLING
	// }
	// else
	// {
		// setarray weap_owned[280] YES
		// set WEAPON8_WORKSLIKE 8
		// set WEAPON8_FLAGS 3072
		// set WEAPON8_SHOOTS HANDHOLDINGLASER
	// }
	
	// ifvarand wesupgrades[TRIPBOMB_WEAPON] 2 // SPIDER MOBILITY
	// {
		// setarray weap_owned[282] YES
		// setarray weap_owned[182] YES
		// setarray weap_owned[82] YES
		// set tempb shellyupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 2
		// setarray shellyupgrades[TRIPBOMB_WEAPON] tempb
		// set tempb dukeupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 2
		// setarray dukeupgrades[TRIPBOMB_WEAPON] tempb
	// }
		
	// ifvarand dukeupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
	// {
		// setarray weap_owned[83] YES
		// setarray weap_owned[183] YES
		// setarray weap_owned[283] YES
		// set tempb shellyupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 4
		// setarray shellyupgrades[TRIPBOMB_WEAPON] tempb
		// set tempb dukeupgrades[TRIPBOMB_WEAPON]
		// orvar tempb 4
		// setarray dukeupgrades[TRIPBOMB_WEAPON] tempb
	// }
	
	ife weap_owned[153] YES setarray weap_owned[53] YES
	ife weap_owned[53] YES
	{
		set tempb wesupgrades[FREEZE_WEAPON]
		orvar tempb 2
		setarray wesupgrades[FREEZE_WEAPON] tempb
	}
	set WEAPON9_SELECTSOUND SELECT9
	ifvarand gotplasma 2 state setplasmagun
	else
	{
		set WEAPON9_SHOOTS BLADEPROJ
		set WEAPON9_INITIALSOUND -1
		set WEAPON9_FIRESOUND BLADE_FIRE
		set WEAPON9_SHOTSPERBURST 0
		ifvarand wesupgrades[FREEZE_WEAPON] 1 set WEAPON9_TOTALTIME 8
		else
		set WEAPON9_TOTALTIME 12
		set WEAPON9_FIREDELAY 3
		set WEAPON9_FLAGS 256
		set WEAPON9_FLASHCOLOR 0
	}

	set WEAPON11_FIREDELAY 2
	set WEAPON11_SHOOTS WESBULLET
	set	WEAPON11_SHOTSPERBURST 2
	set WEAPON11_FIRESOUND WESKAR_FIRE 
	set WEAPON11_SELECTSOUND GLOCKMAGIN
	set WEAPON11_CLIP 99999
	set WEAPON11_RELOAD 50
	set WEAPON11_RELOADSOUND1 SKARCLIPOUT
	set WEAPON11_RELOADSOUND2 SKARCLIPIN
	ifvarand wesupgrades[GROW_WEAPON] 1
	set WEAPON11_FLAGS 65536 else
	set WEAPON11_FLAGS 16384
	set WEAPON11_TOTALTIME 4
	set WEAPON11_FLASHCOLOR 24575
	smaxammo GROW_WEAPON 200
	
ends

defstate novaweapons

	ife LASERMODE 3 set WEAPON1_SELECTSOUND SELECT7 else
	ife LASERMODE YES set WEAPON1_SELECTSOUND SWITCHTOLASER else
	set WEAPON1_SELECTSOUND RAISEPISTOL

	ifvarand dukeupgrades[PISTOL_WEAPON] 32 // +max ammo
		smaxammo PISTOL_WEAPON 400
	
	set PISTOLCLIP 40
	set WEAPON1_CLIP 0
	set WEAPON1_SHOOTS SHOTSPARK1
	set WEAPON1_FIRESOUND DEA_PISTOL_FIRE
	set WEAPON1_FIREDELAY 3
	set WEAPON1_TOTALTIME 5
	set WEAPON1_SHOTSPERBURST 0
	set WEAPON1_FLAGS 65536
	set WEAPON1_RELOAD 43
	set WEAPON1_SPAWN -1
	set WEAPON1_RELOADSOUND2 -1
	set WEAPON1_RELOADSOUND1 -1
	
	set WEAPON2_RELOADSOUND2 -1
	set WEAPON2_RELOADSOUND1 -1

	ifvarand gotDB 2
	{
		set temp novaupgrades[SHOTGUN_WEAPON]
		orvar temp 16
		setarray novaupgrades[SHOTGUN_WEAPON] temp
		set WEAPON2_RELOAD 0
		set WEAPON2_FIREDELAY 15
		set WEAPON2_HOLDDELAY 0
		set WEAPON2_TOTALTIME 35
		set WEAPON2_CLIP 0
		set WEAPON2_SHOOTS CASTERPROJ
		set WEAPON2_SHOTSPERBURST 0
		set WEAPON2_INITIALSOUND XBOWCHARGE
		set WEAPON2_SOUND2SOUND 0
		set WEAPON2_SOUND2TIME 24
		set WEAPON2_FLAGS 0
		set WEAPON2_SPAWN 0
		set WEAPON2_FIRESOUND XBOWFIRE
		set WEAPON2_SELECTSOUND SELECT7
		set WEAPON2_FLASHCOLOR 16744576
	}
	else
	{
		set WEAPON2_RELOAD 54
		set WEAPON2_FIREDELAY 3
		set WEAPON2_TOTALTIME 15
		set WEAPON2_CLIP 999
		set WEAPON2_SHOOTS NOVAPLASBOLT
		set WEAPON2_SHOTSPERBURST 9
		set WEAPON2_INITIALSOUND 0
		set WEAPON2_SOUND2SOUND -1
		set WEAPON2_FLAGS 0
		set WEAPON2_SPAWN -1
		set WEAPON2_FIRESOUND DEASHOTLEFT
		set WEAPON2_SELECTSOUND SELECT3
		set WEAPON2_FLASHCOLOR 24575
	}

	ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 orvar gotshock 1 else
	{
		ifvarand gotshock 2 xorvar gotshock 2
		ifvarand gotshock 1 xorvar gotshock 1
	}

	ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 // EXECUTIONER
	ifvarand gotshock 2
	{
		setarray weap_owned[24] YES
		setarray weap_owned[124] YES
		setarray weap_owned[224] YES
		setarray weap_owned[324] YES
		setarray weap_owned[424] YES
		set WEAPON3_SHOOTS SHOCKBEAM
		set WEAPON3_FIRESOUND LIGHTNINGFIRE
		set WEAPON3_FLAGS 0
		set WEAPON3_TOTALTIME 14
		set WEAPON3_FLASHCOLOR 16744576 
		set WEAPON3_CLIP 0
		set WEAPON3_RELOAD 0
		set WEAPON3_SPAWN 0
		set WEAPON3_SPAWNTIME 0
		set WEAPON3_SELECTSOUND SWITCHTOLASER
		
	}
	else
	{
		set WEAPON3_SHOTSPERBURST 0
		set WEAPON3_CLIP 0
		set WEAPON3_SHOOTS DEALASER
		set WEAPON3_FIRESOUND MINILASER
		set WEAPON3_SHOTSPERBURST 0
		set WEAPON3_RELOAD 0
		set WEAPON3_SELECTSOUND READYBLASTER
		set WEAPON3_FLAGS 73812
		set WEAPON3_TOTALTIME 12
		set WEAPON3_SPAWN -1 // SHELL
	}
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 4 // +max ammo
		smaxammo CHAINGUN_WEAPON 400
	
	ife nukeselect YES
	{
		set WEAPON4_SHOOTS RPG
		set WEAPON4_SHOTSPERBURST 0
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 5
	}
	else
	{
		set WEAPON4_SHOOTS PLASROCKET
		set WEAPON4_SHOTSPERBURST 4
		set WEAPON4_FIRESOUND D_ROXFIRE
		set WEAPON4_SOUND2SOUND ROTATERPG
		set WEAPON4_SOUND2TIME 13
		orvar WEAPON4_FLAGS 8
		set WEAPON4_TOTALTIME 25
		set WEAPON4_FIREDELAY 4
		set WEAPON4_SELECTSOUND SELECT5
	}
	set PIPEBOMB_CONTROL 0
	set WEAPON5_SELECTSOUND BODYSEARCH

	set WEAPON6_INITIALSOUND -1
	set WEAPON6_FLASHCOLOR 16744576
	set WEAPON6_SELECTSOUND CHRON_RAISE
	set WEAPON6_FLAGS 2
	smaxammo SHRINKER_WEAPON 50
	
	set WEAPON6_SHOOTS TIMEBEAM
	set WEAPON6_FIRESOUND MIA_SHOOT
	set WEAPON6_FIREDELAY 6
	set WEAPON6_TOTALTIME 20
	
	state switchrailgun
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 1
	{
		setarray weap_owned[81] YES
		set WEAPON8_FLAGS 16640
		set WEAPON8_SHOOTS SPIDERMINEFALLING
	}
	else
	{
		setarray weap_owned[80] YES
		set WEAPON8_WORKSLIKE 8
		set WEAPON8_FLAGS 3072
		set WEAPON8_SHOOTS HANDHOLDINGLASER
	}
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
		setarray weap_owned[83] YES
	
	set WEAPON11_FIREDELAY 9
	set WEAPON11_CLIP 0
	set WEAPON11_SHOOTS PLASDISKPROJ 
	set	WEAPON11_SHOTSPERBURST 0
	set WEAPON11_SELECTSOUND DISKRAISE
	set WEAPON11_FIRESOUND DISKSHOOT 
	set WEAPON11_FLAGS 2
	set WEAPON11_TOTALTIME 26
	set WEAPON11_FLASHCOLOR 24575
	smaxammo GROW_WEAPON 99
	
	set WEAPON9_CLIP 0
	set WEAPON9_SHOOTS GOOBULLET
	set WEAPON9_FIRESOUND SHOOTGLOOP
	set WEAPON9_FIREDELAY 3
	set WEAPON9_TOTALTIME 10
	set WEAPON9_SHOTSPERBURST 0
	set WEAPON9_FLAGS 0
	set WEAPON9_RELOAD 42
	set WEAPON9_SPAWN -1
	set WEAPON9_RELOADSOUND2 -1
	set WEAPON9_RELOADSOUND1 CLIPOUT2
	set WEAPON9_INITIALSOUND 0
	
	set WEAPON9_SELECTSOUND W_PICKUP
	ifvarand gotplasma 2 state setplasmagun

ends

defstate mandoweapons

	set WEAPON1_FLAGS 32768
	set WEAPON1_RELOAD 0
	set WEAPON1_SPAWN -1
	ifvarand mandoupgrades[PISTOL_WEAPON] 1 set WEAPON1_TOTALTIME 6 else
	set WEAPON1_TOTALTIME 9
	set WEAPON1_SHOTSPERBURST 0

	ife wristmode 0 { ifg wristammo 0 ifl player[].ammo_amount PISTOL_WEAPON 2 set wristmode 1 } else
	ife wristmode 1 { ife wristammo 0 ifg player[].ammo_amount PISTOL_WEAPON 1 set wristmode 0 }
	
	ife wristmode 0
	{
		set WEAPON1_SHOOTS MANDOLASER
		set WEAPON1_FIRESOUND WRISTSHOT
	}
	else
	ife wristmode 1
	{
		set WEAPON1_SHOOTS FLAMEPROJ2
		set WEAPON1_FIRESOUND NULLSOUND
		setprojectile[FLAMEPROJ2].pal 0
		setprojectile[FLAMEPROJ2].extra 4
	}
	
	ife LASERMODE 3 set WEAPON1_SELECTSOUND SELECT7 else
	ife LASERMODE YES set WEAPON1_SELECTSOUND SWITCHTOLASER else
	set WEAPON1_SELECTSOUND WRISTEQUIP
	set WEAPON1_SHOTSPERBURST 0
	set WEAPON1_CLIP 0
	
	ifvarand mandoupgrades[PISTOL_WEAPON] 16 // alien pistol upgrade
	{
		setarray weap_owned[205] YES
		set tempb shellyupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray shellyupgrades[PISTOL_WEAPON] tempb
		set tempb dukeupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray dukeupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[5] YES
		setarray weap_owned[105] YES
	}
	
	ifvarand mandoupgrades[PISTOL_WEAPON] 32 // +max ammo
	{
		setarray weap_owned[206] YES
		set tempb dukeupgrades[PISTOL_WEAPON]
		orvar tempb 32
		setarray dukeupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[6] YES
		setarray weap_owned[106] YES
		smaxammo PISTOL_WEAPON 400
	}
	set WEAPON2_INITIALSOUND 0
	ifvarand gotDB 2
	{
		setarray weap_owned[114] YES
		set temp mandoupgrades[SHOTGUN_WEAPON]
		orvar temp 4
		setarray mandoupgrades[SHOTGUN_WEAPON] temp
		set WEAPON2_RELOAD 13
		set WEAPON2_FIREDELAY 3
		set WEAPON2_TOTALTIME 28
		set WEAPON2_CLIP 0
		set WEAPON2_SHOOTS CHAINGUN
		set WEAPON2_SHOTSPERBURST 8
		set WEAPON2_SOUND2SOUND DBCLOSE
		set WEAPON2_SOUND2TIME 24
		set WEAPON2_SPAWNTIME 18
		set WEAPON2_FLAGS 1024
		set WEAPON2_SPAWN SHOTGUNSHELL
		set WEAPON2_FIRESOUND M_DBFIRE
		set WEAPON2_SELECTSOUND DBCLOSE
	}
	else
	{
		set WEAPON2_RELOAD 12
		set WEAPON2_FIREDELAY 3
		set WEAPON2_TOTALTIME 26
		set WEAPON2_CLIP 0
		set WEAPON2_SHOOTS PLASPELPROJ
		set WEAPON2_SHOTSPERBURST 14
		set WEAPON2_SOUND2SOUND M_PUMP
		set WEAPON2_SOUND2TIME 12
		set WEAPON2_SPAWNTIME 18
		set WEAPON2_FLAGS 1024
		set WEAPON2_SPAWN SHOTGUNSHELL
		set WEAPON2_FIRESOUND PLASFIRE
		set WEAPON2_SELECTSOUND M_PUMP
	}
	
	set WEAPON3_SHOTSPERBURST 0
	
	ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 orvar gotshock 1 else
	{
		ifvarand gotshock 2 xorvar gotshock 2
		ifvarand gotshock 1 xorvar gotshock 1
	}
	ifvarand mandoupgrades[CHAINGUN_WEAPON] 16 // chain gang
	{
		setarray weap_owned[25] YES
		setarray weap_owned[125] YES
		setarray weap_owned[225] YES
		setarray weap_owned[325] YES
		setarray weap_owned[425] YES
		set tempb wesupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray wesupgrades[CHAINGUN_WEAPON] tempb
		set tempb shellyupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray shellyupgrades[CHAINGUN_WEAPON] tempb
		set tempb dukeupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray dukeupgrades[CHAINGUN_WEAPON] tempb
	}
	ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 // EXECUTIONER
	ifvarand gotshock 2
	{
		setarray weap_owned[24] YES
		setarray weap_owned[124] YES
		setarray weap_owned[224] YES
		setarray weap_owned[324] YES
		setarray weap_owned[424] YES
		set WEAPON3_SHOOTS SHOCKBEAM
		set WEAPON3_FIRESOUND LIGHTNINGFIRE
		set WEAPON3_FLAGS 0
		set WEAPON3_TOTALTIME 14
		set WEAPON3_FLASHCOLOR 16744576 
		set WEAPON3_CLIP 0
		set WEAPON3_RELOAD 0
		set WEAPON3_SPAWN 0
		set WEAPON3_SPAWNTIME 0
		set WEAPON3_SELECTSOUND SWITCHTOLASER
		
	}
	else
	{
		set WEAPON3_CLIP 30
		set WEAPON3_SHOOTS SHOTGUN
		set WEAPON3_FIRESOUND M_AUTOFIRE
		set WEAPON3_RELOAD 60
		set WEAPON3_SELECTSOUND SELECT3
		ifvarand mandoupgrades[CHAINGUN_WEAPON] 1 set WEAPON3_SHOTSPERBURST 2 else
		set WEAPON3_SHOTSPERBURST 0
		set WEAPON3_TOTALTIME 12
		set WEAPON3_FLAGS 73812
		set WEAPON3_SPAWN SHELL
		set WEAPON3_SPAWNTIME 1
		
	}
	
	ifvarand mandoupgrades[CHAINGUN_WEAPON] 2 // AP rounds
	{
		setarray weap_owned[22] YES
		setarray weap_owned[122] YES
		setarray weap_owned[222] YES
		setarray weap_owned[322] YES
		set tempb wesupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray wesupgrades[CHAINGUN_WEAPON] tempb
		set tempb shellyupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[CHAINGUN_WEAPON] tempb
		set tempb dukeupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[CHAINGUN_WEAPON] tempb	
	}
	
	ifvarand mandoupgrades[CHAINGUN_WEAPON] 4 // +max ammo
		smaxammo CHAINGUN_WEAPON 400
	
	ifvarand WEAPON4_FLAGS 8 xorvar WEAPON4_FLAGS 8
	set WEAPON4_SHOTSPERBURST 0
	set WEAPON4_SHOOTS RPG
	set WEAPON4_SOUND2SOUND 0
	ife nukeselect YES
	{
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 5
	}
	else
	{
		set WEAPON4_FIRESOUND M_ROXFIRE
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 4
		set WEAPON4_SELECTSOUND SELECT5
	}
	set PIPEBOMB_CONTROL 2
	set GRENADE_LIFETIME 70
	set WEAPON5_SELECTSOUND WRISTBUTTON
	
	ifvarand dukeupgrades[HANDBOMB_WEAPON] 1
	{
		set tempb wesupgrades[HANDBOMB_WEAPON]
		orvar tempb 1
		setarray wesupgrades[HANDBOMB_WEAPON] tempb
	}
	ifvarand dukeupgrades[HANDBOMB_WEAPON] 2
	{
		set tempb wesupgrades[HANDBOMB_WEAPON]
		orvar tempb 2
		setarray wesupgrades[HANDBOMB_WEAPON] tempb
	}
	ifvarand wesupgrades[HANDBOMB_WEAPON] 1
		setarray weap_owned[241] YES
		
	ifvarand wesupgrades[HANDBOMB_WEAPON] 2
		setarray weap_owned[242] YES
		
	
	set WEAPON6_INITIALSOUND SHRINKER_FIRE
	set WEAPON6_FLASHCOLOR 8454016
	set WEAPON6_SELECTSOUND SWITCHTOLASER
	set WEAPON6_FLAGS 2
	smaxammo SHRINKER_WEAPON 50
	
	ifvarand dukeupgrades[SHRINKER_WEAPON] 1
	{
		setarray weap_owned[51] YES
		set WEAPON6_SHOOTS BMFGPROJ
		set WEAPON6_FIRESOUND -1
		set WEAPON6_FIREDELAY 30 // 14
		set WEAPON6_TOTALTIME 40 // 24
	}
	else
	{
		set WEAPON6_SHOOTS SHRINKER
		set WEAPON6_FIRESOUND 0
		set WEAPON6_FIREDELAY 10
		set WEAPON6_TOTALTIME 12
	}
	
	ifvarand mandoupgrades[DEVISTATOR_WEAPON] 1
		setarray weap_owned[361] YES
		
	ifvarand mandoupgrades[DEVISTATOR_WEAPON] 2
	{
		setarray weap_owned[62] YES
		setarray weap_owned[162] YES
		set tempb shellyupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[DEVISTATOR_WEAPON] tempb
		
		set tempb dukeupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[DEVISTATOR_WEAPON] tempb
	}
	
	ifvarand wesupgrades[DEVISTATOR_WEAPON] 4 // barret upgrade
		setarray weap_owned[271] YES
	

	state switchrailgun
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 1
	{
		setarray weap_owned[81] YES
		set WEAPON8_FLAGS 16640
		set WEAPON8_SHOOTS SPIDERMINEFALLING
	}
	else
	{
		setarray weap_owned[80] YES
		set WEAPON8_WORKSLIKE 8
		set WEAPON8_FLAGS 3072
		set WEAPON8_SHOOTS HANDHOLDINGLASER
	}
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
		setarray weap_owned[83] YES
	
	
	ife weap_owned[153] YES setarray weap_owned[53] YES
	ife weap_owned[53] YES
	{
		set tempb wesupgrades[FREEZE_WEAPON]
		orvar tempb 2
		setarray wesupgrades[FREEZE_WEAPON] tempb
	}
	
	ifvarand gotplasma 2 state setplasmagun
	else
	{
		set WEAPON9_SHOOTS CARBONBEAM
		set WEAPON9_INITIALSOUND DISINCHARGE
		set WEAPON9_SELECTSOUND READYBLASTER
		set WEAPON9_FIRESOUND CARBONFIRE
		set WEAPON9_TOTALTIME 20
		set WEAPON9_FIREDELAY 10
		set WEAPON9_FLAGS 65544
		set WEAPON9_FLASHCOLOR 16744576
	}

	set WEAPON11_FIREDELAY 3
	set WEAPON11_CLIP 0
	set WEAPON11_SHOOTS GROWSPARK 
	set	WEAPON11_SHOTSPERBURST 0
	set WEAPON11_SELECTSOUND SWITCHTOLASER
	set WEAPON11_FIRESOUND BAB_IMPACT 
	set WEAPON11_FLAGS 2
	set WEAPON11_TOTALTIME 5
	set WEAPON11_FLASHCOLOR 24575 
	smaxammo GROW_WEAPON 99
		
ends

defstate dukeweapons

	set WEAPON1_FLAGS 32768
	set WEAPON1_RELOAD 27
	set WEAPON1_TOTALTIME 5
	set WEAPON1_SHOOTS SHOTGUN
	set WEAPON1_SPAWN SHELL
	set WEAPON1_FIRESOUND FIRE1911 // NEW_PISTOL_FIRE
	set WEAPON1_RELOADSOUND1 EJECT_CLIP
	set WEAPON1_RELOADSOUND2 INSERT_CLIP
	ife LASERMODE 3 set WEAPON1_SELECTSOUND SELECT7 else
	ife LASERMODE YES set WEAPON1_SELECTSOUND SWITCHTOLASER else
	set WEAPON1_SELECTSOUND INSERT_CLIP
	set PISTOLCLIP 12
	set WEAPON1_CLIP 999
	set WEAPON1_SHOTSPERBURST 0
	
	// ifvarand dukeupgrades[KNEE_WEAPON] 1 // deflect bullets
	// {
		// setarray weap_owned[294] YES
		// setarray weap_owned[194] YES
		// setarray weap_owned[94] YES
		// set tempb shellyupgrades[KNEE_WEAPON]
		// orvar tempb 1
		// setarray shellyupgrades[KNEE_WEAPON] tempb
		// set tempb wesupgrades[KNEE_WEAPON]
		// orvar tempb 1
		// setarray wesupgrades[KNEE_WEAPON] tempb
	// }
	
	ifvarand dukeupgrades[PISTOL_WEAPON] 16 // alien pistol upgrade
	{
		setarray weap_owned[105] YES
		set tempb shellyupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray shellyupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[5] YES
		set tempb wesupgrades[PISTOL_WEAPON]
		orvar tempb 16
		setarray wesupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[205] YES
	}
	
	ifvarand dukeupgrades[PISTOL_WEAPON] 32 // +max ammo
	{
		setarray weap_owned[106] YES
		set tempb shellyupgrades[PISTOL_WEAPON]
		orvar tempb 32
		setarray shellyupgrades[PISTOL_WEAPON] tempb
		setarray weap_owned[6] YES
		smaxammo PISTOL_WEAPON 400
	}

	ifvarand dukeupgrades[PISTOL_WEAPON] 8 // glock18
	{
		setarray weap_owned[1] YES
		set WEAPON1_SHOOTS SHOTSPARK1
		set PISTOLCLIP 33
		set WEAPON1_RELOAD 30
		set WEAPON1_FIRESOUND GLOCKFIRE
		set WEAPON1_FLAGS 98380
		
		ifvarand dukeupgrades[PISTOL_WEAPON] 4 // dual
		{
			setarray weap_owned[3] YES
			set WEAPON1_RELOAD 56
			set WEAPON1_TOTALTIME 6 // 5
			set WEAPON1_SHOTSPERBURST 2
			orvar WEAPON1_FLAGS 64
			set PISTOLCLIP 40
		}
		else
		set WEAPON1_TOTALTIME 4
		
		set WEAPON1_RELOADSOUND1 GLOCKMAGOUT
		set WEAPON1_RELOADSOUND2 GLOCKMAGIN
		set WEAPON1_SELECTSOUND GLOCKMAGIN
	}
	else
	ifvarand dukeupgrades[PISTOL_WEAPON] 4 // dual
	{
		setarray weap_owned[3] YES
		set WEAPON1_RELOAD 48
		set WEAPON1_TOTALTIME 6
	}
	ifvarand dukeupgrades[PISTOL_WEAPON] 1 // AP
	setarray weap_owned[2] YES
	set WEAPON2_INITIALSOUND 0
	ifvarand dukeupgrades[SHOTGUN_WEAPON] 16 // has DB shotty
	ifvarand gotDB 2
	{
		setarray weap_owned[12] YES
		set WEAPON2_FIREDELAY 4
		set WEAPON2_FLAGS 1024
		set WEAPON2_SHOOTS SHOTGUN
		set WEAPON2_CLIP 0
		set WEAPON2_SHOTSPERBURST 25
		ifvarand dukeupgrades[SHOTGUN_WEAPON] 32
		{	
			set WEAPON2_FIREDELAY 3
			set WEAPON2_TOTALTIME 40 
		}
		else
		set WEAPON2_TOTALTIME 55
		set WEAPON2_RELOAD 0
		set WEAPON2_SPAWN SHOTGUNSHELL
		set WEAPON2_SOUND2SOUND DBOPEN
		set WEAPON2_SOUND2TIME 19
		set WEAPON2_FIRESOUND DBFIRE
		set WEAPON2_SELECTSOUND DBCLOSE
	}
	else
	{
		set WEAPON2_SOUND2TIME 14 // 15
		set WEAPON2_SPAWNTIME 24
		
		set WEAPON2_RELOAD 13
		set WEAPON2_FIREDELAY 4
		set WEAPON2_TOTALTIME 30
		set WEAPON2_CLIP 0
		set WEAPON2_SHOTSPERBURST 7
		set WEAPON2_SHOOTS SHOTGUN
		set WEAPON2_FLAGS 1024
		set WEAPON2_SPAWN SHOTGUNSHELL
		
		ifvarand dukeupgrades[SHOTGUN_WEAPON] 4 // atomic shotty
		{
			setarray weap_owned[14] YES
			set WEAPON2_FIRESOUND NEWSHOTFIRE
			set WEAPON2_SOUND2SOUND NEWSHOTCOCK
			set WEAPON2_SELECTSOUND NEWSHOTCOCK
		}
		else
		{
			set WEAPON2_FIRESOUND SHOTGUN_FIRE
			set WEAPON2_SOUND2SOUND SHOTGUN_COCK
			set WEAPON2_SELECTSOUND SHOTGUN_COCK
		}
	}
	ifvarand dukeupgrades[SHOTGUN_WEAPON] 1 // explosive
	{
		setarray weap_owned[11] YES
		setarray weap_owned[111] YES
		set tempb shellyupgrades[SHOTGUN_WEAPON]
		orvar tempb 1
		setarray shellyupgrades[SHOTGUN_WEAPON] tempb
	}
	ifvarand dukeupgrades[SHOTGUN_WEAPON] 8 // rad shells
		setarray weap_owned[15] YES
	ifvarand dukeupgrades[SHOTGUN_WEAPON] 2 // burstfire
		setarray weap_owned[16] YES
	
	
	set WEAPON3_SHOTSPERBURST 0
	
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 orvar gotshock 1 else
	{
		ifvarand gotshock 2 xorvar gotshock 2
		ifvarand gotshock 1 xorvar gotshock 1
	}
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 16 // chain gang
	{
		setarray weap_owned[25] YES
		setarray weap_owned[125] YES
		setarray weap_owned[225] YES
		setarray weap_owned[325] YES
		setarray weap_owned[425] YES
		set tempb shellyupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray shellyupgrades[CHAINGUN_WEAPON] tempb
		set tempb wesupgrades[CHAINGUN_WEAPON]
		orvar tempb 16
		setarray wesupgrades[CHAINGUN_WEAPON] tempb
	}
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 // EXECUTIONER
	ifvarand gotshock 2
	{
		setarray weap_owned[24] YES
		setarray weap_owned[124] YES
		setarray weap_owned[224] YES
		setarray weap_owned[324] YES
		setarray weap_owned[424] YES
		set WEAPON3_SHOOTS SHOCKBEAM
		set WEAPON3_FIRESOUND LIGHTNINGFIRE
		set WEAPON3_FLAGS 0
		set WEAPON3_TOTALTIME 14
		set WEAPON3_FLASHCOLOR 16744576 
		set WEAPON3_CLIP 0
		set WEAPON3_RELOAD 0
		set WEAPON3_SPAWN 0
		set WEAPON3_SPAWNTIME 0
		set WEAPON3_SELECTSOUND SWITCHTOLASER
		
	}
	else
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 1 // minigun
	{
		setarray weap_owned[21] YES
		set WEAPON3_CLIP 0
		set WEAPON3_SHOOTS CHAINGUN
		set WEAPON3_FIRESOUND MINIFIRE
		set WEAPON3_RELOAD 0
		set WEAPON3_SELECTSOUND SELECT_WEAPON
		set WEAPON3_TOTALTIME 12
		set WEAPON3_FLAGS 73804
		set WEAPON3_SPAWN SHELL
		set WEAPON3_SPAWNTIME 1
	}
	else
	{
		set WEAPON3_CLIP 0
		set WEAPON3_SHOOTS CHAINGUN
		set WEAPON3_FIRESOUND CHAINGUN_FIRE
		set WEAPON3_RELOAD 0
		set WEAPON3_SELECTSOUND SELECT_WEAPON
		set WEAPON3_FLAGS 73812
		set WEAPON3_SPAWN SHELL
		set WEAPON3_SPAWNTIME 1
	}
	
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 2 // AP rounds
	{
		setarray weap_owned[22] YES
		setarray weap_owned[122] YES
		setarray weap_owned[222] YES
		setarray weap_owned[322] YES
		set tempb mandoupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray mandoupgrades[CHAINGUN_WEAPON] tempb
		set tempb shellyupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[CHAINGUN_WEAPON] tempb
		set tempb wesupgrades[CHAINGUN_WEAPON]
		orvar tempb 2
		setarray wesupgrades[CHAINGUN_WEAPON] tempb
	}
	
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 4 // +max ammo
		smaxammo CHAINGUN_WEAPON 400
	
	
		
	ifvarand dukeupgrades[RPG_WEAPON] 1 // SMART RPG
		setarray weap_owned[31] YES
		
	ifvarand dukeupgrades[RPG_WEAPON] 2 // FAST ROCKETS
	{
		setarray weap_owned[132] YES
		setarray weap_owned[32] YES
		set tempb shellyupgrades[RPG_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[RPG_WEAPON] tempb
	}
	ifvarand dukeupgrades[RPG_WEAPON] 4 // MULTI ROCKETS
	{
		setarray weap_owned[133] YES
		setarray weap_owned[33] YES
		set tempb shellyupgrades[RPG_WEAPON]
		orvar tempb 4
		setarray shellyupgrades[RPG_WEAPON] tempb
	}	
	ifvarand WEAPON4_FLAGS 8 xorvar WEAPON4_FLAGS 8
	set WEAPON4_SELECTSOUND RPGLOAD
	set WEAPON4_SHOTSPERBURST 0
	set WEAPON4_SHOOTS RPG
	set WEAPON4_SOUND2SOUND 0

	ife nukeselect YES
	{
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 5
	}
	else
	{
		ifvarand dukeupgrades[RPG_WEAPON] 1 set WEAPON4_FIRESOUND ROCKETFIRE2 else
		set WEAPON4_FIRESOUND RPG_SHOOT
		set WEAPON4_TOTALTIME 20
		set WEAPON4_FIREDELAY 4
	}
	set PIPEBOMB_CONTROL pipemode
	set GRENADE_LIFETIME 60
	set WEAPON5_SELECTSOUND 0
	
	// ifvarand wesupgrades[HANDBOMB_WEAPON] 1
	// {
		// set tempb dukeupgrades[HANDBOMB_WEAPON]
		// orvar tempb 1
		// setarray dukeupgrades[HANDBOMB_WEAPON] tempb
	// }
	// ifvarand wesupgrades[HANDBOMB_WEAPON] 2
	// {
		// set tempb dukeupgrades[HANDBOMB_WEAPON]
		// orvar tempb 2
		// setarray dukeupgrades[HANDBOMB_WEAPON] tempb
	// }
	
	ifvarand dukeupgrades[HANDBOMB_WEAPON] 1
		setarray weap_owned[41] YES
		
	ifvarand dukeupgrades[HANDBOMB_WEAPON] 2
		setarray weap_owned[42] YES
		
	// ifvarand shellyupgrades[SHRINKER_WEAPON] 1
	// {
		// set tempb dukeupgrades[SHRINKER_WEAPON]
		// orvar tempb 1
		// ifvarand shellyupgrades[SHRINKER_WEAPON] 2 { orvar tempb 2 setarray weap_owned[52] 1 }
		// setarray dukeupgrades[SHRINKER_WEAPON] tempb
	// }
	
	set WEAPON6_INITIALSOUND SHRINKER_FIRE
	set WEAPON6_FLASHCOLOR 8454016
	set WEAPON6_SELECTSOUND SWITCHTOLASER
	set WEAPON6_FLAGS 2
	smaxammo SHRINKER_WEAPON 50
	ifvarand dukeupgrades[SHRINKER_WEAPON] 1
	{
		setarray weap_owned[51] YES
		set WEAPON6_SHOOTS BMFGPROJ
		set WEAPON6_FIRESOUND -1
		set WEAPON6_FIREDELAY 30 // 14
		set WEAPON6_TOTALTIME 40 // 24
	}
	else
	{
		set WEAPON6_SHOOTS SHRINKER
		set WEAPON6_FIRESOUND 0
		set WEAPON6_FIREDELAY 10
		set WEAPON6_TOTALTIME 12
	}
	
	ifvarand dukeupgrades[DEVISTATOR_WEAPON] 1
		setarray weap_owned[61] YES
		
	ifvarand dukeupgrades[DEVISTATOR_WEAPON] 2
	{
		setarray weap_owned[62] YES
		setarray weap_owned[162] YES
		setarray weap_owned[262] YES
		set tempb shellyupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray shellyupgrades[DEVISTATOR_WEAPON] tempb
		
		set tempb wesupgrades[DEVISTATOR_WEAPON]
		orvar tempb 2
		setarray wesupgrades[DEVISTATOR_WEAPON] tempb
	}
	
	ifvarand dukeupgrades[DEVISTATOR_WEAPON] 4 // barret upgrade
		setarray weap_owned[71] YES
	
	// ifvarand gotrailgun 2 nullop else
	// {
		// set WEAPON7_FIRESOUND 0
		// set WEAPON7_INITIALSOUND CAT_FIRE
		// set WEAPON7_SHOTSPERBURST 2
		// set WEAPON7_SHOOTS RPG
		// set WEAPON7_TOTALTIME 6
		// set WEAPON7_FLAGS 72
	// }
	
	state switchrailgun
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 1
	{
		setarray weap_owned[81] YES
		set WEAPON8_FLAGS 16640
		set WEAPON8_SHOOTS SPIDERMINEFALLING
	}
	else
	{
		setarray weap_owned[80] YES
		set WEAPON8_WORKSLIKE 8
		set WEAPON8_FLAGS 3072
		set WEAPON8_SHOOTS HANDHOLDINGLASER
	}
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 2 // SPIDER MOBILITY
		setarray weap_owned[82] YES
		
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] 4 // DEATHBEAM
		setarray weap_owned[83] YES
		
	
	
	ife weap_owned[153] YES setarray weap_owned[53] YES
	ife weap_owned[53] YES
	{
		set tempb dukeupgrades[FREEZE_WEAPON]
		orvar tempb 2
		setarray dukeupgrades[FREEZE_WEAPON] tempb
	}
	
	ifvarand gotplasma 2 state setplasmagun
	else
	ifvarand dukeupgrades[FREEZE_WEAPON] 1
	{
		set WEAPON9_SHOOTS ICEBEAM
		set WEAPON9_INITIALSOUND -1 // CAT_FIRE
		set WEAPON9_FIRESOUND FREEZEBOLT_FIRE
		set WEAPON9_TOTALTIME 4 // 5
		set WEAPON9_FIREDELAY 2 // 3
		set WEAPON9_FLAGS 65544
		set WEAPON9_FLASHCOLOR 16744576
	}
	else
	{
		set WEAPON9_SHOOTS FREEZEBLAST
		set WEAPON9_INITIALSOUND CAT_FIRE
		set WEAPON9_FIRESOUND CAT_FIRE
		set WEAPON9_SHOTSPERBURST 0
		set WEAPON9_TOTALTIME 5
		set WEAPON9_FIREDELAY 3
		set WEAPON9_FLAGS 65536
		set WEAPON9_FLASHCOLOR 16744576
	}

	set WEAPON11_FIREDELAY 3
	set WEAPON11_CLIP 0
	set WEAPON11_SHOOTS GROWSPARK 
	set	WEAPON11_SHOTSPERBURST 0
	set WEAPON11_SELECTSOUND SWITCHTOLASER
	set WEAPON11_FIRESOUND BAB_IMPACT 
	set WEAPON11_FLAGS 2
	set WEAPON11_TOTALTIME 5
	set WEAPON11_FLASHCOLOR 24575 
	smaxammo GROW_WEAPON 99
		
	// ifvarand dukeupgrades[GROW_WEAPON] 1
	// {
		// setarray weap_owned[55] YES
		// setarray weap_owned[155] YES
		// set tempb shellyupgrades[GROW_WEAPON]
		// orvar tempb 1
		// setarray shellyupgrades[GROW_WEAPON] tempb
	// }
	// ifvarand dukeupgrades[GROW_WEAPON] 2
	// {
		// setarray weap_owned[56] YES
		// setarray weap_owned[156] YES
		// set tempb shellyupgrades[GROW_WEAPON]
		// orvar tempb 2
		// setarray shellyupgrades[GROW_WEAPON] tempb
	// }
	

ends

defstate switchnuke
	
	ife nukeselect YES
	{
		set WEAPON4_SHOOTS RPG
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 5
		set WEAPON4_SHOTSPERBURST 0
	}
	else
	ife pchar 3
	{
		set WEAPON4_FIRESOUND M_ROXFIRE
		set WEAPON4_TOTALTIME 30
		set WEAPON4_FIREDELAY 4
		set WEAPON4_SELECTSOUND SELECT5
	}
	else
	ife pchar 4
	{
		set WEAPON4_SHOOTS PLASROCKET
		set WEAPON4_SHOTSPERBURST 4
		set WEAPON4_FIRESOUND D_ROXFIRE
		set WEAPON4_SOUND2SOUND ROTATERPG
		set WEAPON4_SOUND2TIME 13
		set WEAPON4_TOTALTIME 25
		set WEAPON4_FIREDELAY 4
		set WEAPON4_SELECTSOUND SELECT5
	}
	else
	ife pchar 2
	{
		set WEAPON4_FIRESOUND RPG_BIGSHOOT
		set WEAPON4_TOTALTIME 50
	}
	else
	ife pchar 1
	{
		ifvarand shellyupgrades[RPG_WEAPON] 1 
		{
			set WEAPON4_FIRESOUND ROCKETFIRE2 
			set WEAPON4_TOTALTIME 20
		}
		else
		{
			set WEAPON4_FIRESOUND RPG_SHOOT
			set WEAPON4_TOTALTIME 30
		}
		set WEAPON4_FIREDELAY 4
	}
	else
	{
		ifvarand dukeupgrades[RPG_WEAPON] 1 set WEAPON4_FIRESOUND ROCKETFIRE2 else
		set WEAPON4_FIRESOUND RPG_SHOOT
		set WEAPON4_TOTALTIME 20
		set WEAPON4_FIREDELAY 4
	}
	
ends

defstate switchplasma

	ifvarand gotplasma 2 // just put plasma in top position
	state setplasmagun
	else // just put plasma in bottom position
	{
		// weapon9 standard settings
		ife pchar 0 state dukeweapons else 
		ife pchar 1 state shellyweapons else
		ife pchar 2 state wesweapons else
		ife pchar 3 state mandoweapons else
		ife pchar 4 state novaweapons
	}

ends

defstate applystartguns

// bitfield
// 1 = pistol
// 2 = shotgun
// 4 = chaingun and executioner
// 8 = RPG
// 16 = pipebombs
// 32 = shrinker or bmfg
// 64 = devastator
// 128 = spider-bombs or tripbombs
// 256 = freezer or incinerator
// 512 = babifier
// 1024 = terminator gun
// 2048 = vorpal blade
// 4096 = chainsaw
// 8192 = alien blaster
// 16384 = railgun or penetrator

ife gametype 0
ifn marathon 2
{
	ifg player[].ammo_amount PISTOL_WEAPON 96 setp[].ammo_amount PISTOL_WEAPON 96
	else
	ifl player[].ammo_amount PISTOL_WEAPON 48 setp[].ammo_amount PISTOL_WEAPON 48
}
else
{
	setp[].gotweapon PISTOL_WEAPON NO
	setp[].ammo_amount PISTOL_WEAPON 0	
	
}
setp[].gotweapon SHOTGUN_WEAPON NO
setp[].ammo_amount SHOTGUN_WEAPON 1
set stakes 0
setp[].gotweapon CHAINGUN_WEAPON NO
setp[].ammo_amount CHAINGUN_WEAPON 0
setarray weap_owned[221] NO // Wes dual uzi
set TMP_A wesupgrades[CHAINGUN_WEAPON]
ifvarand TMP_A 1 xorvar TMP_A 1
setarray wesupgrades[CHAINGUN_WEAPON] TMP_A

setarray weap_owned[203] NO // Wes dual pistol
set TMP_A wesupgrades[PISTOL_WEAPON]
ifvarand TMP_A 4 xorvar TMP_A 4
setarray wesupgrades[PISTOL_WEAPON] TMP_A


setp[].gotweapon RPG_WEAPON NO
setp[].ammo_amount RPG_WEAPON 0
setp[].gotweapon HANDBOMB_WEAPON NO
setp[].ammo_amount HANDBOMB_WEAPON 0
setp[].gotweapon SHRINKER_WEAPON NO
setp[].ammo_amount SHRINKER_WEAPON 0
setp[].gotweapon DEVISTATOR_WEAPON NO
setp[].ammo_amount DEVISTATOR_WEAPON 0
setp[].gotweapon TRIPBOMB_WEAPON NO
setp[].ammo_amount TRIPBOMB_WEAPON 0
setp[].gotweapon FREEZE_WEAPON NO
setp[].ammo_amount FREEZE_WEAPON 0
setp[].gotweapon GROW_WEAPON NO
setp[].ammo_amount GROW_WEAPON 0
set nukeamount 0
set nukeselect NO
set gotplasma NO
set plasmammo 0
state sawoff
set gotsaber 0
set sawammo 0
set LASERAMMO 0
set COMMAMMO 0
set LASERMODE 0
set gotrailgun NO
set railgunammo 0
set dbammo 0
set arrows 0
// set gotDB 0
// set gotbow 0

setp[].curr_weapon KNEE_WEAPON
setp[].weapon_pos -9
setp[].kickback_pic 0

ife VOLUME 6 
{
	ifge LEVEL 29 ifle LEVEL 31 ifl player[].player_par 200 break 
}
// an ancients level, starts without weapons but they are needed for ammo

ifvarand startguns 1
{
	setp[].gotweapon PISTOL_WEAPON YES
	ife gametype 0 set temp 96 else set temp 48
	setp[].ammo_amount PISTOL_WEAPON temp
}
ifvarand startguns 2
{
	setp[].gotweapon SHOTGUN_WEAPON YES
	ife gametype 0 set temp 13 else set temp 7
	setp[].ammo_amount SHOTGUN_WEAPON temp
	set stakes 5
	
	orvar gotbow 1
	orvar gotDB 1
	set arrows 6
	set dbammo 6
}
ifvarand startguns 4
{
	setp[].gotweapon CHAINGUN_WEAPON YES
	ife gametype 0 set temp 100 else set temp 50
	setp[].ammo_amount CHAINGUN_WEAPON temp
}
ifvarand startguns 8
{
	setp[].gotweapon RPG_WEAPON YES
	ife gametype 0 set temp 6 else set temp 3
	setp[].ammo_amount RPG_WEAPON temp
}
ifvarand startguns 16
{
	setp[].gotweapon HANDBOMB_WEAPON YES
	ife gametype 0 set temp 6 else set temp 3
	setp[].ammo_amount HANDBOMB_WEAPON temp
}
ifvarand startguns 32
{
	setp[].gotweapon SHRINKER_WEAPON YES
	ife gametype 0 set temp 12 else set temp 6
	setp[].ammo_amount SHRINKER_WEAPON temp
}
ifvarand startguns 64
{
	setp[].gotweapon DEVISTATOR_WEAPON YES
	ife gametype 0 set temp 36 else set temp 18
	setp[].ammo_amount DEVISTATOR_WEAPON temp
}
ifvarand startguns 128
{
	setp[].gotweapon TRIPBOMB_WEAPON YES
	ife gametype 0 set temp 6 else set temp 3
	setp[].ammo_amount TRIPBOMB_WEAPON temp
}
ifvarand startguns 256
{
	setp[].gotweapon FREEZE_WEAPON YES
	ife gametype 0 set temp 40 else set temp 20
	setp[].ammo_amount FREEZE_WEAPON temp
}
ifvarand startguns 512
{
	setp[].gotweapon GROW_WEAPON YES
	ife gametype 0 set temp 48 else set temp 24
	setp[].ammo_amount GROW_WEAPON temp
}
ifvarand startguns 1024 // TERMINATOR GUN
{
	setp[].gotweapon FREEZE_WEAPON YES
	set gotplasma 3
	// ife gametype 0 set plasmammo 40 else set plasmammo 20
	ife gametype 0 setp[].ammo_amount FREEZE_WEAPON 40 else setp[].ammo_amount FREEZE_WEAPON 20
	
}
ifvarand startguns 2048 // VORPAL BLADE
{
	state sawoff
	ife startguns 2048 set gotsaber 99
	else set gotsaber 30
	set sawammo 0
}
ifvarand startguns 4096 // CHAINSAW
ifn pchar 2
ifn pchar 4
{
	state sawon
	set sawammo 300
	set gotsaber 0
}
ifvarand startguns 8192 // ALIEN PISTOL
{
	set LASERAMMO 20
	setp[].gotweapon PISTOL_WEAPON YES
	set LASERMODE 0
}
ifvarand startguns 16384 // RAILGUN
{
	setp[].gotweapon DEVISTATOR_WEAPON YES
	set gotrailgun 3
	// ife gametype 0 set railgunammo 16 else set railgunammo 8
	ife gametype 0 setp[].ammo_amount DEVISTATOR_WEAPON 24 else setp[].ammo_amount DEVISTATOR_WEAPON 12
}
ifvarand startguns 32768 // BOW AND DB SHOTGUN
{
	setp[].gotweapon SHOTGUN_WEAPON YES
	orvar gotbow 1
	orvar gotDB 1
	set arrows 24
	set dbammo 24
}
// set player to the appropriate weapon

ifvarand startguns 1 setp[].curr_weapon PISTOL_WEAPON else
ifvarand startguns 8192 { setp[].curr_weapon PISTOL_WEAPON set LASERMODE -1 } else
ifvarand startguns 2 setp[].curr_weapon SHOTGUN_WEAPON else
ifvarand startguns 32768 setp[].curr_weapon SHOTGUN_WEAPON else
ifvarand startguns 4 setp[].curr_weapon CHAINGUN_WEAPON else
ifvarand startguns 8 setp[].curr_weapon RPG_WEAPON else
ifvarand startguns 16 setp[].curr_weapon HANDBOMB_WEAPON else
ifvarand startguns 32 setp[].curr_weapon SHRINKER_WEAPON else
ifvarand startguns 512 setp[].curr_weapon GROW_WEAPON else
ifvarand startguns 64 setp[].curr_weapon DEVISTATOR_WEAPON else
ifvarand startguns 16384 setp[].curr_weapon DEVISTATOR_WEAPON else
ifvarand startguns 256 setp[].curr_weapon FREEZE_WEAPON else
ifvarand startguns 1024 setp[].curr_weapon FREEZE_WEAPON else
ifvarand startguns 2048 setp[].curr_weapon KNEE_WEAPON else
ifvarand startguns 4096 setp[].curr_weapon KNEE_WEAPON else
ifvarand startguns 128 setp[].curr_weapon TRIPBOMB_WEAPON

ifvarand startguns 32768
ife player[].curr_weapon SHOTGUN_WEAPON
ifle player[].ammo_amount SHOTGUN_WEAPON 1
{
	ife pchar 1
	orvar gotbow 2
	else
	ife pchar 2
	orvar gotbow 2
	else orvar gotDB 2
}

ife pchar 0 state dukeweapons else
ife pchar 1 state shellyweapons else
ife pchar 2 state wesweapons else
ife pchar 3 state mandoweapons else
ife pchar 4 state novaweapons

set wristammo player[].ammo_amount PISTOL_WEAPON

ends

state pbodyreset
	
	ifaction PLYINGDEAD
        spawn DUKELYINGDEAD
	ifaction APSHELLYLYINGDEAD
        spawn DUKELYINGDEAD
	ifaction APWESLYINGDEAD	
		spawn DUKELYINGDEAD

	ife pchar 4 action APDEASTAND else
	ife pchar 3 action APMANSTAND else
	ife pchar 2 action APWESSTAND else
	ife pchar 1 action APSHELLYSTAND else
	ifvarand altcostume 2 action ALTDUKESTAND else
	action PSTAND
	set PSHRINKING 0
	// set startmode -1
	setarray visited[LEVEL] 0
	set gotsaw NO set sawammo 0 state sawoff
	set onturret -1
	set zombieonplayer -1
	set shellyhp healthbuff
	
ends

defstate clearpweapons

	setp[].gotweapon PISTOL_WEAPON YES
	setp[].ammo_amount PISTOL_WEAPON 48
	setp[].gotweapon SHOTGUN_WEAPON NO
	setp[].ammo_amount SHOTGUN_WEAPON 1
	set stakes 0
	setp[].gotweapon CHAINGUN_WEAPON NO
	setp[].ammo_amount CHAINGUN_WEAPON 0
	setarray weap_owned[221] NO // Wes dual uzi
	set TMP_A wesupgrades[CHAINGUN_WEAPON]
	ifvarand TMP_A 1 xorvar TMP_A 1
	setarray wesupgrades[CHAINGUN_WEAPON] TMP_A
	
	set TMP_A wesupgrades[PISTOL_WEAPON]
	ifvarand TMP_A 4 { xorvar TMP_A 4 setarray weap_owned[203] NO }
	setarray wesupgrades[PISTOL_WEAPON] TMP_A
	
	setp[].gotweapon RPG_WEAPON NO
	setp[].ammo_amount RPG_WEAPON 0
	setp[].gotweapon HANDBOMB_WEAPON NO
	setp[].ammo_amount HANDBOMB_WEAPON 0
	setp[].gotweapon SHRINKER_WEAPON NO
	setp[].ammo_amount SHRINKER_WEAPON 0
	setp[].gotweapon DEVISTATOR_WEAPON NO
	setp[].ammo_amount DEVISTATOR_WEAPON 0
	setp[].gotweapon TRIPBOMB_WEAPON NO
	setp[].ammo_amount TRIPBOMB_WEAPON 0
	setp[].gotweapon FREEZE_WEAPON NO
	setp[].ammo_amount FREEZE_WEAPON 0
	setp[].gotweapon GROW_WEAPON NO
	setp[].ammo_amount GROW_WEAPON 0
	set nukeamount 0
	set nukeselect NO
	set gotplasma NO
	set plasmammo 0
	state sawoff
	set gotsaber 0
	set sawammo 0
	set LASERAMMO 0
	set COMMAMMO 0
	set LASERMODE 0
	set gotrailgun NO
	set railgunammo 0

	ife pchar 0 state dukeweapons else
	ife pchar 1 state shellyweapons else 
	ife pchar 2 state wesweapons else
	ife pchar 3 state mandoweapons else
	ife pchar 4 state novaweapons

ends

defstate resetplayeramounts

	set cmode 0
	set THISCLIP PISTOLCLIP
	set m4clip 30
	set uziclip 32
	set skarclip 20
	set skarclipB 10
	set spasclip 8
	set novamag 9
	set o2damage 0
	set myshelly -1
	set shellyinmap 0
	set shellyhp healthbuff
	set cutcam -1
	set cutcamtarget -1
	set emp_overlay 0
	set cutcamtime 0
	set cutcamsound 0
	set cutcamchannel 0
	set deathcounter 450
	set blockang 6666
	set saberpos 0
	set pinwater 0
	
	ife pchar 0 state dukeweapons 
	else ife pchar 1  state shellyweapons 
	else ife pchar 2 state wesweapons
	else ife pchar 3 state mandoweapons
	else ife pchar 4 state novaweapons

	ifn pchar 2 ifn pchar 4 ife gotsaw YES ifg sawammo 0 state sawon
	else state sawoff
	
	// max health failsafe check
	setp[].max_player_health healthbuff

ends

defstate spreset
	ifn vrtrip 0
	{
		set vrscreen_time 32
		set vrscreen VR1
		set vrkilled vrtrip
	}
	else
	{
		ife gametype 0 { set credits 0 set lastcredits 0 set gameover YES }
		setp[].dead_flag -1
		set redscore 1000 set bluescore 0
		strength -1
		resetplayer
	}
ends

state survivalreset

	ife gametype SURVIVAL set survivor_winner NO
	ifn player[].timebeforeexit 0 break
	
	ifn vrtrip 0
	{
		set vrscreen_time 32
		set vrscreen VR1
		set vrkilled vrtrip
		break
	}
	
	set temp lastclock
	add temp 480
	ifg totalclock temp
	{
		setp[].dead_flag 0
		setp[].newowner -1
		setp[].wackedbyactor -1
		setp[].weapon_pos -8
		setp[].fta 0
		strength MAXPLAYERHEALTH
		cstat 257
		state resetplayeramounts
		setp[].shield_amount 0
		setp[].jetpack_amount 0
		setp[].boot_amount 0
		setp[].steroids_amount 0
		setp[].firstaid_amount 0
		setp[].heat_amount 0
		setp[].scuba_amount 0
		setp[].holoduke_amount 0
		setp[].kickback_pic 0
		seta[].htextra -1
		set LASERAMMO 0
		set COMMAMMO 0
		set pistolammo 0
		set LASERMODE NO
		set endgametime gametime
		set gametime -1
		
		set redscore 1000
		set bluescore 0
		set burning 0
		set pdown NO
		set survivor_winner NO
		setplayer[].timebeforeexit 40
	}
ends

defstate resetplayerstuff

	set savedvalue NO
	ifl gametype 1 set savedvalue YES
	ife gametype SURVIVAL set savedvalue YES
	
	ife savedvalue YES
	{
		ifvarand perks 64 ifge rescuecharge RESCUEAMOUNT
		ife shellyinmap 0 set shellyinmap 50
		
		ifinouterspace set falldeath YES
		ife falldeath YES set deathcounter 0
	
		ifn shellyinmap 0
		ifn gametime -1
		ifg deathcounter 0
		{
			ife pdown NO
			{
				ife pchar 0 
				{ 
					ifvarand altcostume 2 action ALTDUKEDOWN else
					action PDUKEDOWN 
					set dukecharge 0 
				}
				ife pchar 1 { action APSHELLYDOWN set shellycharge 0 }
				ife pchar 2 { action APWESDOWN set wescharge 0 }
				ife pchar 3 { action APMANDOWN set mandocharge 0 }
				ife pchar 4 { action APDEADOWN set deacharge 0 }
				
				set pdown YES
				set slidekick 0
				set sidekick 0
				ife gametype SURVIVAL { set bluescore 0 set redscore 1000 }
				set deathcounter 450
				ifactorsound THISACTOR LASERLOOP stopactorsound THISACTOR LASERLOOP
				ifactorsound THISACTOR FREEZELOOP stopactorsound THISACTOR FREEZELOOP
				set zombieonplayer -1
				setp[].dead_flag 0 // -1
				seta[].mdflags 16
				seta[].htextra -1
				set monstatus 2
				setp[].shield_amount 0
				ifn gametype 0
				{
					getp[].ammo_amount PISTOL_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount PISTOL_WEAPON temp
					getp[].ammo_amount SHOTGUN_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount SHOTGUN_WEAPON temp
					shiftr stakes 1
					getp[].ammo_amount CHAINGUN_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount CHAINGUN_WEAPON temp
					getp[].ammo_amount RPG_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount RPG_WEAPON temp
					getp[].ammo_amount HANDBOMB_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount HANDBOMB_WEAPON temp
					getp[].ammo_amount SHRINKER_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount SHRINKER_WEAPON temp
					getp[].ammo_amount DEVISTATOR_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount DEVISTATOR_WEAPON temp
					getp[].ammo_amount TRIPBOMB_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount TRIPBOMB_WEAPON temp
					getp[].ammo_amount FREEZE_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount FREEZE_WEAPON temp
					getp[].ammo_amount GROW_WEAPON temp
					shiftr temp 1
					setp[].ammo_amount GROW_WEAPON temp
					shiftr LASERAMMO 1
				
					set nukeamount 0
					ife nukeselect YES
					{
						set nukeselect NO
						setp[].ammo_amount RPG_WEAPON weap4ammo
						state switchnuke
					}
				
				}
				shiftr railgunammo 1
				shiftr plasmammo 1
				shiftr weap4ammo 1
				shiftr COMMAMMO 1
				setp[].over_shoulder_on YES
				
				ifmove PSHRINK move 0
				set PSHRINKING 0
				sizeat 42 36
				cstat 257
			}
			
			// setp[].movement_lock 15
			ife pchar 0 { ifvarand altcostume 2 action ALTDUKEDOWN else action PDUKEDOWN }  else
			ife pchar 1 action APSHELLYDOWN else
			ife pchar 2 action APWESDOWN else
			ife pchar 3 action APMANDOWN else
			ife pchar 4 action APDEADOWN

			setp[].weapon_pos -8
			setp[].jumping_counter 0
			ifhitweapon { }
			ifstrength 5 strength 5
			setp[].quick_kick 0
			set qk_proxy 0
			ifrnd 3 spawn BLOODPOOL
			ifinwater setp[].airleft 150
			ifl player[].fta 90 quote 266
			cstat 257
			
			ife ikicked -2 addphealth 2
			
			set temp NO
			ifge sprite[].extra 75 set temp YES
			ife ikicked -96 set temp YES
			ife temp YES
			{
				ife pchar 0
				{
					// ifrnd 84 sound DUKE_REVIVE1 else
					ifrnd 128 sound DUKE_REVIVE2 else
					sound DUKE_REVIVE3
				}
				ife pchar 1
					sound SHELLYREADY
				setp[].movement_lock 0
				setp[].fta 0
				setp[].dead_flag 0
				setp[].newowner -1
				set zombieonplayer -1
				seta[].htextra -1
				setp[].wackedbyactor -1
				set burning 0
				set pdown NO
				ife gametype SURVIVAL { set bluescore 1 set redscore 0 }
				set monstatus 1
				set ikicked 0
				set falldeath NO
				ife pchar 4 action APDEASTAND else
				ife pchar 3 action APMANSTAND else
				ife pchar 2 action APWESSTAND else
				ife pchar 1 action APSHELLYSTAND else
				ifvarand altcostume 2 action ALTDUKESTAND else
				action PSTAND
				set PSHRINKING 0
				setp[].over_shoulder_on NO
				set deathcounter 450
				set spawnprotect 150
				break
			}
			
			ifhitspace 
			{
				// set pdown NO 
				state pbodyreset
				ife gametype 0 state spreset
				else ife gametype SURVIVAL { set lastclock 0 state survivalreset }
			}

			break
		}
		else
		{
			ife gametype SURVIVAL
			{
				state survivalreset
				break
			}
			ifn vrtrip 0
			{
				set vrscreen_time 32
				set vrscreen VR1
				set vrkilled vrtrip
				break
			}
			quote 13
			ifhitspace set pdown NO else 
			ife pdown YES
			ife shellyinmap NO set pdown NO
			
			ife deathcounter 0 set pdown NO
			
			ife gametype 0 
			ife pdown NO
			ife vrtrip 0
			{
				set credits 0 set lastcredits 0
				setp[].dead_flag -1
				strength -1
				set gameover YES 
				resetplayer
			}

			break
		}
	}
	else
	{
		set zombieonplayer -1
		set radaron NO
		set temp totalclock
		sub temp deathtime
		ife gametime -1 set temp 600
		ifl temp 600
		{
			cstat 0
			ifg temp 480 quote 204 else
			ifg temp 360 quote 203 else
			ifg temp 240 quote 202 else
			ifg temp 120 quote 201 else
			quote 200
			break
		}
		set spawnprotect 40
		set radaron YES
	}
	
	state pbodyreset
	
	set savedvalue NO
	ifl gametype 1 set savedvalue YES
	ife gametype SURVIVAL set savedvalue YES
	
	ife savedvalue YES
		state spreset	
	else
	{
		// manual stuff
		ifmove PSHRINK move 0
		set PSHRINKING 0
		sizeat 42 36
        cstat 257
		setp[].dead_flag 0
		setp[].newowner -1
		setp[].wackedbyactor -1
		setp[].weapon_pos -8
		setp[].fta 0
		setp[].movement_lock 0
		set burning 0
		// ife gametype DM
		ifg gametype 0
		ifg pstarts 0
		{
			set tempb pstarts
			sub tempb 1
			rand temp tempb
			set mysector 0
			updatesectorz loadx[temp] loady[temp] loadz[temp] mysector
			ifn temp -1
			{
				setp[].posx loadx[temp]
				setp[].posy loady[temp]
				setp[].posz loadz[temp]
				setp[].cursectnum mysector
				setp[].posxv 0
				setp[].posyv 0
				setp[].poszv 0
			}
		}
		else
		{
			set temp 0
			updatesectorz loadx[LEVEL] loady[LEVEL] loadz[LEVEL] temp
			ifn temp -1
			{
				setp[].posx loadx[LEVEL]
				setp[].posy loady[LEVEL]
				setp[].posz loadz[LEVEL]
				setp[].cursectnum temp
			}
		}
		strength MAXPLAYERHEALTH
		ifn gametype 0 seta[].extra player[].max_player_health
		cstat 257
		state resetplayeramounts
		setp[].shield_amount 0
		setp[].jetpack_amount 0
		setp[].boot_amount 0
		setp[].steroids_amount 0
		setp[].firstaid_amount 0
		setp[].holoduke_amount 0
		setp[].heat_amount 0
		setp[].scuba_amount 0
		setp[].kickback_pic 0
		seta[].htextra -1
		set LASERAMMO 0
		set COMMAMMO 0
		set pistolammo 0
		set LASERMODE NO
		set totalxp 0
		ifn startguns_perma 0
		{
			ife startguns -1 set startguns 0
			orvarvar startguns startguns_perma
		}
		ifn startguns -1 state applystartguns
		else
		{
			setp[].gotweapon PISTOL_WEAPON YES
			setp[].curr_weapon PISTOL_WEAPON
			setp[].ammo_amount PISTOL_WEAPON 48
			setp[].gotweapon SHOTGUN_WEAPON NO
			setp[].ammo_amount SHOTGUN_WEAPON 1
			set stakes 0 
			setp[].gotweapon CHAINGUN_WEAPON NO
			setp[].ammo_amount CHAINGUN_WEAPON 0
			setarray weap_owned[221] NO // Wes dual uzi
			set TMP_A wesupgrades[CHAINGUN_WEAPON]
			ifvarand TMP_A 1 xorvar TMP_A 1
			setarray wesupgrades[CHAINGUN_WEAPON] TMP_A
			set TMP_A wesupgrades[PISTOL_WEAPON]
			ifvarand TMP_A 4 xorvar TMP_A 4
			setarray wesupgrades[PISTOL_WEAPON] TMP_A
			setp[].gotweapon RPG_WEAPON NO
			setp[].ammo_amount RPG_WEAPON 0
			setp[].gotweapon HANDBOMB_WEAPON NO
			setp[].ammo_amount HANDBOMB_WEAPON 0
			setp[].gotweapon SHRINKER_WEAPON NO
			setp[].ammo_amount SHRINKER_WEAPON 0
			setp[].gotweapon DEVISTATOR_WEAPON NO
			setp[].ammo_amount DEVISTATOR_WEAPON 0
			setp[].gotweapon TRIPBOMB_WEAPON NO
			setp[].ammo_amount TRIPBOMB_WEAPON 0
			setp[].gotweapon FREEZE_WEAPON NO
			setp[].ammo_amount FREEZE_WEAPON 0
			setp[].gotweapon GROW_WEAPON NO
			setp[].ammo_amount GROW_WEAPON 0
		}
	}

ends

defstate sabersound

	set temp NO
	ife pchar 4 ifactor APLAYER set temp YES
	ifactor DEABOT set temp YES
	
	ife temp YES
	{
		randvar temp 3
		ife temp 0 sound DEAMISS else
		ife temp 1 sound DEAMISS2 else
		ife temp 2 sound DEAMISS3 else
		ife temp 3 sound DEAMISS4
		
		ifrnd 128
		{
			ifsound DEA_SWING1 break
			ifsound DEA_SWING2 break
			ifsound DEA_SWING3 break
			ifsound DEA_SWING4 break
			rand temp 3
			switch temp
			case 0 sound DEA_SWING1 break
			case 1 sound DEA_SWING2 break
			case 2 sound DEA_SWING3 break
			case 3 sound DEA_SWING4 break
			endswitch
		}
	}
	else
	{
		randvar temp 3
		ife temp 0 sound SABSWING1 else
		ife temp 1 sound SABSWING3 else
		ife temp 2 sound SABSWING4 else
		ife temp 3 sound SABSWING5
		// sabswing2 currently not used
	}

ends

state gladiatorstuff

	ifg emptalk 0
	{
		sub emptalk 1
		set emp_frame 10902
		ife emptalk 0 
		{
			set emp_frame 10901
			globalsound BIGCHEER
			starttrackslot 4 4 
			ifn empactivation 0
			{
				operateactivators empactivation 0
				operatemasterswitches empactivation
				operaterespawns empactivation
				
				setvar B 0
				
				whilevarvarn B NUMWALLS
				{
					// ife wall[B].overpicnum W_FORCEFIELD
					ife wall[B].lotag empactivation
					{
						setw[B].cstat 0
					}
					add B 1
				}
				
				set empactivation 0
			}
			
		}
	}
	ifg subtitle_time 0 
	{
		sub subtitle_time 1
		setp[].knuckle_incs 0
		setp[].crack_time 0
	}

ends

defstate raincode

setvar tempe 0
setvar countvar 0
setvarvar countvarb raining
abs countvarb

ifl framerate lastframerate
ifl framerate 60
{
	ifg raining 0 sub raining 1 else
	add raining 1
	sub countvarb 1
	ifle countvarb 0 break
}
else ifge framerate 80
ifvarand player[].player_par 1
{
	ifg wantrain 0 ifl raining wantrain add raining 1 else
	ifl wantrain 0 ifg raining wantrain sub raining 1
}

ifg countvarb framerate { set countvarb framerate sub countvarb 5 ifle countvarb 0 break }

ifvarg countvarb 255 setvar countvarb 255
getp[].posx x
getp[].posy y
set countvar countvarb
whilevarn countvar 0
{
	sub countvar 1
	set xydist x
	randvarvar temp rainradius // the random component of the distance from player
	add temp 512
	add xydist temp
	randvar angvar 2047
	
	rotatepoint x y xydist y angvar tempb y
	// tempb and y are the new x and y coords
	
	set tempd player[].cursectnum
	updatesector tempb y tempd
	ifvarn tempd -1
	{
		set temp NO
		
		ife rainpal SCRAPFALL
		{
			ifvarand sector[tempd].ceilingstat 1 nullop else
			set temp YES
		}
		else
		{
			ifvarand sector[tempd].ceilingstat 1
			ifvarn sector[tempd].hitag 101
			set temp YES
		}
		ife temp YES
		{
			getsector[tempd].ceilingpal temp
			ifvare temp 0
			{
				getsector[tempd].ceilingpicnum picnum
				ifvarn picnum MOONSKY1 ifvarn picnum BIGORBIT1 setvar temp 1
			}
			ifvarn temp 0
			{
				// getceilzofslope tempd tempb y z // z is the return var
				// ifvarl raining 0 // don't put snow too high up
				// {
					// getplayer[THISACTOR].posz temp
					// set tempc temp
					// sub temp z // positive value is distance above player to ceiling
					// ifg temp snowceiling 
					// {
						// sub tempc snowceiling 
						// set z tempc
					// }
				// }
				// updatesectorz tempb y z tempd
				// ifvarn tempd -1
				// {
					getplayer[THISACTOR].posz z
					set tempc snowceiling
					ifg raining 0 mul tempc 4
					sub z tempc
					ife rainpal SCRAPFALL
						espawn SCRAPFALL
					else
					ifg raining 0
					{
						ife countvar 0
						ifge raining 72
						ifrnd 16
						{
							espawn LIGHTNING2
							setav[RETURN].countvarb YES
							set z sector[tempd].floorz
						}
						else
						espawn RAINSPRITE
					}
					else espawn SNOWSPRITE
					setsprite RETURN tempb y z
					seta[RETURN].htbposx sprite[RETURN].x
					seta[RETURN].htbposy sprite[RETURN].y
					seta[RETURN].htbposz sprite[RETURN].z
					add tempe 1
				// }
			}
		}
	}
}

ife rainpal SCRAPFALL break

ifg raining 16 
{
	ifoutside
	{
		// soundonce RAIN
		ifactorsound THISACTOR HRAINLOOP nullop else sound HRAINLOOP
	}
	else
	{
		stopactorsound THISACTOR HRAINLOOP
	    ifg tempe 4
	    soundonce RAINWINDOW //else stopsound RAINWINDOW
    }
}
else ifvarg raining 0
{
	ifoutside
	{
		// soundonce RAINLOOP
		ifactorsound THISACTOR RAINLOOP nullop else sound RAINLOOP
	}
	 else
	{
		stopactorsound THISACTOR RAINLOOP
	    ifvarg tempe 4
	    soundonce RAINWINDOW //else stopsound RAINWINDOW
    }
}

ends

state switchboostcode

ife switchboost SWITCHBOOSTTIME
{
	globalsound SWITCHBOOSTSND
	palfrom 50 40 40 63
}
getp[].player_par temp

ifphealthl 25
{
	ifvarand temp 1
	addphealth 1
}
else
ifphealthl 50
{
	ife gametype 0 modvar temp 10 else
	modvar temp 5
	ife temp 0 addphealth 1
}
else
ifphealthl 75
{
	ife gametype 0 modvar temp 15 else
	modvar temp 10
	ife temp 0 addphealth 1
}
else
{
	ife gametype 0 modvar temp 30 else
	modvar temp 15
	ife temp 0 addphealth 1
}

sub switchboost 1

ends

defstate firelaserpistol
	ifge LASERCHARGE 32
	{
		// set temp NO
		ifvarand dukeupgrades[PISTOL_WEAPON] 16 
		{
			setprojectile[ARCBALLPROJ2].extra 120
			setprojectile[ARCBALLPROJ2].velmult 2
			setprojectile[ARCBALLPROJ2].xrepeat 20
			setprojectile[ARCBALLPROJ2].yrepeat 20	
			shoot ARCBALLPROJ2
			sound BFGFIRE2
			setprojectile[ARCBALLPROJ2].extra 60
			setprojectile[ARCBALLPROJ2].velmult 1
			setprojectile[ARCBALLPROJ2].xrepeat 24
			setprojectile[ARCBALLPROJ2].yrepeat 24	
		}
		else
		{
			setprojectile[FIRELASER2].cstat 32768
			setprojectile[FIRELASER2].xrepeat 64
			setprojectile[FIRELASER2].yrepeat 64
			setprojectile[FIRELASER2].extra 100
			setprojectile[FIRELASER2].hitradius 1560
			setprojectile[FIRELASER2].velmult 2
			setprojectile[FIRELASER2].spawns SHOCKBALL_EXP
			setprojectile[FIRELASER2].isound MEGAIMPACT2
			shoot FIRELASER2
			setprojectile[FIRELASER2].cstat 130
			setprojectile[FIRELASER2].xrepeat 32
			setprojectile[FIRELASER2].yrepeat 32
			setprojectile[FIRELASER2].extra 18
			setprojectile[FIRELASER2].hitradius 0
			setprojectile[FIRELASER2].velmult 1
			setprojectile[FIRELASER2].spawns PLASMA_EXP
			setprojectile[FIRELASER2].isound MEGAIMPACT1
			sound FIRE_LASER
			setactorsoundpitch THISACTOR FIRE_LASER -768
		}
		ifvarand gametips 2 { xorvar gametips 2 savegamevar gametips }
		subvar LASERAMMO 5
		set LASERCHARGE 0
		ifl LASERAMMO 0 set LASERAMMO 0
	}
	else
	{
		// set temp NO
		// ife pchar 0 ifvarand dukeupgrades[PISTOL_WEAPON] 16 set temp YES
		// ife pchar 1 ifvarand shellyupgrades[PISTOL_WEAPON] 16 set temp YES
		// ife pchar 2 ifvarand wesupgrades[PISTOL_WEAPON] 16 set temp YES
		// ife pchar 3 ifvarand mandoupgrades[PISTOL_WEAPON] 16 set temp YES
		// ife pchar 4 ifvarand novaupgrades[PISTOL_WEAPON] 16 set temp YES
		// ife temp YES
		
		ifvarand dukeupgrades[PISTOL_WEAPON] 16
		{
			sound TERMLASER
			setprojectile[BIGBOIPROJ].offset 224
			setprojectile[BIGBOIPROJ].extra 20
			shoot BIGBOIPROJ
			setprojectile[BIGBOIPROJ].offset 14354
			setprojectile[BIGBOIPROJ].extra 4
		}
		else
		{
			setprojectile[FIRELASER2].cstat 32768
			shoot FIRELASER2
			setprojectile[FIRELASER2].cstat 130
			sound FIRE_LASER
		}
		sub LASERAMMO 1
		setp[].ammo_amount PISTOL_WEAPON LASERAMMO
		ife LASERAMMO 0 
		{
			set LASERMODE 2
			setp[].weapon_pos -1
			setp[].ammo_amount PISTOL_WEAPON pistolammo
		}
	}
	ifl cloak 0
	{
		mul cloak -1
		set switchboost 15
		sound CLOAKOFF
	}
ends

defstate firecommgun
	screensound COMET_FIRE
	setprojectile[COMETPROJ].extra 105
	eshoot COMETPROJ
	seta[RETURN].pal 8
	setprojectile[COMETPROJ].extra 60
	sub COMMAMMO 1
	setp[].ammo_amount PISTOL_WEAPON COMMAMMO
	ife COMMAMMO 0 
	{
		set LASERMODE 4
		setp[].weapon_pos -1
		setp[].ammo_amount PISTOL_WEAPON pistolammo
	}
	ifl cloak 0
	{
		mul cloak -1
		set switchboost 15
		sound CLOAKOFF
	}
ends

defstate startsaber
	ife saberpos 0
	{
		randvar temp 4
		ife temp 0 // angle 2 R to L or right overhand
		{ 
			set saberpos 1
			ife pchar 4 { ifaction APDEACLAWING nullop else action APDEACLAWING }
		} else
		ife temp 1 // angle 2 L to R
		{ 
			set saberpos 15
			ife pchar 4 { set saberpos 19 ifaction APDEACLAWING nullop else action APDEACLAWING } // left overhand
		} else
		ife temp 2 // downward swing
		{ 
			set saberpos 35
			ife pchar 4 { ifaction APDEACLAWING nullop else action APDEACLAWING }
			// for pchar 4 is R to L horizontal
		} else
		ife temp 3 // angle 3 R to L
		{ 
			set saberpos 47
			ife pchar 4 { set saberpos 72 ifaction APDEACLAWING nullop else action APDEACLAWING }
			// L to R horizontal
		} 
		else // angle 3 L to R
		{ 
			set saberpos 60
			ife pchar 4 { ifrnd 128 set saberpos 47 ifaction APDEACLAWING nullop else action APDEACLAWING } // left uppercut
		}
		ife pchar 2 sound BLADESWING else state sabersound
	}
ends

defstate wesoverride

	// cursory 98 start of replace duke line, 107 eol
	// cursory 122 start of bombshell replace line, 131 eol
	// cursory 146 start of keep both, 155 eol
	
	set TMP_A NO
	ifhitspace set TMP_A YES
	ifvarand bits 4 set TMP_A YES
	
	ife TMP_A YES
	{
		ifge cursory 98 ifle cursory 107 set wesreplace 1
		ifge cursory 122 ifle cursory 131 set wesreplace 2
		ifge cursory 146 ifle cursory 155 set wesreplace 0
	}
	ife wesreplace 0 // wes does not replace anyone
	{
		set epselect tempselect 
		ife epselect 4 set startmode 1
		ife epselect 7 set startmode 3
	}
	else
	ife wesreplace 1 // wes replaces duke
	{
		set epselect tempselect 
		ife epselect 4 // epselect 4 = new invastion
		{
			set startmode 4 set charsel 4
		}
		ife epselect 7 // epselect 7 = space gladiators
		{
			set startmode 6 set charsel 6
		}
	}
	else
	ife wesreplace 2 // wes replaces bombshell
	{
		set epselect tempselect 
		ife epselect 4 // epselect 4 = new invastion
		{
			set startmode 4 set charsel 4
		}
		ife epselect 7 // epselect 7 = space gladiators
		{
			set startmode 5 set charsel 5
		}
	}

ends

defstate startmodecode

	ife musicwait 0	{ stopallmusic set musicwait 3 } else
	set musicwait 3
	
	state in_menu
	
	ifcount 15 nullop else ife epselect -1 break
	
	ife VOLUME 4 ife LEVEL 18 
	{
		ifvarand charsel 8 nullop else
		{
			orvar charsel 8 // Mando requirement hack
			add numchars 1
			ife mready -1 set mready 0
		}
	}
	
	set temp NO
	ifvarand bits 4 set temp YES
	ifhitspace set temp YES
	ife temp YES
	{
		// DEANOVA cursorx 15, 54 cursory 60,160 orvar 16
		// WES cursorx 80, 118 cursory 60,160 orvar 4
		// DUKE cursorx 145,185 cursory 60,160 orvar 1
		// BOMBSHELL cursorx 202,238 cursory 60,160 orvar 2
		// MANDO cursorx 255, 311 cursory 60,160 orvar 8
		
		
		ifge cursorx 15 ifle cursorx 54
		ifge cursory 60 ifle cursory 160
		ifn bits oldbits ifn nready -1
		{
			ifvarand charsel 16 { xorvar charsel 16 sub numchars 1 } else
			{
				ifge numchars charmax quote 1214 else
				{
					orvar charsel 16
					soundonce DEA_GREETING
					setp[].fta 0
					add numchars 1
				}
			}
		}
		
		ifge cursorx 80 ifle cursorx 118
		ifge cursory 60 ifle cursory 160
		ifn bits oldbits ifn wready -1
		{
			
			ifvarand charsel 4 { xorvar charsel 4 sub numchars 1 } else
			{
				ifge numchars charmax quote 1214 else
				{
					orvar charsel 4
					soundonce WESGOTYOURBACK 
					setp[].fta 0
					add numchars 1
				}
			}
			
		}
		
		ifge cursorx 145 ifle cursorx 185
		ifge cursory 60 ifle cursory 160
		ifn bits oldbits ifn dready -1
		{
			ifvarand charsel 1 { xorvar charsel 1 sub numchars 1 } else
			{
				ifge numchars charmax quote 1214 else
				{
					orvar charsel 1
					soundonce DUKE_ROGER1
					setp[].fta 0
					add numchars 1
				}
			}
		}
		
		ifge cursorx 202 ifle cursorx 238
		ifge cursory 60 ifle cursory 160
		ifn bits oldbits ifn bready -1
		{
			ifvarand charsel 2 { xorvar charsel 2 sub numchars 1 } else
			{
				ifge numchars charmax quote 1214 else
				{
					orvar charsel 2
					soundonce B_HAILQUEEN
					setp[].fta 0
					add numchars 1
				}
			}
		}
		
		ifge cursorx 255 ifle cursorx 311
		ifge cursory 60 ifle cursory 160
		ifn bits oldbits ifn mready -1
		{
			ife VOLUME 4 ife LEVEL 18 nullop
			else
			ifvarand charsel 8 { xorvar charsel 8 sub numchars 1 } 
			else
			{
				ifge numchars charmax quote 1214 else
				{
					orvar charsel 8
					soundonce MANDO_CORPSES
					setp[].fta 0
					add numchars 1
				}
			}
		}

		ifg cursorx 0 ifl cursorx 45
		ifg cursory 20 ifl cursory 50 // 160
		ifn marathon 2
		{
			set tempb YES
			ife attmode YES set tempb NO
			ife LEVEL 7 ife VOLUME 0 set tempb YES
	
			ifn bits oldbits
			ife tempb YES
			{
				sound SWITCH_ON
				ife PROGRESSION YES 
				{
					set PROGRESSION NO
					set attmode NO
					set credits 1000
					set lastcredits 1000
					set totalcredits 1000
					set vendorupgrade YES
					orvar perks 2
					ifn radaron -1 set radaron YES
				}
				else
				{
					set PROGRESSION YES
					set attmode 2
					set credits 10000
					set lastcredits 10000
					set totalcredits 10000
					set vendorupgrade YES
					orvar perks 2
					ifn radaron -1 set radaron YES
				}
			}	
		}
		
		ifge cursorx 265 ifle cursorx 316
		ifg cursory 20 ifl cursory 55
		ifg charsel 0
		{
			set dukecharge 0
			set shellycharge 0
			set wescharge 0
			set mandocharge 0
			set deacharge 0
			ife marathon 2
			{
				setp[].jetpack_amount 0
				seta[].extra healthbuff
			}
			// ifl charsel 1 { set charsel 1 set numchars 1 }
			set startmode charsel
			set charmax 2 // return to default value
			setp[].movement_lock 0
			ifvarand startmode 16 { set pchar 4 state novaweapons xorvar gametips 128 savegamevar gametips } else
			ifvarand startmode 8 { set pchar 3 state mandoweapons } else
			ifvarand startmode 4 { set pchar 2 state wesweapons } else
			ifvarand startmode 2 { set pchar 1 state shellyweapons } else
			{ set pchar 0 state dukeweapons }
			
			// all other player combos that are not D&B
			ifvarand startmode 1 // spawn DUKEBOT
			{
				ife pchar 0 nullop else { espawn DUKEBOT set myshelly RETURN }
			}
			
			ifvarand startmode 2 // spawn SHELLY
			{
				ife pchar 1 nullop else { espawn SHELLY set myshelly RETURN }
			}
			ifvarand startmode 4 // spawn WESBOT
			{
				ife pchar 2 nullop else { espawn WESBOT set myshelly RETURN }
			}
			ifvarand startmode 8 // spawn MANDOFETT
			{
				ife pchar 3
				{
					ife mylily -1
					{
						espawn LILY
						set mylily RETURN
					}
				} 
				else { espawn MANDOFETT set myshelly RETURN seta[RETURN].pal 3 }
			}
			ifvarand startmode 16 // spawn DEANOVA
			{
				ife pchar 4 nullop else { espawn DEABOT set myshelly RETURN }
			}
		}
/*
		ifg cursorx 99 ifl cursorx 225
		ifg cursory 140 ifl cursory 202
		{
			// COOP SELECTION
			set startmode 3
			ife pchar 0 spawn SHELLY else spawn DUKEBOT
			setp[].movement_lock 0
		}

		ifg cursorx 18 ifl cursorx 143
		ifg cursory 80 ifl cursory 135
		{
			// DUKE SOLO SELECTION
			set startmode 1
			setp[].movement_lock 0
		}
		
		ifg cursorx 179 ifl cursorx 304
		ifg cursory 80 ifl cursory 135
		{
			// BOMBSHELL SOLO SELECTION
			set startmode 2
			set pchar 1
			setp[].movement_lock 0
		}
*/
		

	}
	set oldbits bits
	
ends

defstate vrmenucode

	set vendor_screen 0
	state in_menu
	ifg cursorx 60 ifl cursorx 260
	{
		ifg cursory 50 ifl cursory 70
			set tempselect 1
		else
		ifg cursory 110 ifl cursory 130
			set tempselect 2
		else
			set tempselect -1
			
		set temp NO
		ifvarand bits 4 set temp YES
		ifhitspace set temp YES
		
		ife temp YES
		{
			ife tempselect 1 // abort simulation
			{
				set vrscreen_time 32
				set vrscreen VR1
				set vrmenu NO
				break
			}
			ife tempselect 2 // normal eduke menu
			{
				set vrmenu -1
				setp[].movement_lock 0
				setp[].gm 5
				cmenu 50
			}
		}
	}
	
ends

defstate matchmenucode

	
	ifg matchmenu 100 break // gives player a message only

	state in_menu
	// works in tandem with code in EVENT_ GAME for MATCHSTART
	
	
	ifl matchmenu 0 // hack to make the level start for free immediately
	{
		set cursorx 220
		set cursory 100
		set bits 4
		mul matchmenu -1
	}
	
	ifg cursorx 60 ifl cursorx 110
	{
		ifg cursory 90 ifl cursory 130
		{
			set tempselect 0  // NO
			
			set temp NO
			ifvarand bits 4 set temp YES
			ifhitspace set temp YES
			ife temp YES
			{
				set matchmenu NO
				set menuoff YES
				setp[].movement_lock 0
			}
		}
		else set tempselect -1
	}
	else
	ifg cursorx 210 ifl cursorx 260
	{
		ifg cursory 90 ifl cursory 130
		{
			set tempselect 1 // YES
			set temp NO
			ifvarand bits 4 set temp YES
			ifhitspace set temp YES
			ife temp YES
			{
				ifg matchmenu 1
				{
					// ifl credits 1000
					// ife ancients_transport 0
					// {
						// quote 361
						// set matchmenu NO
						// set menuoff YES
						// setp[].movement_lock 0
						// break
					// }
					
					ife VOLUME 4 // HTTKB
					{
						set menuoff YES
						set matchmenu NO
						setp[].movement_lock 0
						setarray keycards[LEVEL] player[].got_access
						setarray secretrooms[LEVEL] player[].secret_rooms
						setarray savelevel[LEVEL] YES
						savemapstate
						startlevel VOLUME matchlevel
						break
					}
					ife ancients_transport 0
					{
						ifge credits 1000
						{
							sub credits 1000
							sub lastcredits 1000
						}
						else
						{
							set credits 0
							set lastcredits 0
							
						}
					}
					set menuoff YES
					set matchmenu NO
					findnearsprite VRSET 1560 spriteid
					ifn spriteid -1 setav[spriteid].countvar 1
					
					// ife matchlevel 29 operateactivators 13 0 
					// closes secret door
					
					set vrtrip matchlevel
					set vrscreen VR1
					set vrscreen_time 32
					break
					
				}
				set spriteid 0
				headspritestat spriteid 1
				whilevarn spriteid -1
				{
					ife sprite[spriteid].picnum FEMCIV3 ife actorvar[spriteid].botclip 10
						setav[spriteid].monstatus 66
						
					ife sprite[spriteid].picnum DUMCIV setav[spriteid].monstatus 2
					
					nextspritestat spriteid spriteid
					
					
				}
				ife matchmenu YES
				{
					ifge wave 4 add wave 1
				}
				setp[].movement_lock 0
				
				
				setarray keycards[LEVEL] player[].got_access
				setarray secretrooms[LEVEL] player[].secret_rooms
				setarray savelevel[LEVEL] YES
				savemapstate
				startlevel VOLUME matchlevel
			}
		}
		else set tempselect -1
	}
	else set tempselect -1
	

ends

defstate equipshield

	ifg tempselect 6
	{
		ife tempselect 7 { ife novatype 1 break set novatype 1 }
		ife tempselect 8 { ife novatype 2 break set novatype 2 }
		ife tempselect 9 { ife novatype 3 break set novatype 3 }
	}
	else
	set es_type tempselect
	set es_hp 0
	set es_delaycount 300
	globalsound EQUIPSHIELD

ends

defstate equipweapon

	// applies bits to dukeupgrades or shellyupgrades associated with tempselect
	// deselects bits if appropriate
	// calls dukeweapons or shellyweapons
	switch tempselect
	case 100 // vanilla pistol
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 8 xorvar B 8
	break
	case 101 // glock18
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		orvar B 8
	break
	case 102 // AP rounds
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 103 // dual wield
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 104 // regular alien blaster
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 16 xorvar B 16
	break
	case 105 // upgraded blaster
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		orvar B 16
	break
	case 106 // doubled pistol ammo
		set temp PISTOL_WEAPON 
		set B dukeupgrades[temp]
		set tempb B
		orvar B 32
	break
	
	case 107 // increased pistol reload speed
	case 507
		set temp -1
		ifvarand perks 2048 nullop else
		{ orvar perks 2048 sound SKARCLIPIN }
	break
	
	case 110 // vanilla shotty
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
	break
	case 111 // explosive shells
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
		
	break
	
	case 112 // DB shotty
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		
		set tempc mandoupgrades[temp]
		orvar tempc 16
		setarray mandoupgrades[temp] tempc
		
		orvar B 16
		ifvarand gotDB 1 nullop else
		orvar gotDB 1
	break
	
	case 113 // DB shotty +reload speed
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 32
		
	break
	
	case 114 // atomic shotty
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 115 // rad shells
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 116 // burst fire
		set temp SHOTGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 120 // vanilla chaingun
		set temp CHAINGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	case 121 // minigun
		set temp CHAINGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 122 // AP
		set temp CHAINGUN_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 2
	break
	case 123 // +max ammo
		set temp CHAINGUN_WEAPON
		set B dukeupgrades[temp]
		orvar B 4
	break
	case 124 // executioner
		set temp CHAINGUN_WEAPON
		set B dukeupgrades[temp]
		orvar B 8
		orvar gotshock 1
	break
	
	case 125 // chain gang
		set temp CHAINGUN_WEAPON
		set B dukeupgrades[temp]
		orvar B 16
	break
	
	case 130 // vanilla RPG
		set temp RPG_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	case 131 // smart RPG
		set temp RPG_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 132 // fast rox
		set temp RPG_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 2
	break
	case 133 // multi rox
		set temp RPG_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 140 // regular pipebombs
		set temp HANDBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 141 // cluster pipebombs
		set temp HANDBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
		orvar B 1
	break
	
	case 142 // smart bomblets
		set temp HANDBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
		orvar B 2
		orvar B 1
	break
	
	case 143 // big boom
		set temp HANDBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		ifvarand B 2 xorvar B 2
		orvar B 4
	break
	
	case 150 // regular shrinker
		set temp SHRINKER_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		
		// setarray shellyupgrades[SHRINKER_WEAPON] 0
	break
	
	case 151 // BMFG
		set temp SHRINKER_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 152 // BMFG altfire
		set temp SHRINKER_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 153 // plasma rifle big mag
		set temp FREEZE_WEAPON
		set B dukeupgrades[temp]
		orvar B 2
	break
	
	case 154 // babifier
		set temp GROW_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 155 // fan service
		set temp GROW_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 2 xorvar B 2
		orvar B 1
	break
	
	case 156 // BFF ray
		set temp GROW_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 2
	break
	
	case 157 // plasma rifle
		set temp FREEZE_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		// ifvarand B 2 xorvar B 2
	break
	
	case 160 // normal devastator
		set temp DEVISTATOR_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		ifvarand B 2 xorvar B 2
	break
	
	case 161 // meteorator
		set temp DEVISTATOR_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 162 // quad barrels
		set temp DEVISTATOR_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 170 // railgun
		set temp DEVISTATOR_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
	break
	
	case 171 // barret
		set temp DEVISTATOR_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 4
	break
	
	case 172 // barret semi-auto
		set temp DEVISTATOR_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 180 // laser tripbomb
		set temp TRIPBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
		ifvarand B 1 xorvar B 1
	break
	
	case 181 // spider bomb
		set temp TRIPBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 182 // spider mobility upgrade
		set temp TRIPBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 183 // deathbeam mine
		set temp TRIPBOMB_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 4
	break
		
	case 190 // REGULAR FREEZER
		set temp FREEZE_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 191 // ICEBEAM
		set temp FREEZE_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 194 // DEFLECT HITSCAN
		set temp KNEE_WEAPON
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 200 // D.E.
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 8 xorvar B 8
	break
	case 201 // shelly glock18
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		orvar B 8
	break
	case 202 // shelly AP
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 203 // shelly dual pistols
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 204 // regular alien blaster
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 16 xorvar B 16
	break
	case 205 // upgraded blaster
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		orvar B 16
	break
	case 206 // doubled pistol ammo
		set temp PISTOL_WEAPON 
		set B shellyupgrades[temp]
		set tempb B
		orvar B 32
	break
	
	case 207 // increased pistol reload speed
		set temp -1
		ifvarand perks 2048 nullop else
		{ orvar perks 2048 sound SKARCLIPIN }
	break
	
	case 210 // shelly shotgun
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 4 
		{
			xorvar B 4 // removes bow
			ifg player[].ammo_amount SHOTGUN_WEAPON player[].max_ammo_amount SHOTGUN_WEAPON	
				setp[].ammo_amount SHOTGUN_WEAPON player[].max_ammo_amount SHOTGUN_WEAPON
		}
	break
	case 211 // explosive rounds
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 212 // semi-auto shotgun
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 128
	break
	case 214 // bow
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 4
		orvar B 32 // get spy arrows for free
		ifvarand gotbow 1 nullop else
		{
			orvar gotbow 1
			setp[].weapon_pos -1
			orvar gotbow 4
		}
		
	break
	case 215 // explosive arrows
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		set TMP_B wesupgrades[temp]
		orvar TMP_B 8
		setarray wesupgrades[temp] TMP_B
		orvar B 8
		setarray weap_owned[215] YES // set Wes equivalent
	break
	case 216 // multishot arrows
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 16
		set TMP_B wesupgrades[temp]
		orvar TMP_B 16
		setarray wesupgrades[temp] TMP_B
		setarray weap_owned[216] YES // set Wes equivalent
	break
	case 217 // electric arrows
		set temp SHOTGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 64
		set TMP_B wesupgrades[SHOTGUN_WEAPON]
		orvar TMP_B 768
		setarray wesupgrades[SHOTGUN_WEAPON] TMP_B
		setarray weap_owned[217] YES // set Wes equivalent
	break
	case 220 // M4
		set temp CHAINGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	case 221 // double m4
		set temp CHAINGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 222 // AP M4
		set temp CHAINGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 2
	break
	case 223 // +max ammo M4
		set temp CHAINGUN_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 224 // executioner
		set temp CHAINGUN_WEAPON
		set B shellyupgrades[temp]
		orvar B 8
		orvar gotshock 1
	break
	case 225 // chain gang
		set temp CHAINGUN_WEAPON
		set B shellyupgrades[temp]
		orvar B 16
	break
	case 230 // vanilla RPG
		set temp RPG_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	case 231 // smart RPG
		set temp RPG_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 232 // fast rox
		set temp RPG_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 2
	break
	case 233 // multi rox
		set temp RPG_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 4
	break
	
	case 240 // regular turret
		set temp HANDBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 241 // missile turret
		set temp HANDBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 242 // armored turrets
		set temp HANDBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 250 // regular shrinker
		set temp SHRINKER_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		setarray dukeupgrades[SHRINKER_WEAPON] 0
	break
	
	case 251 // BMFG
		set temp SHRINKER_WEAPON
		// set B shellyupgrades[temp]
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	
	case 252 // BMFG altfire
		set temp SHRINKER_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 253 // plasma rifle big mag
		set temp FREEZE_WEAPON
		set B shellyupgrades[temp]
		orvar B 2
	break
	
	case 254 // babifier
		set temp GROW_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 255 // fan service
		set temp GROW_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 2 xorvar B 2
		orvar B 1
	break
	
	case 256 // BFF ray
		set temp GROW_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 2
	break
	
	case 257 // plasma rifle
		set temp FREEZE_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		// ifvarand B 2 xorvar B 2
	break
	
	case 260 // regular devastator
		set temp DEVISTATOR_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		ifvarand B 2 xorvar B 2
	break
	
	case 261 // sticky bombs
		set temp DEVISTATOR_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 262 // quad barrels
		set temp DEVISTATOR_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 270 // regular railgun
		set temp DEVISTATOR_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
	break
	
	case 271 // barret
		set temp DEVISTATOR_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 4
	break
	
	case 272 // barret semi-auto
		set temp DEVISTATOR_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 280 // tripbombs
		set temp TRIPBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
		ifvarand B 1 xorvar B 1
	break
	
	case 281 // spider bombs
		set temp TRIPBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 282 // spider mobility upgrade
		set temp TRIPBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 283 // deathbeam mine
		set temp TRIPBOMB_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 4
	break
	
	case 290 // INCINERATOR
		set temp FREEZE_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 291 // INCINERATOR UPGRADE
		set temp FREEZE_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 294 // DEFLECT HITSCAN
		set temp KNEE_WEAPON
		set B shellyupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	// 300-399 Wes weapon upgrades
	case 300 // regular pistol
		set temp PISTOL_WEAPON 
		set B wesupgrades[temp]
		set tempb B
		// ifvarand B 8 xorvar B 8
	break
	
	case 302 // Wes AP
		set temp PISTOL_WEAPON 
		set B wesupgrades[temp]
		set tempb B
		orvar B 1
	break
	// case 303 // Wes dual pistols
		// set temp PISTOL_WEAPON 
		// set B wesupgrades[temp]
		// set tempb B
		// orvar B 4
	// break
	case 304 // regular alien blaster
		set temp PISTOL_WEAPON 
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 16 xorvar B 16
	break
	case 305 // upgraded blaster
		set temp PISTOL_WEAPON 
		set B wesupgrades[temp]
		set tempb B
		orvar B 16
	break
	case 306 // doubled pistol ammo
		set temp PISTOL_WEAPON 
		set B wesupgrades[temp]
		set tempb B
		orvar B 32
	break
	
	case 307 // increased pistol reload speed
	    set temp -1
		ifvarand perks 2048 nullop else
		{ orvar perks 2048 sound SKARCLIPIN }
	break
	
	case 310 // Wes shotgun
		set temp SHOTGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
	break
	// case 311 // explosive rounds
		// set temp SHOTGUN_WEAPON
		// set B wesupgrades[temp]
		// set tempb B
		// orvar B 1
	// break
	case 312 // semi-auto shotgun
		set temp SHOTGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 128
	break
	case 314 // bow
		set temp SHOTGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 4
		orvar B 32 // get spy arrows for free
		ifvarand gotbow 1 nullop else
		{
			orvar gotbow 1
			setp[].weapon_pos -1
			orvar gotbow 4
		}
		
	break
	// wesupgrades[SHOTGUN_WEAPON] 16=MULTI, 32=SPY, 8=RADIOACTIVE, 256=ICE, 512=FIRE
	case 315 // RADIOACTIVE arrows
		set temp SHOTGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 8
		set TMP_B shellyupgrades[temp]
		orvar TMP_B 8
		setarray shellyupgrades[temp] TMP_B
		setarray weap_owned[115] YES // set Bombshell equivalent
	break
	case 316 // multishot arrows
		set temp SHOTGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 16
		set TMP_B shellyupgrades[temp]
		orvar TMP_B 16
		setarray shellyupgrades[temp] TMP_B
		setarray weap_owned[116] YES // set Bombshell equivalent
	break
	case 317 // ELEMENTAL
		set temp SHOTGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 768
		
		set TMP_B shellyupgrades[SHOTGUN_WEAPON]
		orvar TMP_B 64
		setarray shellyupgrades[SHOTGUN_WEAPON] TMP_B
		setarray weap_owned[117] YES // set Bombshell equivalent
	break
	case 320 // M4
		set temp CHAINGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	// case 321 // double m4
		// set temp CHAINGUN_WEAPON
		// set B wesupgrades[temp]
		// set tempb B
		// orvar B 1
	// break
	case 322 // AP uzi
		set temp CHAINGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 2
	break
	case 323 // +max ammo M4
		set temp CHAINGUN_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 324 // executioner
		set temp CHAINGUN_WEAPON
		set B wesupgrades[temp]
		orvar B 8
		orvar gotshock 1
	break
	case 325 // chain gang
		set temp CHAINGUN_WEAPON
		set B wesupgrades[temp]
		orvar B 16
	break
	case 330 // vanilla RPG
		set temp RPG_WEAPON
		set B wesupgrades[temp]
		set tempb B
		// ifvarand B 1 xorvar B 1
	break
	
	case 340 // regular icebombs
		set temp HANDBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 341 // cluster icebombs
		set temp HANDBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 342 // smart icebombs
		set temp HANDBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 351 // blood zombie
		set temp SHRINKER_WEAPON
		set B wesupgrades[temp]
		orvar B 1
	break

	case 353 // plasma rifle big mag
		set temp FREEZE_WEAPON
		set B wesupgrades[temp]
		orvar B 2
	break
	
	case 355 // SCAR full auto
		set temp GROW_WEAPON
		set B wesupgrades[temp]
		orvar B 1
	break
	
	case 357 // plasma rifle
		set temp FREEZE_WEAPON
		set B wesupgrades[temp]
		set tempb B
		// ifvarand B 2 xorvar B 2
	break
	
	case 360 // regular devastator
		set temp DEVISTATOR_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		ifvarand B 2 xorvar B 2
	break
	
	case 362 // quad barrels
		set temp DEVISTATOR_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 370 // regular railgun
		set temp DEVISTATOR_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
	break
	
	case 371 // barret
		set temp DEVISTATOR_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 4
	break
	
	case 372 // barret semi-auto
		set temp DEVISTATOR_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 380 // tripbombs
		set temp TRIPBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
		ifvarand B 1 xorvar B 1
	break
	
	case 381 // spider bombs
		set temp TRIPBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 382 // spider mobility upgrade
		set temp TRIPBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 383 // deathbeam mine
		set temp TRIPBOMB_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 4
	break
	
	case 390 // Blade Launcher
		set temp FREEZE_WEAPON
		set B wesupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 391 // Blade Launcher upgrade
		set temp FREEZE_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 394 // DEFLECT HITSCAN
		set temp KNEE_WEAPON
		set B wesupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	// 400-499 Mando weapon upgrades
	// case 400 // regular pistol
		// set temp PISTOL_WEAPON 
		// set B wesupgrades[temp]
		// set tempb B
		// ifvarand B 8 xorvar B 8
	// break
	
	case 402 // Wrist Blaster +ROF
		set temp PISTOL_WEAPON 
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	// case 403 // Wes dual pistols
		// set temp PISTOL_WEAPON 
		// set B wesupgrades[temp]
		// set tempb B
		// orvar B 4
	// break
	case 404 // regular alien blaster
		set temp PISTOL_WEAPON 
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 16 xorvar B 16
	break
	case 405 // upgraded blaster
		set temp PISTOL_WEAPON 
		set B mandoupgrades[temp]
		set tempb B
		orvar B 16
	break
	case 406 // doubled pistol ammo
		set temp PISTOL_WEAPON 
		set B mandoupgrades[temp]
		set tempb B
		orvar B 32
	break
	case 410 // Mando plama shotgun
		set temp SHOTGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
	break
	// case 411 // explosive rounds
		// set temp SHOTGUN_WEAPON
		// set B mandoupgrades[temp]
		// set tempb B
		// orvar B 1
	// break
	case 412 // bigplasma altfire
		set temp SHOTGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 128
	break
	
	case 414 // DB shotty
		set temp SHOTGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 16
	break
	
	case 415 // shieldbreaker rounds on DB shotty
		set temp SHOTGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 32
	break
	
	case 416 // rad shells
		set temp SHOTGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 420 // SLUGTHROWER
		set temp CHAINGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
	break
	
	case 421 // DUAL WIELDING
	    set temp CHAINGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 422 // AP ROUNDS
	    set temp CHAINGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 2
	break
	case 423 // +max ammo CHAINGUN
		set temp CHAINGUN_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 424 // executioner
		set temp CHAINGUN_WEAPON
		set B mandoupgrades[temp]
		orvar B 8
		orvar gotshock 1
	break
	case 425 // chain gang
		set temp CHAINGUN_WEAPON
		set B mandoupgrades[temp]
		orvar B 16
	break
	
	case 430 // rocket launcher
		set temp RPG_WEAPON
		set B mandoupgrades[temp]
	break
	
	case 431 // rpg doubleboom
		set temp RPG_WEAPON
		set B mandoupgrades[temp]
		orvar B 1
	break
	
	case 432 // burstfire RPG
		set temp RPG_WEAPON
		set B mandoupgrades[temp]
		orvar B 2
	break
	
	case 440 // thermal detonators
		set temp HANDBOMB_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 441 // sticky detonators
		set temp HANDBOMB_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 450 // regular shrinker
		set temp SHRINKER_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		setarray dukeupgrades[SHRINKER_WEAPON] 0
	break
	
	case 451 // BMFG
		set temp SHRINKER_WEAPON
		// set B mandoupgrades[temp]
		set B dukeupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	
	case 452 // BMFG altfire
		set temp SHRINKER_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 453 // plasma rifle big mag
		set temp FREEZE_WEAPON
		set B mandoupgrades[temp]
		orvar B 2
	break
	
	case 454 // babifier
		set temp GROW_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 455 // fan service
		set temp GROW_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 2 xorvar B 2
		orvar B 1
	break
	
	case 456 // BFF ray
		set temp GROW_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 2
	break
	
	case 457 // plasma rifle
		set temp FREEZE_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		// ifvarand B 2 xorvar B 2
	break
	
	case 460 // regular annihilator
	case 560
		set temp DEVISTATOR_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		ifvarand B 2 xorvar B 2
	break
	
	case 461 // annihilator shock rounds
	case 561
		set temp DEVISTATOR_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 462 // annihilator quad barrels
	case 562
		set temp DEVISTATOR_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 470 // disintegrator
	case 570
	break
	
	case 471 // disintegrator splash zone
	case 571
		set temp DEVISTATOR_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 4
	break
	
	case 472 // disintegrator smart ricochet
	case 572
		set temp DEVISTATOR_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 480 // tripbombs
	case 580
		set temp TRIPBOMB_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 4 xorvar B 4
		ifvarand B 1 xorvar B 1
	break
	
	case 481 // spider bombs
	case 581
		set temp TRIPBOMB_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 482 // spider mobility upgrade
	case 582
		set temp TRIPBOMB_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 483 // deathbeam mine
	case 583
		set temp TRIPBOMB_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
		orvar B 4
	break
	
	case 490 // carbonite rifle
		set temp FREEZE_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		ifvarand B 1 xorvar B 1
	break
	
	case 491 // bounty hunter
		set temp FREEZE_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	case 492 // brain washer
		set temp FREEZE_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 4
	break
	case 494 // DEFLECT HITSCAN
	case 594
		set temp KNEE_WEAPON
		set B mandoupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 501 // dea corrosive pistol rounds
		set temp PISTOL_WEAPON
		set B novaupgrades[temp]
		set tempb B
		orvar B 1
	break
	
    // regular alien blaster
	case 504
		set temp PISTOL_WEAPON 
		set B novaupgrades[temp]
		set tempb B
		ifvarand B 16 xorvar B 16
	break
	// upgraded blaster
	case 505
		set temp PISTOL_WEAPON 
		set B novaupgrades[temp]
		set tempb B
		orvar B 16
	break
	// doubled pistol ammo
	case 506
		set temp PISTOL_WEAPON 
		set B novaupgrades[temp]
		set tempb B
		orvar B 32
	break
	
	case 511 // dea concussive shotgun
		set temp SHOTGUN_WEAPON
		set B novaupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 512 // dea LIFE LEACH shotgun
		set temp SHOTGUN_WEAPON
		set B novaupgrades[temp]
		set tempb B
		orvar B 2
	break
	
	case 515 // dea seeking blastballs
		set temp SHOTGUN_WEAPON
		set B novaupgrades[temp]
		set tempb B
		orvar B 8
	break
	
	case 521 // dea chaingun alt burstfire
		set temp CHAINGUN_WEAPON
		set B novaupgrades[temp]
		set tempb B
		orvar B 1
	break
	
	case 523 // dea chaingun max ammo
		set temp CHAINGUN_WEAPON
		set B novaupgrades[temp]
		orvar B 4
	break
	
	// executioner
	case 524
		set temp CHAINGUN_WEAPON
		set B novaupgrades[temp]
		orvar B 8
		orvar gotshock 1
	break
	
	// chain gang
	case 525
		set temp CHAINGUN_WEAPON
		set B novaupgrades[temp]
		orvar B 16
	break
	
	case 531 // dea smart bomb
		set temp RPG_WEAPON
		set B novaupgrades[temp]
		orvar B 1
	break
	
	case 541 // dea worm doll
		set temp HANDBOMB_WEAPON
		set B novaupgrades[temp]
		orvar B 1
	break
	
	case 551 // dea chrono-trigger
		set temp SHRINKER_WEAPON
		set B novaupgrades[temp]
		orvar B 1
	break
	
	case 552 // dea chrono-cross
		set temp SHRINKER_WEAPON
		set B novaupgrades[temp]
		orvar B 2
	break
	
	// plasma rifle big mag
	case 553
		set temp FREEZE_WEAPON
		set B novaupgrades[temp]
		orvar B 2
	break
	
	case 555 // eviscerator extended suffering
		set temp GROW_WEAPON
		set B novaupgrades[temp]
		orvar B 1
	break
	
	case 591 // dea sticky puddles
		set temp FREEZE_WEAPON
		set B novaupgrades[temp]
		orvar B 1
	break
	
	case 595 // 2X cloak
		add cloakmax 60
		ifge cloak 0 set cloak cloakmax
		sound GETATOMICHEALTH 
	break
	
	case 596 // ancestral rage
		set temp KNEE_WEAPON
		set B novaupgrades[temp]
		orvar B 2
		ifvarand gametips 65536 xorvar gametips 65536
	break

	case 600 // EMT TRAINING
		set B inven_upgrades
		ifvarand B 16 nullop else
		{
			orvar B 16 sound GETATOMICHEALTH 
		}
	break
	case 601 // UPGRADED MEDKIT
		set B inven_upgrades
		ifvarand B 1 nullop else
		{ orvar B 1 sound GETATOMICHEALTH }
	break
	case 602 // NORMAL GOGGLES
		set B inven_upgrades
		ifvarand B 2 { xorvar B 2 sound GETATOMICHEALTH }
	break
	case 603 // AIMBOT GOGGLES
		set B inven_upgrades
		ifvarand B 2 nullop else
		{ orvar B 2 sound GETATOMICHEALTH }
	break
	case 604 // COVER CUBE CRUSHER
		set B inven_upgrades
		ifvarand B 32 nullop else
		{ orvar B 32 sound GETATOMICHEALTH }
	break
	case 605 // HOLOBAGGER
		set B inven_upgrades
		ifvarand B 4 nullop else
		{ 
			orvar B 4 sound GETATOMICHEALTH 
			orvar fetchquest 512
		}
	break
	case 606 // NORMAL BOOTS
		set B inven_upgrades
		ifvarand B 8 { xorvar B 8 sound GETATOMICHEALTH }
	break
	case 607 // DASH BOOTS
		set B inven_upgrades
		ifvarand B 8 nullop else
		{ orvar B 8 sound GETATOMICHEALTH }
	break
	case 610 // 125 health
		add healthbuff 25
		setp[].max_player_health healthbuff
		addphealth 25
	break
	case 611 // coin magnet
		ifvarand perks 32 nullop else
		{ orvar perks 32 sound GETATOMICHEALTH }
	break
	case 612 // low health regen
		// orvar perks 16
		ife regenmax 0 set regenmax 20 else
		add regenmax 10
		sound GETATOMICHEALTH
	break
	
	case 613 // EDF rescue
		ifvarand perks 64 nullop else
		{ orvar perks 64 sound GETATOMICHEALTH }
	break
	
	case 614 // kick damage boost
		ifvarand perks 4 nullop else
		{ orvar perks 4 sound GETATOMICHEALTH }
	break
	
	case 615 // I-FRAMES, was RADAR
		// ifvarand perks 2 nullop else
		// { orvar perks 2
		// set radaron YES sound GETATOMICHEALTH }
		add iframes_max 8
		sound GETATOMICHEALTH
	break
	
	case 616 // no self-damage
		ifvarand perks 8 nullop else
		{ orvar perks 8 sound GETATOMICHEALTH }
	break
	
	case 617 // companion sideguns
		ifvarand perks 1 nullop else
		{ orvar perks 1 sound GETATOMICHEALTH }
	break
	
	case 620 // duke perk
		ifvarand perks 128 nullop else
		{ orvar perks 128 sound GETATOMICHEALTH }
	break
	
	case 621 // bombshell perk
		ifvarand perks 256 nullop else
		{ orvar perks 256 sound GETATOMICHEALTH }
	break
	
	case 622 // wes perk
		ifvarand perks 512 nullop else
		{ orvar perks 512 sound GETATOMICHEALTH }
	break
	
	case 623 // auto-revive
		ifvarand perks 1024 nullop else
		{ orvar perks 1024 sound GETATOMICHEALTH }
	break
	
	case 624 // bounty hunter
		ifvarand perks 4096 nullop else
		{ orvar perks 4096 sound GETATOMICHEALTH }
	break
	
	case 625 // dea anti-reptile
		ifvarand perks 8192 nullop else
		{ orvar perks 8192 sound GETATOMICHEALTH }
	break
	
	default 
		// set temp PISTOL_WEAPON
		// set B 0
		// set tempb 0
		set temp -1
	break
	endswitch
	ifge tempselect 600 // inventory upgrades
	{
		ifle tempselect 607
			set inven_upgrades B
	}
	else
	{
		ifn temp -1
		{
			ife pchar 0 setarray dukeupgrades[temp] B else
			ife pchar 1 setarray shellyupgrades[temp] B else
			ife pchar 2 setarray wesupgrades[temp] B else
			ife pchar 3 setarray mandoupgrades[temp] B else
			ife pchar 4 setarray novaupgrades[temp] B
			
			ifn pchar 2
			ifn pchar 4
			{
				ife temp SHRINKER_WEAPON
				{
					setarray dukeupgrades[temp] B
					setarray shellyupgrades[temp] B
					setarray mandoupgrades[temp] B
					
					ifvarand B 1
					{
						setarray weap_owned[51] YES
						setarray weap_owned[151] YES
						setarray weap_owned[351] YES
					}
					ifvarand B 2
					{
						setarray weap_owned[52] YES
						setarray weap_owned[152] YES
						setarray weap_owned[352] YES
					}
				}
				ife temp GROW_WEAPON
				{
					setarray dukeupgrades[temp] B
					setarray shellyupgrades[temp] B
					setarray mandoupgrades[temp] B
					
					ifvarand B 1
					{
						setarray weap_owned[55] YES
						setarray weap_owned[155] YES
						setarray weap_owned[355] YES
					}
					ifvarand B 2
					{
						setarray weap_owned[56] YES
						setarray weap_owned[156] YES
						setarray weap_owned[356] YES
					}
				}
				
			}
			ife temp PISTOL_WEAPON
			{
				ifvarand B 16
				{
					setarray weap_owned[5] YES
					setarray weap_owned[105] YES
					setarray weap_owned[205] YES
					setarray weap_owned[305] YES
					setarray weap_owned[405] YES
					
					set tempb shellyupgrades[PISTOL_WEAPON]
					orvar tempb 16
					setarray shellyupgrades[PISTOL_WEAPON] tempb
					set tempb dukeupgrades[PISTOL_WEAPON]
					orvar tempb 16
					setarray dukeupgrades[PISTOL_WEAPON] tempb
					set tempb wesupgrades[PISTOL_WEAPON]
					orvar tempb 16
					setarray wesupgrades[PISTOL_WEAPON] tempb
					set tempb mandoupgrades[PISTOL_WEAPON]
					orvar tempb 16
					setarray mandoupgrades[PISTOL_WEAPON] tempb
					set tempb novaupgrades[PISTOL_WEAPON]
					orvar tempb 16
					setarray novaupgrades[PISTOL_WEAPON] tempb
				}
				ifvarand B 32
				{
					setarray weap_owned[6] YES
					setarray weap_owned[106] YES
					setarray weap_owned[206] YES
					setarray weap_owned[306] YES
					setarray weap_owned[406] YES
					
					set tempb shellyupgrades[PISTOL_WEAPON]
					orvar tempb 32
					setarray shellyupgrades[PISTOL_WEAPON] tempb
					set tempb dukeupgrades[PISTOL_WEAPON]
					orvar tempb 32
					setarray dukeupgrades[PISTOL_WEAPON] tempb
					set tempb wesupgrades[PISTOL_WEAPON]
					orvar tempb 32
					setarray wesupgrades[PISTOL_WEAPON] tempb
					set tempb mandoupgrades[PISTOL_WEAPON]
					orvar tempb 32
					setarray mandoupgrades[PISTOL_WEAPON] tempb
					set tempb novaupgrades[PISTOL_WEAPON]
					orvar tempb 32
					setarray novaupgrades[PISTOL_WEAPON] tempb
				}
			}
			ife temp CHAINGUN_WEAPON
			{
				ifvarand B 4 // max ammo
				{
					setarray weap_owned[23] YES
					setarray weap_owned[123] YES
					setarray weap_owned[223] YES
					setarray weap_owned[323] YES
					setarray weap_owned[423] YES
					set tempb shellyupgrades[CHAINGUN_WEAPON]
					orvar tempb 4
					setarray shellyupgrades[CHAINGUN_WEAPON] tempb
					set tempb dukeupgrades[CHAINGUN_WEAPON]
					orvar tempb 4
					setarray dukeupgrades[CHAINGUN_WEAPON] tempb
					set tempb wesupgrades[CHAINGUN_WEAPON]
					orvar tempb 4
					setarray wesupgrades[CHAINGUN_WEAPON] tempb
					set tempb mandoupgrades[CHAINGUN_WEAPON]
					orvar tempb 4
					setarray mandoupgrades[CHAINGUN_WEAPON] tempb
					set tempb novaupgrades[CHAINGUN_WEAPON]
					orvar tempb 4
					setarray novaupgrades[CHAINGUN_WEAPON] tempb
					smaxammo CHAINGUN_WEAPON 400
				}
				ifvarand B 8 // executioner
				{
					setarray weap_owned[24] YES
					setarray weap_owned[124] YES
					setarray weap_owned[224] YES
					setarray weap_owned[324] YES
					setarray weap_owned[424] YES
					set tempb shellyupgrades[CHAINGUN_WEAPON]
					orvar tempb 8
					setarray shellyupgrades[CHAINGUN_WEAPON] tempb
					set tempb dukeupgrades[CHAINGUN_WEAPON]
					orvar tempb 8
					setarray dukeupgrades[CHAINGUN_WEAPON] tempb
					set tempb wesupgrades[CHAINGUN_WEAPON]
					orvar tempb 8
					setarray wesupgrades[CHAINGUN_WEAPON] tempb
					set tempb mandoupgrades[CHAINGUN_WEAPON]
					orvar tempb 8
					setarray mandoupgrades[CHAINGUN_WEAPON] tempb
					set tempb novaupgrades[CHAINGUN_WEAPON]
					orvar tempb 8
					setarray novaupgrades[CHAINGUN_WEAPON] tempb
					orvar gotshock 1
				}
				ifvarand B 16 // chain gang
				{
					setarray weap_owned[25] YES
					setarray weap_owned[125] YES
					setarray weap_owned[225] YES
					setarray weap_owned[325] YES
					setarray weap_owned[425] YES
					set tempb shellyupgrades[CHAINGUN_WEAPON]
					orvar tempb 16
					setarray shellyupgrades[CHAINGUN_WEAPON] tempb
					set tempb dukeupgrades[CHAINGUN_WEAPON]
					orvar tempb 16
					setarray dukeupgrades[CHAINGUN_WEAPON] tempb
					set tempb wesupgrades[CHAINGUN_WEAPON]
					orvar tempb 16
					setarray wesupgrades[CHAINGUN_WEAPON] tempb
					set tempb mandoupgrades[CHAINGUN_WEAPON]
					orvar tempb 16
					setarray mandoupgrades[CHAINGUN_WEAPON] tempb
					set tempb novaupgrades[CHAINGUN_WEAPON]
					orvar tempb 16
					setarray novaupgrades[CHAINGUN_WEAPON] tempb
				}
			}
			ife temp DEVISTATOR_WEAPON
			ifge pchar 3
			{
				setarray mandoupgrades[DEVISTATOR_WEAPON] B 
				setarray novaupgrades[DEVISTATOR_WEAPON] B 
				ifvarand B 1
				{
					setarray weap_owned[361] YES
					setarray weap_owned[461] YES
				}
				ifvarand B 2
				{
					setarray weap_owned[362] YES
					setarray weap_owned[462] YES
				}
				ifvarand B 4
				{
					setarray weap_owned[371] YES
					setarray weap_owned[471] YES
				}
				ifvarand B 8
				{
					setarray weap_owned[372] YES
					setarray weap_owned[472] YES
				}
			}
			ife temp TRIPBOMB_WEAPON
			{
				setarray dukeupgrades[temp] B
				setarray shellyupgrades[temp] B
				setarray wesupgrades[temp] B
				setarray mandoupgrades[temp] B
				setarray novaupgrades[temp] B
				
				ifvarand B 1
				{
					setarray weap_owned[81] YES
					setarray weap_owned[181] YES
					setarray weap_owned[281] YES
					setarray weap_owned[381] YES
					setarray weap_owned[481] YES
				}
				ifvarand B 2
				{
					setarray weap_owned[82] YES
					setarray weap_owned[182] YES
					setarray weap_owned[282] YES
					setarray weap_owned[382] YES
					setarray weap_owned[482] YES
				}
				ifvarand B 4
				{
					setarray weap_owned[83] YES
					setarray weap_owned[183] YES
					setarray weap_owned[283] YES
					setarray weap_owned[383] YES
					setarray weap_owned[483] YES
				}
			}
			ife temp FREEZE_WEAPON
			ifvarand B 2 // plasma big mag
			{
				set tempb shellyupgrades[FREEZE_WEAPON]
				orvar tempb 2
				setarray shellyupgrades[FREEZE_WEAPON] tempb
				set tempb dukeupgrades[FREEZE_WEAPON]
				orvar tempb 2
				setarray dukeupgrades[FREEZE_WEAPON] tempb
				set tempb wesupgrades[FREEZE_WEAPON]
				orvar tempb 2
				setarray wesupgrades[FREEZE_WEAPON] tempb
				set tempb mandoupgrades[FREEZE_WEAPON]
				orvar tempb 2
				setarray mandoupgrades[FREEZE_WEAPON] tempb
				set tempb novaupgrades[FREEZE_WEAPON]
				orvar tempb 2
				setarray novaupgrades[FREEZE_WEAPON] tempb
				
				
				setarray weap_owned[53] YES
				setarray weap_owned[153] YES
				setarray weap_owned[253] YES
				setarray weap_owned[353] YES
				setarray weap_owned[453] YES
			}
			ife temp KNEE_WEAPON	
			ifvarand B 1
			{
				set tempb shellyupgrades[KNEE_WEAPON]
				orvar tempb 1
				setarray shellyupgrades[KNEE_WEAPON] tempb
				set tempb dukeupgrades[KNEE_WEAPON]
				orvar tempb 1
				setarray dukeupgrades[KNEE_WEAPON] tempb
				set tempb wesupgrades[KNEE_WEAPON]
				orvar tempb 1
				setarray wesupgrades[KNEE_WEAPON] tempb
				set tempb mandoupgrades[KNEE_WEAPON]
				orvar tempb 1
				setarray mandoupgrades[KNEE_WEAPON] tempb
				set tempb novaupgrades[KNEE_WEAPON]
				orvar tempb 1
				setarray novaupgrades[KNEE_WEAPON] tempb
				setarray weap_owned[94] YES
				setarray weap_owned[194] YES
				setarray weap_owned[294] YES
				setarray weap_owned[394] YES
				setarray weap_owned[494] YES
			}
		}
		ife pchar 0 state dukeweapons else ife pchar 1 state shellyweapons
		else ife pchar 2 state wesweapons
		else ife pchar 3 state mandoweapons
		else ife pchar 4 state novaweapons
		
		ifn B tempb soundvar WEAPON2_SELECTSOUND // NEWSHOTCOCK 
	}
ends

defstate purchaseshield

// prevent purchase of shield mod if no shield is owned
// also prevent purchase of advanced shields
ifg tempselect 3
{
	ife es_type 0
	{
		quote 393
		break
	}
}

switch tempselect
case 1 set tempd 5000 break
case 2 set tempd 6000 break
case 3 set tempd 7000 break

case 4 ife gametype 0 ife vrtrip 0 set tempd 12000 else set tempd 16000 break
case 5 ife gametype 0 ife vrtrip 0 set tempd 16000 else set tempd 20000 break
case 6 ife gametype 0 ife vrtrip 0 set tempd 20000 else set tempd 24000 break

// 7-9 are shield mods

case 7 set tempd 8000 break
case 8 set tempd 8000 break
case 9 set tempd 8000 break
endswitch

// discounts

set temp 1
ifl tempselect 7
{
	state shield_discount
}
else
ifl tempselect 10
{
	state nova_discount
}

// ife gametype 0 ife myshelly -1 { mul tempd 2 div tempd 3 }

ifge credits tempd
{
	state randgetweapsnds
	sub credits tempd
	sub lastcredits tempd
	setarray es_owned[tempselect] YES
	set es_battery -1
	ife wave 0 set wave 1
}
else quote 361

ends

defstate purchaseweapon

ifge credits tempd
{
	// state randgetweapsnds
	sub credits tempd
	sub lastcredits tempd
	switch tempc // some purchases are repeatable
	case  510 // max health buy 
	case  512 // max regen buy
	case  515 // I-frames buy
	case  495 // increased cloak
		set tempH weap_owned[tempc]
		add tempH 1
		setarray weap_owned[tempc] tempH
	break
	default
		setarray weap_owned[tempc] YES
	break
	endswitch
	
	ifge sprite[].extra 75
	ife checkpoints NO
	state autosave
	
	switch tempselect
	case 100 set award_screen 9912 set award_string 324 sound OGUS_GOTCHA break // pistol
	case 101 set award_screen 9933 set award_string 325 sound OGUS_SOLD break // GLOCK 18
	case 102
		set award_screen 9913 set award_string 326 sound OGUS_DONTASK break // AP ROUNDS
	
	case 103 set award_screen 9924 set award_string 327 sound OGUS_SOLD break // DUAL WIELDING
	
	case 104 case 204 case 304 case 404 case 504
		set award_screen 9907 set award_string 250 sound OGUS_SOLD break // alien blaster
	
	case 105 case 205 case 305 case 405 case 505
		set award_screen 9908 set award_string 251 sound OGUS_DONTASK break // blaster upgrade
	case 106 case 206 case 306 case 406 case 506
		set award_screen 9906 set award_string 791 sound OGUS_SOLD break // double pistol ammo
	case 107 case 207 case 307 case 507
		set award_screen 12536 set award_string 1352  sound OGUS_SOLD break // + pistol reload speed
	case 110 set award_screen 9940 set award_string 331 sound OGUS_GOTCHA break // shotgun
	case 111 set award_screen 9928 set award_string 218 sound OGUS_SOLD break // explosive shells
	case 112 set award_screen 16593 set award_string 2880 sound OGUS_SOLD break // DB shotty
	case 113 set award_screen 16594 set award_string 1352 sound OGUS_GAMEBREAKER break // + reload speed
	case 114 set award_screen 9935 set award_string 309 sound OGUS_DONTASK break // atomic shotty
	case 115 case 416 set award_screen 9909 set award_string 392 sound OGUS_DONTASK break // rad shells
	case 116 set award_screen 9947 set award_string 337 sound OGUS_DONTASK break // burst fire
	case 120 set award_screen 9922 set award_string 54 sound OGUS_GOTCHA break // chaingun
	case 121 set award_screen 9934 set award_string 339 sound OGUS_SOLD break // minigun
	case 122 case 222 case 322 case 422
		set award_screen 9948 set award_string 326 sound OGUS_DONTASK break // AP chaingun
	case 123 case 323 case 423 case 523
		set award_screen 9950 set award_string 340 sound OGUS_SOLD break // double chain ammo
	case 124 case 324 case 424 case 524
		set award_screen 9910 set award_string 1121 sound OGUS_GAMEBREAKER break // executioner
	case 125 case 225 case 325 case 425 case 525
		set award_screen 16590 set award_string 1156 sound OGUS_DONTELL break // chain gang
	case 130
		set award_screen 9919 set award_string 56 sound OGUS_SOLD break // RPG
	case 131 set award_screen 9943 set award_string 344 sound OGUS_SOLD break
	case 132 set award_screen 9952 set award_string 345 sound OGUS_SOLD break
	case 133 set award_screen 9953 set award_string 346 sound OGUS_DONTELL break
	case 140 set award_screen 9954 set award_string 370 sound OGUS_GOTCHA break // PIPEBOMB
	case 141
		set award_screen 9955 set award_string 371 sound OGUS_DONTELL break
	case 142
		set award_screen 16532 set award_string 1119 sound OGUS_DONTELL break // smart bomblets
	case 143
		set award_screen 20975 set award_string 2005 sound OGUS_SOLD break // big boom
	case 150 case 450 set award_screen 9911 set award_string 385 sound OGUS_SOLD break // SHRINKER
	case 151 case 451 set award_screen 9914 set award_string 386 sound OGUS_GAMEBREAKER break // BMFG
	case 152 case 452 set award_screen 9982 set award_string 1117 sound OGUS_GAMEBREAKER break // BMFG altfire
	case 153 case 253 case 353 case 453 case 553
		set award_screen 16586 set award_string 1125 sound OGUS_SOLD break // plasma double ammo
	case 154 case 454 set award_screen 9920 set award_string 387 sound OGUS_SOLD break // EXPANDER
	case 155 case 455 set award_screen 16536 set award_string 388 sound OGUS_DONTELL break // fan service
	case 156 case 256 case 456 set award_screen 18825 set award_string 2890 sound OGUS_GAMEBREAKER break // fan service
	case 157 case 257 case 457 set award_screen 16587 set award_string 1124 sound OGUS_SOLD break // plasma rifle
	
	case 160 set award_screen 9923 set award_string 376 sound OGUS_SOLD break // DEVASTATOR
	case 360 set award_screen 19268 set award_string 376 sound OGUS_SOLD break // DEVASTATOR
	case 460 case 560 set award_screen 20986 set award_string 1388 sound OGUS_SOLD break // ANNIHILATOR
	case 461 case 561 set award_screen 16590 set award_string 1389 sound OGUS_SOLD break // ANNIHILATOR
	case 161 set award_screen 16537 set award_string 377 sound OGUS_DONTELL break
	case 162
		set award_screen 16538 set award_string 1118 sound OGUS_DONTELL break // QUAD BARRELS
	case 462 case 562 set award_screen 20987 set award_string 1118 sound OGUS_DONTELL break // QUAD BARRELS
	case 362 set award_screen 19267 set award_string 1118 sound OGUS_DONTELL break // QUAD BARRELS
	case 170 set award_screen 9963 set award_string 383 sound OGUS_SOLD break // RAILGUN
	case 171 case 371
		set award_screen 9964 set award_string 384 sound OGUS_DONTELL break // BARRET
	case 172 case 272 case 372
		set award_screen 16585 set award_string 1123 sound OGUS_SOLD break // BARRET SEMI-AUTO
	case 180 case 280 case 380 case 480 case 580 set award_screen 9962 set award_string 380 sound OGUS_DONTASK break // TRIPBOMBS
	case 181 case 281 case 381 case 481 case 581 set award_screen 9960 set award_string 381 sound OGUS_SOLD break
	case 182 case 282 case 382 case 482 case 582 set award_screen 9961 set award_string 382 sound OGUS_SOLD break
	case 183 case 283 case 383 case 483 case 583 set award_screen 16588 set award_string 1128 sound OGUS_SOLD break
	case 190 set award_screen 9931 set award_string 366 sound OGUS_GOTCHA break // FREEZER
	case 191 set award_screen 9932 set award_string 367 sound OGUS_SOLD break // ICEBEAM
	case 194 case 294 case 394 case 494 case 594
		set award_screen 16531 set award_string 1122 sound OGUS_SOLD break // DEFLECT HITSCAN
	
	case 200 set award_screen 9915 set award_string 330 sound OGUS_GOTCHA break // pistol
	case 201 set award_screen 9933 set award_string 325 sound OGUS_SOLD break
	case 202 set award_screen 9916 set award_string 326 sound OGUS_DONTASK break
	case 203 set award_screen 9925 set award_string 327 sound OGUS_SOLD break
	case 210 set award_screen 9941 set award_string 331 sound OGUS_GOTCHA break // shotgun
	case 211 set award_screen 9928 set award_string 190 sound OGUS_DONTASK break
	case 212 case 312 set award_screen 16592 set award_string 2870 sound OGUS_DONTASK break // semi-auto shotgun
	case 214 // case 314
		set award_screen 9921 set award_string 333 sound OGUS_SOLD break // bow
	case 215
		set award_screen 9946 set award_string 332 sound OGUS_DONTELL break // explosive arrows
	case 315
		set award_screen 19279 set award_string 1235 sound OGUS_DONTELL break // RADIOACTIVE arrows
	case 216 case 316
		set award_screen 9944 set award_string 334 sound OGUS_SOLD break // multishot
	case 217
		set award_screen 9945 set award_string 335 sound OGUS_DONTASK break // electric
	case 317
		set award_screen 19278 set award_string 1234 sound OGUS_DONTASK break // elemental
	case 220 set award_screen 9917 set award_string 341 sound OGUS_GOTCHA break // chaingun
	case 320 set award_screen 19266 set award_string 1236 sound OGUS_GOTCHA break // uzi
	case 221 set award_screen 9926 set award_string 342 sound OGUS_GAMEBREAKER break
	
	case 223 set award_screen 9949 set award_string 340 sound OGUS_SOLD break
	case 224 set award_screen 9910 set award_string 1121 sound OGUS_GAMEBREAKER break // SHOCK RIFLE
	case 230 set award_screen 9951 set award_string 56 sound OGUS_GOTCHA break // RPG
	case 330 set award_screen 19263 set award_string 1237 sound OGUS_GOTCHA break // Wes RPG
	case 231 set award_screen 9943 set award_string 344 sound OGUS_SOLD break
	case 232 set award_screen 9952 set award_string 345 sound OGUS_SOLD break
	case 233 set award_screen 9953 set award_string 346 sound OGUS_DONTELL break
	case 240 set award_screen 9956 set award_string 372 sound OGUS_SOLD break // TURRETS
	case 241 set award_screen 9957 set award_string 375 sound OGUS_DONTELL break
	case 242 set award_screen 16533 set award_string 1120 sound OGUS_DONTELL break //  armored turrets
	case 340 set award_screen 19261 set award_string 1238 sound OGUS_SOLD break // bombs
	case 341 set award_screen 19258 set award_string 371 sound OGUS_DONTELL break // cluster
	case 342 set award_screen 19259 set award_string 1119 sound OGUS_DONTELL break // seeking
	case 250 set award_screen 9911 set award_string 385 sound OGUS_GOTCHA break // SHRINKER
	case 251 set award_screen 9914 set award_string 386 sound OGUS_GAMEBREAKER break // BMFG
	case 351 set award_screen 19271 set award_string 1247 sound OGUS_GAMEBREAKER break // blood zombie
	case 252 set award_screen 9982 set award_string 1117 sound OGUS_GAMEBREAKER break // BMFG altfire
	case 254 set award_screen 9920 set award_string 387 sound OGUS_SOLD break // EXPANDER
	case 255 set award_screen 16536 set award_string 388 sound OGUS_DONTELL break // fan service
	case 355 set award_screen 19270 set award_string 1246 sound OGUS_DONTELL break // SCAR full auto
	case 260 set award_screen 9927 set award_string 378 sound OGUS_SOLD break // DEVASTATOR
	case 261 set award_screen 9959 set award_string 379 sound OGUS_DONTELL break
	case 262 set award_screen 16538 set award_string 1118 sound OGUS_DONTELL break // QUAD BARRELS
	case 270 set award_screen 9963 set award_string 383 sound OGUS_SOLD break // RAILGUN
	case 271 set award_screen 9964 set award_string 384 sound OGUS_GAMEBREAKER break // BARRET
	case 290 set award_screen 9929 set award_string 368 sound OGUS_SOLD break // INCINERATOR
	case 291 set award_screen 9930 set award_string 369 sound OGUS_DONTELL break // FIREBEAM
	case 391 set award_screen 19269 set award_string 1242 sound OGUS_DONTELL break // FASTER BL
	case 302 set award_screen 9948 set award_string 326 sound OGUS_DONTASK break // AP ROUNDS
	case 402 set award_screen 19255 set award_string 1242 sound OGUS_DONTELL break // +ROF on wrist
	case 412 set award_screen 19253 set award_string 1381 sound OGUS_SOLD break // mando shotty altfire
	case 414 set award_screen 20988 set award_string 1385 sound OGUS_SOLD break // mando DB shotty
	case 415 set award_screen 20989 set award_string 1386 sound OGUS_GAMEBREAKER break // shieldbreaker rounds
	case 420 set award_screen 19252 set award_string 1382 sound OGUS_SOLD break // mando slugthrower
	case 421 set award_screen 20978 set award_string 327 sound OGUS_DONTELL break // dual wielding
	case 430 set award_screen 19368 set award_string 1384 sound OGUS_SOLD break // mando RPG
	case 431 set award_screen 20977 set award_string 1399 sound OGUS_GAMEBREAKER break // rpg doubleboom
	case 432 set award_screen 19369 set award_string 1383 sound OGUS_DONTELL break // burst altfire RPG
	case 440 set award_screen 20990 set award_string 1375 sound OGUS_SOLD break // thermal detonators
	case 441 set award_screen 20991 set award_string 1387 sound OGUS_DONTASK break // sticky detonators
	case 470 case 570 set award_screen 20985 set award_string 1373 sound OGUS_SOLD break // disintegrator
	case 471 case 571 set award_screen 20983 set award_string 1390 sound OGUS_DONTELL break // with splash zone
	case 472 case 572 set award_screen 20984 set award_string 1391 sound OGUS_GAMEBREAKER break // with smart ricochet
	case 490 set award_screen 20980 set award_string 1392 sound OGUS_SOLD break // carbonite rifle
	case 491 set award_screen 20979 set award_string 1393 sound OGUS_GOTCHA break // carbonite mist altfire
	case 492 set award_screen 20982 set award_string 1394 sound OGUS_DONTELL break // brain washer
	case 501 set award_screen 22299 set award_string 3507 sound OGUS_SOLD break // dea corrosive pistol rounds
	case 511 set award_screen 22301 set award_string 3513 sound OGUS_GOTCHA break // dea concussive shotgun
	case 512 set award_screen 22300 set award_string 3518 sound OGUS_GOTCHA break // dea healing shotgun
	case 515 set award_screen 22302 set award_string 3523 sound OGUS_SOLD break // dea seeking blastballs
	case 521 set award_screen 22303 set award_string 3527 sound OGUS_DONTELL break // dea altfire burst chaingun
	case 531 set award_screen 22304 set award_string 3533 sound OGUS_GAMEBREAKER break // smart bomb
	case 541 set award_screen 22319 set award_string 3567 sound OGUS_GAMEBREAKER break // hypno-doll
	case 551 set award_screen 22305 set award_string 3540 sound OGUS_SOLD break
	case 552 set award_screen 22306 set award_string 3545 sound OGUS_DONTELL break
	case 555 set award_screen 22308 set award_string 3560 sound OGUS_GOTCHA break // dea eviscerator extended
	case 591 set award_screen 22307 set award_string 3554 sound OGUS_SOLD break // dea sticky residue
	case 595 set award_screen 22310 set award_string 3575 sound OGUS_SOLD break // increased cloak
	case 596 set award_screen 22312 set award_string 3589 sound OGUS_SOLD break // ANCESTRAL RAGE
	case 600 set award_screen 14327 set award_string 2680 break // EMT TRAINING
	case 601 set award_screen 14328 set award_string 702 break // UPGRADED MEDKIT
	case 602 set award_screen 14329 set award_string 703 break // NORMAL GOGGLES
	case 603 set award_screen 14330 set award_string 704 break // AIMBOT GOGGLES
	case 604 set award_screen 14324 set award_string 705 break // COVER CUBE CRUSHER
	case 605
		ife pchar 4 { set award_screen 22314 set award_string 3596 } else
		ife pchar 3 { set award_screen 20976 set award_string 1402 } else
	    ife pchar 2 { set award_screen 18826 set award_string 2900 }
		else
		{ set award_screen 14333 set award_string 706 }
	break // HOLOBAGGER
	case 606 set award_screen 14331 set award_string 707 break // NORMAL BOOTS
	case 607 set award_screen 14332 set award_string 708 break // DASH BOOTS
	case 610 set award_screen 15353 set award_string 779 break // MAX HEALTH 125
	case 611 set award_screen 15354 set award_string 780 break // COIN MAGNET
	case 612 set award_screen 15355 set award_string 781 break // LOW HEALTH REGEN
	case 613 set award_screen 14326 set award_string 1087 break // EDF Rescue
	case 614 set award_screen 15358 set award_string 782 break // QUICKER KICKS
	case 615 set award_screen 19257 set award_string 1287 break // I-FRAMES, was RADAR
	case 616 set award_screen 16535 set award_string 784 break // NO SELF DAMAGE
	case 617 set award_screen 9981 set award_string 785 break // COMPANION SIDEGUNS

	case 620 set award_screen 16595 set award_string 3130 break // DUKE PERK
	case 621 set award_screen 16596 set award_string 3140 break // BOMBSHELL PERK
	case 622 set award_screen 16597 set award_string 3150 break // WES PERK
	case 623 set award_screen 16598 set award_string 3160 break // AUTO-REVIVE
	case 624 set award_screen 20981 set award_string 1395 break // bounty board
	case 625 set award_screen 22311 set award_string 3581 break // anti-reptile
	endswitch
}
else quote 361
	

ends

state awardcode

	ifl award_time 30 state in_menu
	else ife award_time 30 setp[].movement_lock 0
	ifg subtitle_time 0
	{
		quote 311
		ifhitspace add tempselect 1
		ifg tempselect 20 { set subtitle_time 0 setp[].fta 0 }
	}
	ife subtitle_time 0
	add award_time 1
	ife award_time 1 // give reward
	{
		// note that in most cases, upgrade flags are set in state purchaseweapon, not here
		globalsound WEAPON_UPGRADE
		
		switch award_screen
		case 9907 case 9908
			// set temp NO ife attmode YES set temp YES 
			// ifg LASERAMMO 10 set temp NO
			// ife temp YES 
			spawn LASERPISTOL
		break
		case 9910
			// set temp YES
			// ife player[].gotweapon 3 YES ifg player[].ammo_amount 3 10 set temp NO
			// ife temp YES 
			spawn SHOCKRIFLESPRITE
		break
		case 9911
		case 19271
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 6 YES ifg player[].ammo_amount 6 10 set temp NO
			// ife temp YES 
			spawn SHRINKERSPRITE
		break
		case 9914
			// set temp YES
			// ife player[].gotweapon 6 YES ifg player[].ammo_amount 6 10 set temp NO
			// ife temp YES 
			spawn SHRINKERSPRITE
		break
		case 9912 case 9933 case 9913 case 9924
		case 9915 case 9916 case 9925
			// set temp YES
			// ife player[].gotweapon 1 YES ifg player[].ammo_amount 1 10 set temp NO
			// ife temp YES 
			spawn FIRSTGUNSPRITE
		break
		case 9920
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 11 YES ifg player[].ammo_amount 11 10 set temp NO
			// ife temp YES 
			spawn GROWSPRITEICON
		break
		case 9940 case 9935 case 9928 case 9947
		case 9941 case 9909
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 2 YES ifg player[].ammo_amount 2 10 set temp NO
			// ife temp YES 
			spawn SHOTGUNSPRITE
		break
		case 8909  // ATOMIC SHOTTY
			// setarray dukeupgrades[SHOTGUN_WEAPON] 4
			ifvarand charsel 1
			{
				set B dukeupgrades[SHOTGUN_WEAPON]
				orvar B 4
				setarray dukeupgrades[SHOTGUN_WEAPON] B
				setarray weap_owned[14] YES
			}
			// set temp NO ife attmode YES set temp YES
			// ife player[].gotweapon 2 YES ifg player[].ammo_amount 2 10 set temp NO
			// ife temp YES 
			spawn SHOTGUNSPRITE
			ifvarand charsel 1
			set pchar 0
			
		break
		case 9922 case 9934 case 9948 case 9950
		case 9917 case 9926 case 9949
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 3 YES ifg player[].ammo_amount 3 10 set temp NO
			// ife temp YES 
			spawn CHAINGUNSPRITE
		break
		case 9921
			spawn BOWSPRITE
		break
		case 9944 case 9945 case 9946
		case 19279 case 19278
			spawn BOWSPRITE
			// spawn QUIVERSPRITE
		break
		case 9919 case 9943 case 9952 case 9953
		case 9951
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 4 YES ifg player[].ammo_amount 4 10 set temp NO
			// ife temp YES 
			spawn RPGSPRITE
		break
		case 9923 case 16537 case 16538
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 7 YES ifg player[].ammo_amount 7 10 set temp NO
			// ife temp YES 
			spawn DEVISTATORSPRITE
		break
		case 9927 case 9959	
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 7 YES ifg player[].ammo_amount 7 10 set temp NO
			// ife temp YES 
			spawn DEVISTATORSPRITE
		break
		
		case 9930
		case 9932
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 9 YES ifg player[].ammo_amount 9 10 set temp NO
			// ife temp YES
			// {
				// spawn FREEZESPRITE spawn FREEZEAMMO
			// }
			spawn FREEZESPRITE
		break
		case 9954 case 9955
		case 9956 case 9957
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 5 YES ifg player[].ammo_amount 5 10 set temp NO
			// ife temp YES 
			spawn HBOMBAMMO
		break
		case 9960 case 9961 case 9962 case 16588
			// set temp NO ife attmode YES set temp YES 
			// ife player[].gotweapon 8 YES ifg player[].ammo_amount 8 10 set temp NO
			// ife temp YES
			// {
			spawn TRIPBOMBSPRITE
			spawn TRIPBOMBSPRITE
			// }
		break
		
		case 9963 case 9964
			// set temp NO ife attmode YES set temp YES 
			// ife temp YES 
			spawn RAILGUNSPRITE
		break
		
		case VENDORUPGRADE
			spawn VENDORUPGRADE
		break
/*
		case 14327 // REGULAR MEDKIT
		case 14328 // UPGRADED MEDKIT
			set temp NO ife attmode YES set temp YES ife temp YES spawn FIRSTAID
		break 
*/	
		case 14329 // NORMAL GOGGLES
		case 14330 // AIMBOT GOGGLES
			// set temp NO ife attmode YES set temp YES ife temp YES 
			spawn HEATSENSOR
		break
		case 14324 // COVER CUBE CRUSHER
			spawn COVERSPRITE
		break
		
		case 14333 // HOLOBAGGER
		case 18826 // NAAMAH++
			// set temp NO ife attmode YES set temp YES ife temp YES 
			spawn HOLODUKE
		break 
		// case 14331 // NORMAL BOOTS
		case 14332 // DASH BOOTS
			// set temp NO ife attmode YES set temp YES ife temp YES 
			spawn BOOTS
		break
		
		case 16531
			ife player[].gotweapon 11 YES ifg player[].ammo_amount 11 10 nullop else
			spawn SABERSPRITE
		break
		case 16536
			ife player[].gotweapon 11 YES ifg player[].ammo_amount 11 10 nullop else
			spawn GROWSPRITEICON
		break
		
		case 16586 case 16587
			// ife player[].gotweapon 9 YES ifg player[].ammo_amount 9 10
			// ifvarand gotplasma 1 nullop else
			spawn PLASMASPRITE
		break
		
		case 16593 case 20988 case 20989
			spawn DBSPRITE
		break
	
		endswitch
	}
	ife award_time 75 { set award_time 0 set award_screen 0 set tempselect -1 }
	

ends

state vendor_tab

	ifl cursorx 47 { set tempselect -1 break }
	ifg cursorx 272 { set tempselect -1 break }
	set tempselect cursorx 
	sub tempselect 47 // min 0, max 225
	mul tempselect 10
	div tempselect 225 // yields value between 0 and 9
	ifg tempselect 9 set tempselect 9
	ife pchar 0 add tempselect 1000 else 
	ife pchar 1 add tempselect 2000 else
	ife pchar 2 add tempselect 3000 else
	ife pchar 3 add tempselect 4000 else
	ife pchar 4 add tempselect 5000
	
ends

defstate set_item_number

	ifge cursory 30 ifle cursory 44
	{
		ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
		else set tempselect -1
		break
	}
	else ifge cursory 49 ifle cursory 62
	{
		state vendor_tab
		break
	}
	
	ifl cursorx 60 { set tempselect -1 break }
	ifge cursorx 255 { set tempselect -1 break }
	ifl cursory 85 { set tempselect -1 break }
	ifg cursory 163 { set tempselect -1 break }
	
	switch vendor_screen
	case 13 case 14
	case 16 case 17 case 18
	case 23 case 24
	case 26 case 27 case 28
	case 33 case 34
	case 36 case 37 case 38
	case 43 case 44
	case 46 case 47 case 48
	case 53 case 54
	case 56 case 57 case 58
		// one row settings
		ifl cursory 95 set tempselect -1 else
		ifg cursory 125 set tempselect -1 else
		ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
		ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
		ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
		{
			set tempselect vendor_screen
			mul tempselect 10
			ifge cursorx 110 add tempselect 1
			ifge cursorx 160 add tempselect 1
			ifge cursorx 210 add tempselect 1
			
			// grayed out item deselect hack
			
			ife tempselect 142 // smart bomblets
			{
				ifvarand dukeupgrades[HANDBOMB_WEAPON] 1 nullop else
				set tempselect -1
				// don't allow smart bomblets without cluster bomb upgrade
			}
			ife tempselect 342 // smart bomblets
			{
				ifvarand wesupgrades[HANDBOMB_WEAPON] 1 nullop else
				set tempselect -1
				// don't allow smart bomblets without cluster bomb upgrade
			}
			ife tempselect 172 // barret semi-auto
			{
				ifvarand dukeupgrades[DEVISTATOR_WEAPON] 4 nullop else
				set tempselect -1
			}
			ife tempselect 272 // barret semi-auto
			{
				ifvarand shellyupgrades[DEVISTATOR_WEAPON] 4 nullop else
				set tempselect -1
			}
			ife tempselect 372 // barret semi-auto
			{
				ifvarand wesupgrades[DEVISTATOR_WEAPON] 4 nullop else
				set tempselect -1
			}
			ife tempselect 133 // multirockets
			{
				ifvarand dukeupgrades[RPG_WEAPON] 1 nullop else
				set tempselect -1
				// don't allow mulrirockets without smart launcher
			}
			ife tempselect 233 // multirockets
			{
				ifvarand shellyupgrades[RPG_WEAPON] 1 nullop else
				set tempselect -1
				// don't allow mulrirockets without smart launcher
			}
			
		}
		
	break
	case 10 case 11 case 12 case 15 case 19
	case 20 case 21 case 22 case 25 case 29
	case 30 case 31 case 32 case 35 case 39
	case 40 case 41 case 42 case 45 case 49
	case 50 case 51 case 52 case 55 case 59
		// two row settings
		ifg cursory 115 ifl cursory 133 set tempselect -1 else
		ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
		ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
		ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
		{
			set tempselect vendor_screen
			mul tempselect 10
			ifge cursorx 110 add tempselect 1
			ifge cursorx 160 add tempselect 1
			ifge cursorx 210 add tempselect 1
			ifge cursory 133 add tempselect 4
		}
		
		ife tempselect 115 // radioactive shells
		{
			ifvarand dukeupgrades[SHOTGUN_WEAPON] 4 nullop else
			set tempselect -1
			// don't allow rad shells without atomic shotty
		}
		ife tempselect 116 // burstfire
		{
			ifvarand dukeupgrades[SHOTGUN_WEAPON] 4 nullop else
			set tempselect -1
			// don't allow burstfire without atomic shotty
		}
		ife tempselect 152 // BMFG altfire
		{
			ifvarand dukeupgrades[SHRINKER_WEAPON] 1 nullop else
			set tempselect -1
			// don't allow BMFG altfire without BMFG
		}
		ife tempselect 252 // BMFG altfire
		{
			ifvarand dukeupgrades[SHRINKER_WEAPON] 1 nullop else
			ifvarand shellyupgrades[SHRINKER_WEAPON] 1 nullop else
			set tempselect -1
			// don't allow BMFG altfire without BMFG
		}
		ife tempselect 452 // BMFG altfire
		{
			ifvarand dukeupgrades[SHRINKER_WEAPON] 1 nullop else
			ifvarand mandoupgrades[SHRINKER_WEAPON] 1 nullop else
			set tempselect -1
			// don't allow BMFG altfire without BMFG
		}
		ife tempselect 125 // chain gang
		{
			ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 nullop else
			set tempselect -1
		}
		ife tempselect 225 // chain gang
		{
			ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 nullop else
			set tempselect -1
		}
		ife tempselect 325 // chain gang
		{
			ifvarand wesupgrades[CHAINGUN_WEAPON] 8 nullop else
			set tempselect -1
		}
		ife tempselect 425 // chain gang
		{
			ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 nullop else
			set tempselect -1
		}
		ife tempselect 525 // chain gang
		{
			ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 nullop else
			set tempselect -1
		}
	break
	// case 40 case 41 case 42 case 43 case 44 case 45 case 46 case 47 case 48 case 49
		// ifl cursory 95 set tempselect -1 else
		// ifg cursory 125 set tempselect -1 else
		// ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
		// ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
		// ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
		// {
			// set tempselect vendor_screen
			// mul tempselect 10
			// ifge cursorx 110 add tempselect 1
			// ifge cursorx 160 add tempselect 1
			// ifge cursorx 210 add tempselect 1
		// }
	// break
	
	default set tempselect -1 break
	endswitch
	

ends

defstate vendorcode

	ifl vendor_screen 0
	{
		add vendor_screen 1
		ife vendor_screen 0 set vendor_screen 1
		ife vendor_screen -11 
		{
			ife atvendor 0 ife vendorupgrade NO { set vendor_screen 4 break }
			
			// ifl lastscreen 10 set lastscreen 10
			
			ife pchar 0 set vendor_screen lastscreen else
			{
				set vendor_screen lastscreen 
				ifge vendor_screen 10 
				{
					add vendor_screen 10 
					ife pchar 2 add vendor_screen 10 else
					ife pchar 3 add vendor_screen 20 else
					ife pchar 4 add vendor_screen 30
				}
			}
		}
		break
	}
	
	state in_menu
	
	ife vendor_screen 8
	{
		ifg press_wheel 0 
		{
			sub press_wheel 1
			ife press_wheel 0
			{
				set vendor_screen 0
				setp[].movement_lock 0
			}
		}
		// weapon wheel handled separately since it's not really a vendor screen
		set tempselect -1
		ifl cursorx 38 break
		ifg cursorx 276 break
		ifl cursory 47 break
		ifg cursory 172 break
		
		ifle cursory 76 // first row
		{
			set tempselect cursorx
			sub tempselect 38
			div tempselect 48
			add tempselect 1
			
		} else
		ifle cursory 110 // second row
		{
			set tempselect cursorx
			sub tempselect 38
			div tempselect 48
			add tempselect 6
		} else
		ifle cursory 142 // third row
		{
			set tempselect cursorx
			sub tempselect 38
			div tempselect 48
			add tempselect 11
		}
		else
		ifle cursory 171
		ifge cursorx 134 ifle cursorx 181 set tempselect 16
		else set tempselect -1
		
		ifl press_wheel 2
		{
			set D NO
			switch tempselect
			case 1 // tripbomb
				ifn player[].curr_weapon TRIPBOMB_WEAPON
				ifg player[].ammo_amount TRIPBOMB_WEAPON 0
				{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon TRIPBOMB_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire TRIPBOMB_WEAPON
					set D YES
				}
			break
			case 2 // pipebombs
				ifn player[].curr_weapon HANDBOMB_WEAPON
				ifg player[].ammo_amount HANDBOMB_WEAPON 0
				{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon HANDBOMB_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire HANDBOMB_WEAPON
					set D YES
				}
			break
			case 3 // melee
				ifn player[].curr_weapon KNEE_WEAPON
				{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon KNEE_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire KNEE_WEAPON
					set D YES
				}
			break
			case 4 // regular pistol
				
				ife player[].gotweapon PISTOL_WEAPON YES
				{
					ife LASERMODE 0 ife player[].curr_weapon PISTOL_WEAPON nullop else
					{
						ifg player[].ammo_amount PISTOL_WEAPON 0
						set temp YES
						else ifg pistolammo 0 set temp YES
						ife temp YES
						{
							setp[].last_weapon player[].curr_weapon
							setp[].curr_weapon PISTOL_WEAPON
							setp[].weapon_pos -1
							setp[].wantweaponfire PISTOL_WEAPON
							set D YES
							ife LASERMODE 3 set LASERMODE -3 // comm gun
							ife LASERMODE YES set LASERMODE 2 // laser pistol	
						}
					}
				}
			break
			case 5 // laser pistol or commander gun
				ife LASERAMMO 0 ife COMMAMMO 0 nullop else
				{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon PISTOL_WEAPON
					setp[].wantweaponfire PISTOL_WEAPON
					ife LASERMODE 0
					{
						set D YES
						ifg COMMAMMO 0 set LASERMODE -2 else
						set LASERMODE -1
						setp[].weapon_pos -1
					}
					else
					ife LASERMODE 1 ifg COMMAMMO 0
					{
						set LASERMODE -2
						set D YES
						setp[].weapon_pos -1
					}
					else
					ife LASERMODE 3 ifg LASERAMMO 0
					{
						set LASERMODE -1
						set D YES
						setp[].weapon_pos -1
					}
				}
			break
			case 6 // RPG
				ifn player[].curr_weapon RPG_WEAPON
				ifg player[].ammo_amount RPG_WEAPON 0
				{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon RPG_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire RPG_WEAPON
					set D YES
				}
				else
				ife player[].curr_weapon RPG_WEAPON
				{
					ifg nukeamount 0 ife nukeselect 0
					{
						set nukeselect -1
						setp[].weapon_pos -1
						set D YES
					}
					else ife nukeselect YES
					ifg player[].ammo_amount RPG_WEAPON 0
					{
						set nukeselect -2
						setp[].weapon_pos -1
						set D YES
					}
				}
			break
			case 7 // chaingun
				ifn player[].curr_weapon CHAINGUN_WEAPON
				ifg player[].ammo_amount CHAINGUN_WEAPON 0
				{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon CHAINGUN_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire CHAINGUN_WEAPON
					set D YES
				}
				else
				ifvarand gotshock 1
				ife player[].curr_weapon CHAINGUN_WEAPON
				{
					ifvarand gotshock 2
					{
						set D YES
						setp[].weapon_pos -1
						orvar gotshock 8
					}
					else
					{
						set D YES
						setp[].weapon_pos -1
						orvar gotshock 4
					}
				}
			break
			case 9 // shotgun
				ifn player[].curr_weapon SHOTGUN_WEAPON
				{
					ifg player[].ammo_amount SHOTGUN_WEAPON 1
					{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon SHOTGUN_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire SHOTGUN_WEAPON
					ifvarand gotbow 2 orvar gotbow 8
					ifvarand gotDB 2 orvar gotDB 8
					set D YES
					}
				}
				else
				{
					ifg player[].ammo_amount SHOTGUN_WEAPON 1
					{
						set temp NO
						ifge pchar 1 ifle pchar 2
						{
							ifvarand gotbow 2
							{
								orvar gotbow 8
								setp[].weapon_pos -1
								set D YES	
							}
						}
						else ifvarand gotDB YES
						{
							ifvarand gotDB 2 
							{
								orvar gotDB 8
								setp[].weapon_pos -1
								set D YES
								
							}
						}
					}
				}
			break
			case 10 // BOW OR DBSHOTGUN
				ifn player[].curr_weapon SHOTGUN_WEAPON
				{
					set temp NO
					ifge pchar 1 ifle pchar 2 { ifvarand gotbow YES ifg arrows 0 set temp YES }
					else { ifvarand gotDB YES ifg dbammo 0 set temp YES }
					
					ife temp YES
					{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon SHOTGUN_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire SHOTGUN_WEAPON
					set D YES
					ifge pchar 1 ifle pchar 2 orvar gotbow 4
					else orvar gotDB 4
					}
				}
				else
				{
					set temp NO
					ifge pchar 1 ifle pchar 2
					{
						ifvarand gotbow 2 nullop else
						ifvarand gotbow YES
						ifg arrows 0
						{
						setp[].weapon_pos -1
						set D YES
						orvar gotbow 4
						}
					}
					else
					{
						ifvarand gotDB 2 nullop else
						ifvarand gotDB YES
						ifg dbammo 0
						{
						setp[].weapon_pos -1
						set D YES
						orvar gotDB 4
						}
					}
				}
			break
			case 11 // DEVASTATOR
				ifn player[].curr_weapon DEVISTATOR_WEAPON
				{
					ifvarand gotrailgun 2 set TMP_A railgunammo else set TMP_A player[].ammo_amount DEVISTATOR_WEAPON
					
					ifg TMP_A 0
					{
						setp[].last_weapon player[].curr_weapon
						setp[].curr_weapon DEVISTATOR_WEAPON
						setp[].weapon_pos -1
						setp[].wantweaponfire DEVISTATOR_WEAPON
						ifvarand gotrailgun 2 orvar gotrailgun 8
						set D YES
					}
				}
				else
				{
					// ifg player[].ammo_amount DEVISTATOR_WEAPON 0
					ifvarand gotrailgun 2
					ifg railgunammo 0
					{
						orvar gotrailgun 8
						setp[].weapon_pos -1
						set D YES	
					}
				}
			break
			case 12 // RAILGUN
				ifn player[].curr_weapon DEVISTATOR_WEAPON
				{
					ifvarand gotrailgun 2 set TMP_A player[].ammo_amount DEVISTATOR_WEAPON else set TMP_A railgunammo
					
					ifvarand gotrailgun YES ifg TMP_A 0
					{
						setp[].last_weapon player[].curr_weapon
						setp[].curr_weapon DEVISTATOR_WEAPON
						setp[].weapon_pos -1
						setp[].wantweaponfire DEVISTATOR_WEAPON
						set D YES
						ifvarand gotrailgun 2 nullop else
						orvar gotrailgun 4
					}
				}
				else
				{
					
					ifvarand gotrailgun 2 nullop else
					ifvarand gotrailgun YES
					ifg railgunammo 0
					{
						setp[].weapon_pos -1
						set D YES
						orvar gotrailgun 4
					}
				}
			break
			case 13 // FREEZER
				ifn player[].curr_weapon FREEZE_WEAPON
				{
					ifvarand gotplasma 2 set TMP_A plasmammo else
					set TMP_A player[].ammo_amount FREEZE_WEAPON
					
					ifg TMP_A 0
					{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon FREEZE_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire FREEZE_WEAPON
					ifvarand gotplasma 2 
						orvar gotplasma 8
					
					set D YES
					}
				}
				else
				{
					// ifg player[].ammo_amount FREEZE_WEAPON 0
					ifg plasmammo 0
					ifvarand gotplasma 2
					{
						orvar gotplasma 8
						setp[].weapon_pos -1
						set D YES	
					}
				}
			break
			case 16 // PLASMA GUN
				ifn player[].curr_weapon FREEZE_WEAPON
				{
					ifvarand gotplasma 2 set TMP_A player[].ammo_amount FREEZE_WEAPON else
					set TMP_A plasmammo
					
					ifvarand gotplasma YES ifg TMP_A 0
					{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon FREEZE_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire FREEZE_WEAPON
					set D YES
					ifvarand gotplasma 2 nullop else
					orvar gotplasma 4
					}
				}
				else
				{
					ifvarand gotplasma 2 nullop else
					ifvarand gotplasma YES
					ifg player[].ammo_amount FREEZE_WEAPON 0
					{
					setp[].weapon_pos -1
					set D YES
					orvar gotplasma 4
					}	
				}
			break
			case 14 // shrinker
				ifn player[].curr_weapon SHRINKER_WEAPON
				{
					ifg player[].ammo_amount SHRINKER_WEAPON 0
					{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon SHRINKER_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire SHRINKER_WEAPON
					set D YES
					}
				}
			break
			
			case 15 // expander
				ifn player[].curr_weapon GROW_WEAPON
				{
					ifg player[].ammo_amount GROW_WEAPON 0
					{
					setp[].last_weapon player[].curr_weapon
					setp[].curr_weapon GROW_WEAPON
					setp[].weapon_pos -1
					setp[].wantweaponfire GROW_WEAPON
					set D YES
					}
				}
			break
			endswitch
			
			ife D YES // successful weapon switch
			{
				set vendor_screen 0
				setp[].movement_lock 0
				set press_wheel 0
			}
		}
		
		break
	}
	
	
	
	ife vendor_used NO
	{
		set vendor_used YES
		ife VOLUME 5 ife LEVEL 11 // attrition tutorial
			operateactivators 1 0
	}
	else ife vendor_used YES
	ifge credits 20000 
	set vendor_used 2
	
	// check for attempts to close window by clicking outside of it
	set temp NO
	ifhitspace set temp YES
	ifvarand bits 4 set temp YES
	ife temp YES
	{
		set temp NO
		ifle cursory 25 set temp YES
		ifge cursory 190 set temp YES
		ifge cursorx 295 set temp YES
		ifle cursorx 20 set temp YES
		ife temp YES
		{
			ife vendor_screen 5
			ife gameover YES
			{
				setuserdef[].display_bonus_screen 0
				endofgame 2
			}
			set vendor_screen 0
			setp[].movement_lock 0
			break
		}
	}
	
	// check for high score button
	set temp NO
	ifhitspace set temp YES
	ifvarand bits 4 set temp YES
	ife temp YES
	ife challenge YES
	{
		ifge cursorx 21 ifle cursorx 48
		ifge cursory 175 ifle cursory 196
		{
			set vendor_screen 5
			set lastscreen vendor_screen
			set tempselect -1
			break
		}
	}
	
	// check for options menu button
	set temp NO
	ifhitspace set temp YES
	ifvarand bits 4 set temp YES
	ife temp YES
	ifn vendor_screen 5
	ifn vendor_screen 7
	{
		ifge cursorx 280 ifle cursorx 292
		ifge cursory 75 ifle cursory 152
		{
			set vendor_screen 7
			screensound TABSELECT
			set lastscreen vendor_screen
			set tempselect -1
			break
		}
	}
	
	ifge cursory 180 ifle cursory 190
	{
		ife attmode YES
		ifn VOLUME 0
		{
			ifge cursorx 73 ifle cursorx 140 set tempselect 904 else
			ifge cursorx 175 ifle cursorx 232 set tempselect 905 else
			set tempselect -1
			ifn tempselect -1
			ifg leveltoken 0
			ife restartatt 0
			{
				set temp NO
				ifvarand bits 4 set temp YES
				ifhitspace set temp YES
				ife temp YES
				{
					ife tempselect 904 set restartatt 90
					else
					ife tempselect 905
					{
						state next_att_map
						set restartatt -90
					}
					set bigmsg 1113
					set bigmsgcount 90
					sub leveltoken 1
					set vendor_screen 0
					setp[].movement_lock 0
					screensound GETATOMICHEALTH
					ife VOLUME 5 ife LEVEL 11 set playerxp 0
					break
				}
			}
			break
		}
	}
	ife vendor_screen 1 // shield vendor
	{
		set lastscreen vendor_screen
		ifge cursory 70 ifle cursory 82
		{
			ifge cursorx 48 ifle cursorx 90 set tempselect 1 else
			ifge cursorx 124 ifle cursorx 166 set tempselect 2 else
			ifge cursorx 200 ifle cursorx 242 set tempselect 3 else
			set tempselect -1
		}
		else
		ifge cursory 90 ifle cursory 102
		{
			ifge cursorx 48 ifle cursorx 90 set tempselect 4 else
			ifge cursorx 124 ifle cursorx 166 set tempselect 5 else
			ifge cursorx 200 ifle cursorx 242 set tempselect 6 else
			set tempselect -1
		}
		else
		ifge cursory 110 ifle cursory 122
		{
			ifge cursorx 48 ifle cursorx 90 set tempselect 7 else
			ifge cursorx 124 ifle cursorx 166 set tempselect 8 else
			ifge cursorx 200 ifle cursorx 242 set tempselect 9 else
			set tempselect -1
		}
		else
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		else ifge cursory 49 ifle cursory 62
		{
			ifl cursorx 47 { set tempselect -1 } else
			ifg cursorx 270 { set tempselect -1 } else
			ifg cursorx 212 set tempselect 903 else
			ifg cursorx 156 set tempselect 902 else
			ifg cursorx 100 set tempselect 901
			else set tempselect 904
		}
		else set tempselect -1
	}
	else ife vendor_screen 2 // inventory upgrades
	{
		set lastscreen vendor_screen
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		else ifge cursory 49 ifle cursory 62
		{
			ifl cursorx 47 { set tempselect -1 } else
			ifg cursorx 270 { set tempselect -1 } else
			ifg cursorx 212 set tempselect 903 else
			ifg cursorx 156 set tempselect 902 else
			ifg cursorx 100 set tempselect 901
			else set tempselect 904
		}
		else
		{
			ife es_type 0 ife attmode NO set tempselect -1 // locked until you have eshield
			else
			{
				// two row settings
				ifg cursory 165 set tempselect -1 else
				ifg cursory 115 ifl cursory 133 set tempselect -1 else
				ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
				ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
				ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
				{
					// up to 320 tempselect, weap_owned == tempselect --100
					set tempselect 600
					ifge cursorx 110 add tempselect 1
					ifge cursorx 160 add tempselect 1
					ifge cursorx 210 add tempselect 1
					ifge cursory 133 add tempselect 4
				}
			}
		}
		// else set tempselect -1
	}
	else ife vendor_screen 3 // perks
	{
		set lastscreen vendor_screen
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		else ifge cursory 49 ifle cursory 62
		{
			ifl cursorx 47 { set tempselect -1 } else
			ifg cursorx 270 { set tempselect -1 } else
			ifg cursorx 212 set tempselect 903 else
			ifg cursorx 156 set tempselect 902 else
			ifg cursorx 100 set tempselect 901
			else set tempselect 904
		}
		else ifge cursory 64 ifle cursory 72
		{
			ifge cursorx 195 ifle cursorx 254 set tempselect 906 else
			set tempselect -1
			
			ife VOLUME 6 ifge LEVEL 38 set tempselect -1
		}
		else
		{
			
			// ife vendorupgrade NO ife VOLUME 6 set tempselect -1 
			// else
			// {
				// two row settings
				ifl cursory 78 set tempselect -1 else
				ifg cursory 165 set tempselect -1 else
				ifg cursory 115 ifl cursory 133 set tempselect -1 else
				ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
				ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
				ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
				{
					// up to 620 tempselect, weap_owned == tempselect --100
					set tempselect 610
					ifge cursorx 110 add tempselect 1
					ifge cursorx 160 add tempselect 1
					ifge cursorx 210 add tempselect 1
					ifge cursory 133 add tempselect 4
				}
			// }
		}
		// else set tempselect -1
	}
	else ife vendor_screen 4 // character sheet
	{
		set lastscreen vendor_screen
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		else ifge cursory 49 ifle cursory 62
		{
			ifl cursorx 47 { set tempselect -1 } else
			ifg cursorx 270 { set tempselect -1 } else
			ifg cursorx 212 set tempselect 903 else
			ifg cursorx 156 set tempselect 902 else
			ifg cursorx 100 set tempselect 901
			else set tempselect 904
		}
		else ifge cursory 63 ifle cursory 71
		{
			ife VOLUME 4 ife marathon 2
			ifge cursorx 216 ifle cursorx 265
				set tempselect 909
		}
		else
		{
			
			ifge cursory 113 ifle cursory 121
			{
				// costume selection
				ifge cursorx 58 ifle cursorx 218
				{
					set tempselect cursorx
					sub tempselect 58
					div tempselect 10
					add tempselect 640
				}
				else set tempselect -1
			}
			else
			{
				ifg cursory 111 ifl cursory 129 set tempselect -1 else
				ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
				ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
				ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
				{
					// up to 640 tempselect, weap_owned == tempselect --100
					set tempselect 630
					ifge cursorx 110 add tempselect 1
					ifge cursorx 160 add tempselect 1
					ifge cursorx 210 add tempselect 1
					ifge cursory 129 add tempselect 4
				}
			}
			
		}
	}
	else ife vendor_screen 5 // high score display
	{
		
	}
	else ife vendor_screen 6 // perks page 2
	{
		set lastscreen vendor_screen
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		else ifge cursory 49 ifle cursory 62
		{
			ifl cursorx 47 { set tempselect -1 } else
			ifg cursorx 270 { set tempselect -1 } else
			ifg cursorx 212 set tempselect 903 else
			ifg cursorx 156 set tempselect 902 else
			ifg cursorx 100 set tempselect 901
			else set tempselect 904
		}
		else ifge cursory 64 ifle cursory 72
		{
			ifge cursorx 40 ifle cursorx 110 set tempselect 907 else
			set tempselect -1
		}
		else
		{
			// ife vendorupgrade NO ife VOLUME 6 set tempselect -1
			// else
			// {
				// two row settings
				ifl cursory 78 set tempselect -1 else
				ifg cursory 165 set tempselect -1 else
				ifg cursory 115 ifl cursory 133 set tempselect -1 else
				ifg cursorx 104 ifl cursorx 110 set tempselect -1 else
				ifg cursorx 154 ifl cursorx 160 set tempselect -1 else
				ifg cursorx 204 ifl cursorx 210 set tempselect -1 else
				{
					// up to 630 tempselect, weap_owned == tempselect --100
					set tempselect 620
					ifge cursorx 110 add tempselect 1
					ifge cursorx 160 add tempselect 1
					ifge cursorx 210 add tempselect 1
					ifge cursory 133 add tempselect 4
				}
			// }
		}
		
	}
	else ife vendor_screen 7
	{
		// set lastscreen vendor_screen
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		// check for upgrades menu button
		set temp NO
		ifvarand bits 536870912 nullop else
		ifhitspace set temp YES
		ifvarand oldbits 4 nullop else
		ifvarand bits 4 set temp YES
		ife temp YES
		{
			ifge cursorx 18 ifle cursorx 30
			ifge cursory 75 ifle cursory 152
			{
				ifg lastscreen 6 ifl lastscreen 10 set lastscreen 1 else
				ifl lastscreen 1 set lastscreen 1
				set vendor_screen lastscreen
				set lastscreen vendor_screen
				set tempselect -1
				screensound TABSELECT
				break
			}
			ifge cursorx 151 ifle cursorx 162
			{
				ifge cursory 62 ifle cursory 72
				ifg optionstart FIRSTOPTION
				{
					// up arrow
					sub optionstart 8
					ifl optionstart FIRSTOPTION set optionstart FIRSTOPTION
					sub currentoption 8
					ifl currentoption FIRSTOPTION set optionstart FIRSTOPTION
					screensound TABSELECT
				}
				else
				ifge cursory 162 ifle cursory 172
				ifl currentoption LASTOPTION
				{
					// down arrow
					add optionstart 8
					set B LASTOPTION
					sub B 7
					ifg optionstart B set optionstart B
					add currentoption 8
					ifg currentoption LASTOPTION set currentoption LASTOPTION
					screensound TABSELECT
				}
			}
		}

		ifvarand oldextbits 1 nullop else
		ifvarand extbits 1 // pressed forward
		{
			sub currentoption 1 ifl currentoption FIRSTOPTION set currentoption FIRSTOPTION
			ifl currentoption optionstart set optionstart currentoption
		}
		
		ifvarand oldextbits 2 nullop else
		ifvarand extbits 2 // pressed backward
		{
			set B optionstart
			add B 7
			ifl currentoption LASTOPTION
			{
				add currentoption 1 ifg currentoption B ifl B LASTOPTION add optionstart 1
			}
		}
		
		ifvarand oldbits 4 nullop else
		ifvarand bits 4
		ifg cursory 75 ifl cursory 156
		{
			set tempc currentoption
			set B optionstart
			set temp cursory
			sub temp 75
			div temp 10
			add B temp
			set currentoption B
			ifsound TABSELECT nullop else
			ifn tempc currentoption screensound TABSELECT
		}
		switch currentoption
		// case 3203
			// ife marathon 2
			// {
			// set subtitle_time 6
			// set subtitle_numlines 1
			// set subtitle_start 1550
			// }
		// break
		case 3210
			// ife marathon 2
			// {
			// set subtitle_time 6
			// set subtitle_numlines 1
			// set subtitle_start 1550
			// }
			// else
			ifn marathon 2
			{
			set subtitle_time 6
			set subtitle_numlines 3
			set subtitle_start 3175
			}
		break
		case 3213 case 3214 case 3215 case 3216
		
			// ife marathon 2
			// {
			// set subtitle_time 6
			// set subtitle_numlines 1
			// set subtitle_start 1550
			// }
			// else
			ifn marathon 2
			{
			set subtitle_time 6
			set subtitle_numlines 2
			set subtitle_start 3178
			}
		break
		case 3217
			// ife marathon 2
			// {
			// set subtitle_time 6
			// set subtitle_numlines 1
			// set subtitle_start 1550
			// }
			// else
			ifn marathon 2
			{
			set subtitle_time 6
			set subtitle_numlines 3
			set subtitle_start 3075
			}
		break
		// case 3218 case 3220
			// ife marathon 2
			// {
			// set subtitle_time 6
			// set subtitle_numlines 1
			// set subtitle_start 1550
			// }
		// break
		case 3219
			// ife marathon 2
			// {
			// set subtitle_time 6
			// set subtitle_numlines 1
			// set subtitle_start 1550
			// }
			// else
			ifn marathon 2
			{
			set subtitle_time 6
			set subtitle_numlines 3
			set subtitle_start 1407
			}
		break
		endswitch
		
		set temp NO
		ifvarand oldextbits 4 nullop else
		ifvarand extbits 4 // strafe left
			set temp extbits
		ifvarand oldextbits 8 nullop else
		ifvarand extbits 8 // strafe right
			set temp extbits

		ifn temp NO
		{
			switch currentoption
				case 3202 // DIFFICULTY
					set tempc SKILL
					ifvarand extbits 4 sub SKILL 1 else ifvarand extbits 8 add SKILL 1
					ifl SKILL 1 set SKILL 1 ifg SKILL 5 set SKILL 5
					ife attmode 2 ifl SKILL 3 set SKILL 3
					ife SKILL 4 setuserdef[].player_skill 5 else
					setuserdef[].player_skill SKILL
					ifn tempc SKILL
					{
						screensound TABSELECT
						set subtitle_time 120
						set subtitle_numlines 1
						set subtitle_start 3128
					}
				break
				case 3203 // RADAR DISPLAY
				ifn marathon 2
				{
					set tempc radaron
					ifvarand extbits 4 { set radaron -1 ifvarand perks 2 xorvar perks 2 } else ifvarand extbits 8 { set radaron YES orvar perks 2 }
					ifn tempc radaron
					screensound TABSELECT
					savegamevar radaron
					savegamevar perks
				}
				break
				case 3204 // ENEMY HEALTH BARS
					set tempc MONHUD
					ifvarand extbits 4 set MONHUD -1 else ifvarand extbits 8 set MONHUD YES
					ifn tempc MONHUD
					screensound TABSELECT
					savegamevar MONHUD
				break
				case 3205 // SHOW ENEMY POINTS
					set tempc SHOWPOINTS
					ifvarand extbits 4 set SHOWPOINTS -1 else ifvarand extbits 8 set SHOWPOINTS YES
					ifn tempc SHOWPOINTS
					screensound TABSELECT
					savegamevar SHOWPOINTS
				break
				case 3206 // FOOTSTEP SOUNDS
					set tempc STEPSOUNDS
					ifvarand extbits 4 set STEPSOUNDS -1 else ifvarand extbits 8 set STEPSOUNDS YES
					ifn tempc STEPSOUNDS
					screensound TABSELECT
					savegamevar STEPSOUNDS
				break
				case 3207 // DISABLE GAMETIPS
					set tempb disable_tips
					
					ifvarand extbits 4 set disable_tips NO else ifvarand extbits 8 set disable_tips YES
					ifn tempb disable_tips
					screensound TABSELECT
					savegamevar disable_tips
					ifn tempb disable_tips ife disable_tips NO set gametips 65535
				break
				case 3208 // DISABLE AUTOSAVE MID-LEVEL
					set tempc AUTOSAVE
					ifvarand extbits 4 set AUTOSAVE YES else ifvarand extbits 8 set AUTOSAVE -1
					ifn tempc AUTOSAVE
					screensound TABSELECT
					savegamevar AUTOSAVE
				break
				case 3209 // DISABLE DOUBLE-TAP DASH
					set tempc disable_doubletap
					ifvarand extbits 4 set disable_doubletap YES else ifvarand extbits 8 set disable_doubletap NO
					ifn tempc disable_doubletap
					screensound TABSELECT
					savegamevar disable_doubletap
				break
				case 3210 // RANDOM ENEMY REPLACEMENTS
				ifn attmode 1
				ifn marathon 2
				{
					set tempc NEWENEMIES
					ifvarand extbits 4 set NEWENEMIES -1 else ifvarand extbits 8 set NEWENEMIES YES
					ifn tempc NEWENEMIES
					screensound TABSELECT
					savegamevar NEWENEMIES
				}
				break
				case 3211 // KICKBABLE HEADS
					set tempc disable_kickheads
					ifvarand extbits 4 set disable_kickheads YES else ifvarand extbits 8 set disable_kickheads NO
					ifn tempc disable_kickheads
					screensound TABSELECT
					savegamevar disable_kickheads
				break
				case 3212 // JIBS DURATION
					ifvarand extbits 4 ifg jibs_duration 0 
					{
						sub jibs_duration 1800 
						ifle jibs_duration 0 set jibs_duration -1
					}
					else ifvarand extbits 8 ifl jibs_duration 108000 
					{
						ife jibs_duration -1 set jibs_duration 1800 else
						add jibs_duration 1800
					}
					
					screensound TABSELECT
					savegamevar jibs_duration
				break
				case 3213 // MAX AI TARGET RANGE IN METERS
				ifn marathon 2
				{
					ifvarand extbits 4 ifg MAXRANGE 8192
						sub MAXRANGE 8192 
					else ifvarand extbits 8 ifl MAXRANGE 262144 
						add MAXRANGE 8192
					screensound TABSELECT
				}
				break
				case 3214 // DUKE & BOMBSHELL BOTS AVOID MELEE
				ifn marathon 2
				{
					set tempc avoid_melee
					ifvarand extbits 4 set avoid_melee NO else ifvarand extbits 8 set avoid_melee YES
					ifn tempc avoid_melee
					screensound TABSELECT
				}
				break
				case 3215 // RAIN
				ifn marathon 2
				{
					ifvarand extbits 4 sub raining 4 else ifvarand extbits 8 ifl raining 80 add raining 4
					screensound TABSELECT
					ifl raining 0 set raining 0
					set wantrain raining
				}
				break
				case 3216 // SNOW
				ifn marathon 2
				{
					ifvarand extbits 4 add raining 4 else ifvarand extbits 8 ifg raining -40 sub raining 4
					screensound TABSELECT
					ifg raining 0 set raining 0
				}
				break
				
				case 3217 // MIRRORED MAPS
				ifn marathon 2
				{
					ifvarand extbits 4 
					ife mirror_maps YES
					{
						set mirror_maps NO 
						ife mirror_thismap -1 set mirror_thismap NO
						else
						ife mirror_thismap YES set mirror_thismap -1
						screensound TABSELECT
					}
					else ifvarand extbits 8 
					ife mirror_maps NO
					{
						set mirror_maps YES
						ife mirror_thismap -1 set mirror_thismap YES
						else
						ife mirror_thismap NO set mirror_thismap -1
						screensound TABSELECT
					}
					savegamevar mirror_maps
					screensound TABSELECT
				}
				break
				
				case 3218 // ENEMY INFIGHTING
				ifn marathon 2
				{
					set tempc disable_infighting
					ifvarand extbits 4 set disable_infighting YES else ifvarand extbits 8 set disable_infighting NO
					ifn tempc disable_infighting
					screensound TABSELECT
					savegamevar disable_infighting
				}
				break
				
				case 3219
				ifn marathon 2
				{
					set tempc random_items
					ifvarand extbits 4 set random_items NO else ifvarand extbits 8 set random_items YES
					ifn tempc random_items
					screensound TABSELECT
					savegamevar random_items
				}
				break
				
				case 3220 // RESET DEFAULT OPTIONS
				ifn marathon 2
				{
					ifvarand extbits 4 set reset_options NO else ifvarand extbits 8 set reset_options YES
					screensound TABSELECT
				}
				break
				
			endswitch
		}
		
	}
	else ife vendor_screen 9
	{
		set lastscreen vendor_screen
		ifge cursory 30 ifle cursory 44
		{
			ifge cursorx 278 ifle cursorx 291 set tempselect 10 // exit button
			else set tempselect -1
			
		}
		else ifge cursory 49 ifle cursory 62
		{
			ifl cursorx 47 { set tempselect -1 } else
			ifg cursorx 270 { set tempselect -1 } else
			ifg cursorx 212 set tempselect 903 else
			ifg cursorx 156 set tempselect 902 else
			ifg cursorx 100 set tempselect 901
			else set tempselect 904
		}
	}
	else ifg vendor_screen 9 
	{
		state set_item_number
		set lastscreen vendor_screen
		ifg lastscreen 49 sub lastscreen 40 else
		ifg lastscreen 39 sub lastscreen 30 else
		ifg lastscreen 29 sub lastscreen 20 else
		ifg lastscreen 19 sub lastscreen 10
	}
	
	set B NO
	ifvarand oldbits 536870912 nullop else
	ifhitspace set B YES
	ifvarand oldbits 4 nullop else
	ifvarand bits 4 set B YES
	ife B YES
	ifg vendor_screen 0
	{
		ife vendor_screen 5
		{
			ife gameover YES
			{
				setuserdef[].display_bonus_screen 0
				endofgame 2
			}
			else
			{
				set vendor_screen 1
				set tempselect -1
				setp[].movement_lock 0
			}
		}
		else
		ife tempselect 10
		{
			ifg vendor_screen 9
			ife VOLUME 6 ife LEVEL 12
			{
				ifrnd 16 sound OGUS_DRINKLATER else
				sound OGUS_GOODMATCH
			}
			set vendor_screen 0
			set tempselect -1
			setp[].movement_lock 0
			// globalsound TABSELECT
			
		}
		else
		ifg tempselect 0
		{
			ifge tempselect 1000 // weapon tabs
			{
				// ifg pchar 1 set tempselect vendor_screen else
				ife pchar 0
					sub tempselect 990
				else
				ife pchar 1
					sub tempselect 1980
				else
				ife pchar 2
					sub tempselect 2970
				else
				ife pchar 3
					sub tempselect 3960
				else
				ife pchar 4
					sub tempselect 4950
					
				ifn vendor_screen tempselect
				{
					set vendor_screen tempselect
					screensound TABSELECT
				}
				set tempselect -1
			}
			else
			ifge tempselect 600 // inventory stuff
			{
				ife tempselect 901
				{
					ifn vendor_screen 1
					{
						set vendor_screen 1
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				ife tempselect 902
				{
					ifn vendor_screen 2
					{
						set vendor_screen 2
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				ife tempselect 903
				{
					ifn vendor_screen 3
					{
						set vendor_screen 3
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				ife tempselect 904
				{
					ifn vendor_screen 4
					{
						set vendor_screen 4
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				ife tempselect 906 // go to perks page 2
				{
					ifn vendor_screen 6
					{
						set vendor_screen 6
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				ife tempselect 907 // go to perks page 1 from 2
				{
					ifn vendor_screen 3
					{
						set vendor_screen 3
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				ife tempselect 909 // collections page
				{
					ifn vendor_screen 9
					{
						set vendor_screen 9
						screensound TABSELECT
						set tempselect -1
					}
				}
				else
				{
					set tempc tempselect
					sub tempc 100
					ifge tempc 530 // costume selection
					{
						ifge tempc 540 // costume color
						{
							switch tempc
							set pal -1
							case 540 setp[].palookup 0 setuserdef[].color 0 set pal 0 break
							case 541 setp[].palookup 10 setuserdef[].color 10 set pal 10 break
							case 542 setp[].palookup 11 setuserdef[].color 11 set pal 11 break
							case 543 setp[].palookup 12 setuserdef[].color 12 set pal 12 break
							case 544 setp[].palookup 13 setuserdef[].color 13 set pal 13 break
							case 545 setp[].palookup 14 setuserdef[].color 14 set pal 14 break
							case 546 setp[].palookup 15 setuserdef[].color 15 set pal 15 break
							case 547 setp[].palookup 16 setuserdef[].color 16 set pal 16 break
							case 548 setp[].palookup 21 setuserdef[].color 21 set pal 21 break
							case 549 setp[].palookup 22 setuserdef[].color 22 set pal 22 break
							case 550 setp[].palookup 23 setuserdef[].color 23 set pal 23 break
							case 551 setp[].palookup 35 setuserdef[].color 35 set pal 35 break
							case 552 setp[].palookup 36 setuserdef[].color 36 set pal 36 break
							case 553 setp[].palookup 42 setuserdef[].color 42 set pal 42 break
							case 554 setp[].palookup 43 setuserdef[].color 43 set pal 43 break
							case 555 setp[].palookup 49 setuserdef[].color 49 set pal 49 break
							endswitch
							screensound TABSELECT
							ifn pal -1 
							{ 
								ife pchar 0 set dukepal pal 
								else ife pchar 1 set shellypal pal 
								else ife pchar 2 set wespal pal 
								else ife pchar 3 set mandopal pal
								else ife pchar 4 set novapal pal
							}
	
							savegamevar dukepal
							savegamevar shellypal
							savegamevar wespal
							savegamevar mandopal
							savegamevar novapal
						}
						else
						{
							ife pchar 0
							{
								ife tempc 530 // default costume
								{
									ifvarand altcostume 8 xorvar altcostume 8
									orvar altcostume 2
									orvar altcostume 16
								}
								else
								ife tempc 531 // classic costume
								{
									ifvarand altcostume 16 xorvar altcostume 16
									ifvarand altcostume 8 xorvar altcostume 8
									ifvarand altcostume 2 xorvar altcostume 2
									action PSTAND
								}
								else
								ife tempc 532 // space costume
								{
									orvar altcostume 8
									orvar altcostume 2
									ifvarand altcostume 16 xorvar altcostume 16
								}
								else
								ife tempc 533 // vacation costume
								{
									orvar altcostume 2
									ifvarand altcostume 16 xorvar altcostume 16
									ifvarand altcostume 8 xorvar altcostume 8
								}
								ifsound BODYSEARCH nullop else sound BODYSEARCH
							}
							else ife pchar 1
							{
								ife tempc 530 // default costume
								{
									ifvarand altcostume 1 xorvar altcostume 1
									ifvarand altcostume 4 xorvar altcostume 4
									ifvarand altcostume 32 xorvar altcostume 32
								}
								else
								ife tempc 531 // EDF
								{
									orvar altcostume 1
									ifvarand altcostume 4 xorvar altcostume 4
									ifvarand altcostume 32 xorvar altcostume 32
								}
								else
								ife tempc 532 // space gladiator
								{
									orvar altcostume 4
									ifvarand altcostume 1 xorvar altcostume 1
									ifvarand altcostume 32 xorvar altcostume 32
								}
								else
								ife tempc 533 // bikini
								{
									orvar altcostume 32
									ifvarand altcostume 1 xorvar altcostume 1
									ifvarand altcostume 4 xorvar altcostume 4
								}
								ifsound BODYSEARCH nullop else sound BODYSEARCH
							}
							// else
							// DEANOTE12#
							savegamevar altcostume
						}
						break
					}
					
					// don't equip stacking upgrades!
					ifn tempc 510 // +25 health
					ifn tempc 512 // regen health +
					ifn tempc 515 // i-frames +
					
					ife weap_owned[tempc] YES
					{
						
						state equipweapon
					}
					else
					{
						set tempI weap_owned[tempc]
						set TMP_B tempselect
						state pricetable // tempd now holds price
						set temp weap_owned[tempc]
						ife vendorupgrade NO ife atvendor 0
						{
							set subtitle_start 1498
							set subtitle_numlines 1
							set subtitle_time 90
							screensound WEAPEMPTY
							break
						}
						state purchaseweapon
						set temp weap_owned[tempc]
						ifg weap_owned[tempc] tempI // purchase successful
						{
							state equipweapon
							set vendor_screen 0
							set tempselect -1
							setp[].movement_lock 0
						}
					}
				}
			}
			else
			ifge tempselect 100 // weapon stuff
			{
				set tempc tempselect
				sub tempc 100
				set tempI weap_owned[tempc]
				ifn tempc 495 // increased cloak
				ife weap_owned[tempc] YES
				{
					state equipweapon
				}
				else
				{
					set tempI weap_owned[tempc]
					set TMP_B tempselect
					state pricetable // tempd now holds price
					ife vendorupgrade NO ife atvendor 0
					{
						set subtitle_start 1498
						set subtitle_numlines 1
						set subtitle_time 90
						screensound WEAPEMPTY
						break
					}
					state purchaseweapon
					ifg weap_owned[tempc] tempI // purchase successful
					{
						state equipweapon
						set vendor_screen 0
						set tempselect -1
						setp[].movement_lock 0
					}
				}
				
			}
			else
			ifl tempselect 10 // shields
			{
				ife es_owned[tempselect] YES
				{
					ifn es_type tempselect { state equipshield sound SWITCH_ON }
				}
				else
				{
					ife vendorupgrade NO ife atvendor 0
					{
						set subtitle_start 1498
						set subtitle_numlines 1
						set subtitle_time 90
						screensound WEAPEMPTY
						break
					}
					state purchaseshield
					ife es_owned[tempselect] YES // purchase successful
						state equipshield
				}
			}
			
		}
	}

ends

state endcamsequence

	set thiscam -1
	set SPRITELOTAG 0
	setp[].movement_lock 0
	setuserdef[THISACTOR].clipping NO
	setp[].posx startx
	setp[].posy starty
	setp[].posz initsprite
	setp[].posxv 0
	setp[].posyv 0
	setp[].ang lastangvel
	setp[].player_par 1
	setp[].horiz 100
	set ohoriz 100
	set mysector player[].cursectnum
	updatesectorz startx starty initsprite mysector
	setp[].cursectnum mysector
	
	getflorzofslope mysector startx starty z
	seta[].z z
	sub z 8192
	setp[].posz z
	
	setp[].player_par 1
	ife LEVEL 13 
	{
		operatemasterswitches 1
		starttrackslot 7 9
	}

ends

state findnextcam

	ifg actorvar[thiscam].initsprite 0
	{
		ife actorvar[thiscam].initsprite 1
		{
			state endcamsequence
			break
		}
		else
		{
			set savedvalue SPRITELOTAG
			getav[thiscam].initsprite SPRITELOTAG
			state AActivation
			operateactivators SPRITELOTAG 0
			operatemasterswitches SPRITELOTAG
			operaterespawns SPRITELOTAG
			set SPRITELOTAG savedvalue
			set savedvalue NO
		}
	}
	headspritestat spriteid 991
	whilevarn spriteid -1
	{
		ife actorvar[spriteid].SPRITELOTAG SPRITELOTAG
		{
			ifn actorvar[thiscam].initflags 0
			// getp[].ang angvel
			set angvel goalang
			
			set thiscam spriteid
		}

		nextspritestat spriteid spriteid
	}

ends

state camtrackcode // CAMTRACK sprites

	ife VOLUME 6 ifg LEVEL 12 ifl LEVEL 38
	soundonce BIGCHEER

	ife SPRITELOTAG 0
	{
		getp[].posx startx
		getp[].posy starty
		getp[].posz initsprite
		getp[].ang angvel
		
		set ocameraang angvel
		set lastangvel angvel
		set goalang angvel
		set SPRITELOTAG 2 // set to the lotag of the next camera
		setp[].posx sprite[thiscam].x
		setp[].posy sprite[thiscam].y
		setp[].posz sprite[thiscam].z
		setp[].cursectnum sprite[thiscam].sectnum
		setp[].horiz 100
		set ohoriz 100
		set raining rainstart 
		state findnextcam
		ife thiscam -1 break
	}
	set team 3 // this gets reverted to team 1 normally
	setp[].knuckle_incs 0
	setp[].falling_counter 0
	setp[].movement_lock 31
	setuserdef[THISACTOR].clipping YES
	seta[].htextra -1
	setp[].kickback_pic 0
	setp[].jumping_counter 0
	setp[].weapon_pos -9
	setp[].over_shoulder_on NO
	setp[].quick_kick 0
	setp[].fta 0
	
	getactor[thiscam].x x2
	getactor[thiscam].y y2
	getactor[].x x
	getactor[].y y

	subvarvar x2 x
	subvarvar y2 y
	
	getangle angvar x2 y2
	
	// getactor[].ang tempb
	set tempb angvel
	getincangle tempd angvar tempb	
	setvarvar tempe tempd
	abs tempe
	ifvarl tempd 17 ifvarg tempd -17
	setvarvar tempb angvar
	else
	{
		shiftvarr tempd 3 // 3  2
		ifvarg tempd 0 subvarvar tempb tempd else
		ifvarl tempd 0 { mulvar tempd -1 addvarvar tempb tempd }
	}
	set angvel tempb

	ifn actorvar[thiscam].initflags 0
	{
		set TMP_A goalang // player[].ang
		getincangle tempd sprite[thiscam].ang TMP_A
		ifvarl tempd 17 ifvarg tempd -17
		setvarvar TMP_A sprite[thiscam].ang
		else
		{
			shiftvarr tempd 2 // 3
			ifvarg tempd 0 subvarvar TMP_A tempd else
			ifvarl tempd 0 { mulvar tempd -1 addvarvar TMP_A tempd }
		}
		// setplayer[].ang TMP_A
		set goalang TMP_A
	}
	else
		// setplayer[].ang tempb
		set goalang tempb
		
	set oang goalang // player[].ang
	
	cos xvel tempb
	sin yvel tempb		
	shiftvarl xvel 12
	shiftvarl yvel 12
	shiftvarr tempe 2 // 1
	ifvarl tempe 8 setvar tempe 8
	divvarvar xvel tempe
	divvarvar yvel tempe
		
	getplayer[].posxv x
	getplayer[].posyv y
	shiftvarr xvel 3
	shiftvarr yvel 3
	addvarvar x xvel
	addvarvar y yvel
	setplayer[].posxv x
	setplayer[].posyv y	
	getactor[thiscam].z z2
	getactor[].z z
	ldist xydist THISACTOR thiscam
	ife xydist 0 set xydist 1
	subvarvar z2 z
	// shiftvarl z2 8
	mul z2 384
	
	ifg player[].cursectnum -1
	ifg z2 0
	{
		getflorzofslope player[].cursectnum player[].posx player[].posy temp
		sub temp z
		ifl temp 3072 set z2 0	
	}
		
	
	divvarvar z2 xydist
	subvar z2 256
	setplayer[].poszv z2
	set temp player[].cursectnum
	updatesectorz player[].posx player[].posy player[].posz temp
	ifn temp -1 setp[].cursectnum temp
	ifp ponground
	{
		getplayer[].posz z
		subvar z 1024
		setplayer[].posz z
		addvar z 8192
		setactor[].z z
	}		
	ldist xydist THISACTOR thiscam
	ifvarl xydist 1280
	{
		getav[thiscam].stun temp
		ifle temp 0
		{
			add SPRITELOTAG 1
			state findnextcam
		}
		else
		{
			sub temp 1
			setav[thiscam].stun temp
			ifl xydist 480 { setp[].posxv 0 setp[].posyv 0 setp[].poszv -256 }
		}
	}
	
	ifhitspace
	{
		state endcamsequence
	}
	

ends

state transitioncode


	ifvarl transition 30
	ifg transition 15
	setplayer[THISACTOR].ang sprite[myspawner].ang

	ifg transition 15
	{
		setplayer[THISACTOR].posxv 0
		setplayer[THISACTOR].posyv 0
	}

	ifvare transition 30
	{
		// switch to other door
		getactorvar[myspawner].initsprite temp
		setvar spriteid 0
		whilevarn spriteid 16384
		{
			ifvarn sprite[spriteid].statnum 1024
			ifvare sprite[spriteid].picnum FAKEDOOR
			ifvarvarn myspawner spriteid
			ifvarvare actorvar[spriteid].initsprite temp
			{
				setvarvar myspawner spriteid
				setsprite THISACTOR sprite[myspawner].x sprite[myspawner].y sprite[myspawner].z
				setplayer[THISACTOR].posx sprite[myspawner].x
				setplayer[THISACTOR].posy sprite[myspawner].y
				getactor[myspawner].z z
				subvar z 8192
				setplayer[THISACTOR].posz z
				setplayer[THISACTOR].cursectnum sprite[myspawner].sectnum		
				setvar spriteid 16383
			}
			addvar spriteid 1
		}
		
		ifn myspawner -1
		ifn actorvar[myspawner].initflags 0
		{
			getav[myspawner].initflags SPRITELOTAG
			state AActivation
			set SPRITELOTAG 0
		}
	}

		
	subvar transition 1
	ifvare transition 0 setvar myspawner -1

ends

// gamevar spritelist NO 0

move PGROWINGPOP        // Used only as a variable

actor APLAYER MAXPLAYERHEALTH PSTAND 0 0

// gotsector[sectnum] is 1 when sectnum is rendered, 0 otherwise
// set mysector player[].cursectnum
// ifn mysector -1
// {
	// set temp gotsector[mysector]
	// al temp
// }

setp[].max_actors_killed maxkills
setp[].actors_killed killcount

ifg fastfire 0 sub fastfire 1
ifg justblocked 0 sub justblocked 1

ife music_menupos YES
{
	setmusicposition music_position
	set music_menupos -1
}

ifg jibsound_delay 0
{
	sub jibsound_delay 1
	ifle jibsound_delay 0
	{
		globalsoundvar jibsound
		set jibsound_delay -60
		set jibsound -1
	}
}
else 
{
	ifn jibsound -1 ife jibsound_delay 0
	{
		globalsoundvar jibsound
		set jibsound -1
		set jibsound_delay -30
	}
	ifl jibsound_delay 0 add jibsound_delay 1
}

ifn nomon 0
{
	headspritestat spriteid 1
	whilevarn spriteid -1
	{
		ife actorvar[spriteid].monstatus 1
		ifn actorvar[spriteid].team 1
		{
			seta[spriteid].picnum TRACER
			seta[spriteid].cstat 32768
		}
		nextspritestat spriteid spriteid
	}
}

ife challenge YES
ife gameover YES
ifn vendor_screen 5
ife player[].timebeforeexit 0	
{
	setuserdef[].display_bonus_screen 0
	endofgame 2
}



set temp NO
ifg fastfire 0 set temp YES
ife LASERMODE 0 ife player[].curr_weapon PISTOL_WEAPON
ifge player[].kickback_pic WEAPON1_TOTALTIME
ifvarand perks 2048
set temp YES

ife temp YES
ifn player[].curr_weapon KNEE_WEAPON
ifn player[].curr_weapon HANDBOMB_WEAPON
ifn player[].curr_weapon HANDREMOTE_WEAPON
{
	set B NO
	set temp 0
	ifn player[].kickback_pic 0
	{
		set B YES
		switch player[].curr_weapon
		case 1 set temp WEAPON1_FIREDELAY 
			ifn pchar 3 ifl THISCLIP 1 set B NO
			break
		case 2 set temp WEAPON2_FIREDELAY break
		case 3 set temp WEAPON3_FIREDELAY break
		case 4 set temp WEAPON4_FIREDELAY break
		case 5 set temp WEAPON5_FIREDELAY break
		case 6 set temp WEAPON6_FIREDELAY break
		case 7 set temp WEAPON7_FIREDELAY break
		case 8 set temp WEAPON8_FIREDELAY break
		case 9 set temp WEAPON9_FIREDELAY break
		case 11 set temp WEAPON11_FIREDELAY break
		endswitch
	}
	
	ifg LASERFIRE 0
	{
		set B YES
		ife LASERMODE 1 // laser pistol
			set temp 2
		else
		ife LASERMODE 3 // comm gun
			set temp 10
			
		sub temp 1
		
		ife LASERFIRE temp set B NO
		else add LASERFIRE 1
	}	
	ifn pchar 4
	{
		ifn m4reload 0 ifn pchar 0 ifn pchar 2 ife player[].curr_weapon CHAINGUN_WEAPON set B YES
		ifn uzireload 0 ife pchar 2 ife player[].curr_weapon CHAINGUN_WEAPON set B YES
	}
	
	ifn player[].reloading 0 
	{
		set B YES
		set tempb player[].kickback_pic
		add tempb 1
		ife player[].curr_weapon PISTOL_WEAPON ifge tempb WEAPON1_RELOAD set B NO
		ife player[].curr_weapon SHOTGUN_WEAPON ifge tempb WEAPON2_RELOAD set B NO
	}
	else
	ife player[].curr_weapon PISTOL_WEAPON
	{
		ife pchar 0 ifvarand dukeupgrades[PISTOL_WEAPON] 8 set B NO
		ife pchar 1 ifvarand dukeupgrades[PISTOL_WEAPON] 8 set B NO
	}
	
	ifn temp 0
	{
		// ife player[].kickback_pic temp set B NO
		set tempb temp
		sub tempb 1
		ife player[].kickback_pic tempb set B NO
	}
	
	ife B YES
	{
		ifn player[].kickback_pic 0
		{
			getp[].kickback_pic tempb
			add tempb 1
			setp[].kickback_pic tempb
		}
		else 
		{
			ifn m4reload 0 add m4reload 1
			ifn uzireload 0 add uzireload 1
		}
	
	}

}

// ife testrecent YES
// {
	// set temp 0
	// whilevarn temp RECATTMAPS
	// {
		// set tempb recentmaps[temp]
		// al tempb
		// add temp 1
	// }
	// set testrecent NO
	// setp[].timebeforeexit 100
// }
ifn restartatt 0
{
	ifl restartatt 0 add restartatt 1 else
	ifg restartatt 0 sub restartatt 1
	
	ife restartatt 1
	{
		set restartatt 0
		startlevel VOLUME LEVEL 
		break
	}
	
	ife restartatt -1
	{
		set restartatt 0
		startlevel ATTVOLUME ATTLEVEL
		break
	}
	
	seta[].htextra -1
	setp[].timebeforeexit 0
}

ifvarn transition 0 state transitioncode // for use with fake door transports


// ife crawlclock YES set crawlclock totalclock

ifvarn raining 0 ifg framerate 20 ifg player[].player_par 2 state raincode

ife spectate YES
	set team 3
else
set team 1

ifn thiscam -1 { state camtrackcode break }

getp[].weapon_pos temp
ifn temp 0 ifn temp -9 ifn temp 10
{
	ife temp 1 ifl combotime 0 set combotime 20
	
	set TMP_B player[].curr_weapon
	// ife TMP_B 0
	// {
		// ife WEAPON0_SHOOTS SAWPROJ set TMP_B 10 else
		// ifg gotsaber 0 set TMP_B 10
	// }
	// else
	ife TMP_B 10 set TMP_B 5

	ife pchar 0 set TMP_A dweaplevel[TMP_B] else
	ife pchar 2 set TMP_A wweaplevel[TMP_B] else
	ife pchar 3 set TMP_A mweaplevel[TMP_B] else
	ife pchar 4 set TMP_A nweaplevel[TMP_B]
	set TMP_A bweaplevel[TMP_B]
	
	ifg TMP_A 0
	{
		sub temp 1
		setp[].weapon_pos temp
	}
}
/*
ifge SKILL 4
{
	headspritestat spriteid 2 // 0
	whilevarn spriteid -1
	{
		switch sprite[spriteid].picnum
		case NEWTROOP case NEWTROOPSTAYPUT case NEWTROOPRUNNING case TANK
		case NEWTROOPJETPACK case NEWPIG case NEWPIGSTAYPUT case NEWPIGDIVE
		case NEWBEAST case NEWBEASTJUMP case NEWBEASTCROUCH case NEWBEASTSTAYPUT
		case OCTABRAIN case OCTABRAINSTAYPUT case ROTATEGUN case COMMANDER case COMMANDERSTAYPUT
		case NEWCOMM case LIZMAN case LIZMANSTAYPUT
		case LIZMANJUMP case LIZMANSPITTING case DRONE 
		case ARMPIG case EDFPIG case TERMINATOR case TERMINATORSTAYPUT case TERMINATORDUCKING
		case ARMYANT case ARMYANTJUMP case ARMYANTCRAWL case ARMYANTCRAWLPUT
		case BOSS2FLY case CANHEADNOARMS case CHEERBOT case CORRUPT case CRAZYLADY 
		case CYBERBEAST case DEVOURER case NEWRECON case LARGEMAN case SMALLMAN
		case LIZRANGER case LIZRANGERSTAYPUT case LIZRANGERDUCKING 
		case LIZDOG case LIZDOGSTAYPUT case LIZELITE case LIZELITECROUCH case LIZTURRET case MEGABRAIN case ROBOSHARK
		case MANDOFETT case MANDOCROUCH case MECHBRAIN case MECHBRAINSTAYPUT
		case ZOMBIE case SPACEBULL case SPACEBULLSTAYPUT case SPACEBULLDUCKING 
		case NEWSENTRY case PATROLSENTRY case PIGSUV case CRONEN case SCUBATROOP case NURGLE
		case POLYMORPH case ARMLIZTROOP case ARMLIZSTAYPUT
		ifn actorvar[spriteid].monstatus 2
		ifn actorvar[spriteid].monstatus 1
		{
			set target spriteid
			state targetcheck
			ifn target -1
			{
				changespritestat spriteid 1
				seta[spriteid].httimetosleep 100
			}
		}
		break
		case BOSS1 case BOSS1STAYPUT case NEWBATLORD case NEWBATLORDSTAYPUT
		case BOSS2 case BOSS2STAYPUT
		case BOSS3 case BOSS3STAYPUT case QUEEN
		case LIZBOSS case PIGBOSS 
		case BOSS4 case BOSS4STAYPUT
		case BATBOSS case CANHEAD 
		case DRPROTON case PSPIDER
		ifn actorvar[spriteid].monstatus 2
		ifn sprite[spriteid].pal 0
		{
			set target spriteid
			state targetcheck
			ifn target -1
			{
				changespritestat spriteid 1
				seta[spriteid].httimetosleep 100
			}
		}
		break
		endswitch
		nextspritestat spriteid spriteid
	}
}
*/
ifg heldnear 0
{
	sub heldnear 1
	ifl player[].fta 60
	{
		setp[].fta 120 setp[].ftq 1361
	}
}
else ife player[].ftq 1361 ifg player[].fta 10 setp[].fta 10

ifn heldobject -1
	ife sprite[heldobject].statnum 1024 { set heldobject -1 set heldtime -10 }


ifn heldobject -1
{
	set heldnear 0
	ifl heldtime 10 add heldtime 1
	setp[].weapon_pos 10
	ifvarand sprite[heldobject].cstat 1 // blocking
	{
		geta[heldobject].cstat temp
		xorvar temp 1
		seta[heldobject].cstat temp
	}
	seta[heldobject].ang player[].ang
	set x player[].posx
	add x 384
	rotatepoint player[].posx player[].posy x player[].posy player[].ang savx savy
	
	set savz player[].posz
	add savz 8704
	
	
	set z2 heldtime
	mul z2 512
	sub savz z2
	
	seta[heldobject].zvel 0
	
	setsprite heldobject savx savy savz
	
	ife heldtime 10
	{
		set temp NO
		ifvarand bits 4 set temp YES
		ifhitspace set temp YES
		ife temp YES
		{
			ifvarand bits 4
			{
				switch sprite[heldobject].picnum 
				case BOWLINGBALL
					seta[heldobject].ang player[].ang
					seta[heldobject].htextra 11
					seta[heldobject].htpicnum KNEE
					seta[heldobject].htowner player[].i
					seta[heldobject].htang player[].ang
				break
				default
					seta[heldobject].ang player[].ang
					setav[heldobject].savedvalue sprite[heldobject].statnum
					setav[heldobject].mtype sprite[heldobject].picnum
					seta[heldobject].mdflags 16
					seta[heldobject].picnum THROWNOBJECT
					changespritestat heldobject 1

				break
				endswitch
			}
			else
			ifn sprite[heldobject].picnum BOWLINGBALL
			{
				seta[heldobject].ang player[].ang
				setav[heldobject].savedvalue sprite[heldobject].statnum
				setav[heldobject].mtype sprite[heldobject].picnum
				seta[heldobject].mdflags 16
				seta[heldobject].picnum THROWNOBJECT
				changespritestat heldobject 1
				setav[heldobject].stun 1
			}
			seta[heldobject].cstat heldcstat
			set heldobject -1 set heldtime -10 
		}
	}
}
else 
{
	ifl heldtime 0 add heldtime 1
	ifg heldtime 0 set heldtime 0
}

ifg player[].invdisptime 0
{
	setp[].invdisptime 0
	set invswitch 9
}
ifg invswitch 0 sub invswitch 1

ifg player[].cursectnum -1
	setarray psectvisited[player[].cursectnum] YES

ifn player[].cursectnum osector
{
	ifn osector -1 set menuoff NO
	getp[].cursectnum osector
}
ifn cmode 0
{
	ife cmode 1 quote 168 else
	ife cmode 2 quote 186 else
	ife cmode 3 quote 185 else
	ife cmode 4 quote 184 else
	quote 182
	setp[].jumping_counter 0
	setp[].weapon_pos -9
	ifvarand extbits 2 set cmode 0 else // BACKWARD = CANCEL
	ifvarand extbits 1 set cmode 2 else // FORWARD = HOLD POSITION
	ifvarand extbits 4 set cmode 3 else // LEFT = CHANGE COSTUME
	ifvarand extbits 8 set cmode 4 // RIGHT = SWAP CHARACTERS
	// lockplayer 10
	setp[].runspeed 0
	// ife userdef[].god NO
	// ifg sprite[].htextra 0 set cmode 0
}

ifn endlevel 0
{
	setp[].timebeforeexit endlevel
	set endlevel 0
}

ifn vrscreen_time 0
ife subtitle_time 0
ife award_time 0
{
	state in_menu
	ifg vrscreen_time 0
	{
		ife vrscreen_time 32 { stopallsounds screensound VRTRANSND }
		sub vrscreen_time 1
		set temp vrscreen_time
		modvar temp 4
		ife temp 0 add vrscreen 1
		ife vrscreen_time 0
		{
			setp[].dead_flag 0
			set pdown NO
			set ikicked 0
			ife pchar 4 action APDEASTAND else
			ife pchar 3 action APMANSTAND else
			ife pchar 2 action APWESSTAND else
			ife pchar 1 action APSHELLYSTAND else
			ifvarand altcostume 2 action ALTDUKESTAND else
			action PSTAND
				
			set spriteid 0
			headspritestat spriteid 1
			whilevarn spriteid -1
			{
				ife sprite[spriteid].picnum DUMCIV setav[spriteid].monstatus 2
				nextspritestat spriteid spriteid
			}
			setp[].movement_lock 0
			
			ife VOLUME 6 ife LEVEL 12
			{
				set gametype 0
				setarray keycards[LEVEL] player[].got_access
				setarray secretrooms[LEVEL] player[].secret_rooms
				setarray savelevel[LEVEL] YES
				savemapstate
				startlevel 6 matchlevel
			}
			else 
			{
				startlevel 6 12
			}
		}
	}
	ifl vrscreen_time 0
	{
		ife vrscreen_time -32 { stopallsounds screensound VRTRANSND }
		add vrscreen_time 1
		set temp vrscreen_time
		modvar temp 4
		ife temp 0 sub vrscreen 1
		
		ife vrscreen_time 0
		{
			setp[].movement_lock 0
			setp[].player_par 1
		}
	}
	getplayer[].ang oang
	getplayer[].horiz ohoriz
	break
}

// remnant of when hardest skill had faster game speed
// ife SKILL 5
// {
	// ife player[].jumping_counter 901
	// {
		// setp[].jumping_counter 0
		// setp[].poszv -2560
	// }
// }
// else
ife player[].jumping_counter 541 // 721
{
	set temp NO
	ife pchar 3 
		set temp YES
	ifn gametype 0 set temp YES
	// ifvarand inven_upgrades 8 ifg player[].boot_amount 0 set temp YES
	ife temp YES
	{
		setp[].jumping_counter 0
		getp[].poszv z 
		sub z 1792 // 644 
		setp[].poszv z
	}
}

ifvarg PLAYERONTHEBIKE 0
{
	ifvare player[THISACTOR].over_shoulder_on 1
	setplayer[THISACTOR].over_shoulder_on 0
	ifn bikerot 0 setp[].rotscrnang bikerot
}
else
ife pchar 2
ifn sector[].lotag 2
ife player[].jumping_counter 0
ifp palive
ifg glidetime 0
{
	// glide code
	ifg player[].poszv 1560
	{
		ifvarand gametips 8192
		ife subtitle_time 0
		ifg player[].falling_counter 5
		{
			set subtitle_time 60
			set subtitle_numlines 1
			set subtitle_start 1202
		}
		ifvarand bits 1
		{
			ifvarand gametips 8192 { xorvar gametips 8192 savegamevar gametips }
			setp[].jumping_toggle 1
			getp[].poszv zdist
			sub zdist 72
			mul zdist 8, div zdist 9
			ifvarand extbits 2 
			ife glideboost 0
			// ifg player[].poszv 2048
			{
				sub glidetime 15
				screensound GLIDEUP
				ifl zdist 2048 set zdist 2048
				mul zdist -3
				div zdist 2
				sub zdist 512
				ifl zdist -5120 set zdist -5120
				set glideboost 1
			}
			setp[].poszv zdist
		}
	}
	
	ifaction APWESFROZEN nullop else
	ifn player[].poszv 0
	ifvarand bits 1
	{
		sub glidetime 1
		action APWESGLIDING
		ifsound GLIDELOOP nullop else screensound GLIDELOOP
		cos xvel player[].ang
		sin yvel player[].ang
		
		ifvarand extbits 2
		{
			set B player[].poszv
			abs B
			// shiftr B 4
			div B 20
			mul xvel B
			mul yvel B
			// shiftl xvel 6
			// shiftl yvel 6
		}
		else
		{
			shiftl xvel 5
			shiftl yvel 5
		}
		add xvel player[].posxv
		add yvel player[].posyv
		setp[].posxv xvel
		setp[].posyv yvel
		
		getp[].falling_counter temp
		ifg temp 7 
		{
			sub temp 1
			sub glidetime 1
			ifvarand player[].player_par 1 { sub temp 1 sub glidetime 1 }
			setp[].falling_counter temp
		}
	}
}
else
ife pchar 3
{
	setp[].airleft 390 // armor has oxygen supply
	ifp ponground nullop else
	// iffloordistl 8 nullop else
	ifhitspace ifge jumpjet_charge JUMPJETAMOUNT
	ifl jumpjet 35 ifg jumpjet -1
	ifn sector[].lotag 2
	ifl player[].poszv 3560 // 3072
	{
		action APMANJUMPING
		setp[].posxv 0
		setp[].posyv 0
		add jumpjet 1
		ife jumpjet 6
		{
			// setp[].over_shoulder_on YES
			soundonce LBM_CHARGE
		}
		ifg jumpjet 5
		{
			setp[].jumping_counter 0
			setp[].falling_counter 0
			setp[].poszv -288
			ife jumpjet 35
			{
				stopsound LBM_CHARGE
				sound NUKEFIRE
				set jumpjet_ang player[].ang
				set padang jumpjet_ang
				ifl padmove 2 set padmove 2
				set jumpadxvel 580 // 644
			}
		}
	}
	
	ifge jumpjet 35
	{
		ifl padmove 2 set padmove 2
		action APMANGLIDING
		// forward movement
		// damage to cracks and enemies
		// bomblets if applicable
		iffloordistl 8 setp[].poszv -320 else
		setp[].poszv -256
		add jumpjet 1
		setp[].ang jumpjet_ang
		set padang jumpjet_ang
		// also lock angle in display event
		ifge jumpjet 75
		{
			action APMANFALLING
			set jumpjet -30
			set padmove 0
			// setp[].over_shoulder_on NO
		}
		ifhitspace nullop else
		{
			ifg jumpjet 45
			{
				action APMANFALLING
				set jumpjet -30
				set padmove 0
				stopactorsound THISACTOR NUKEFIRE
				// setp[].over_shoulder_on NO
			}
		}
		set TMP_B 0
		headspritestat spriteid 6
		whilevarn spriteid -1
		{
			getactor[spriteid].picnum picnum
			switch picnum
			case CRACK1 case CRACK2 case CRACK3 case CRACK4
				ldist xydist THISACTOR spriteid
				ifl xydist 768
				{
					set z sprite[].z
					sub z sprite[spriteid].z
					abs z
					ifl z 16384
						set TMP_B 1
				}
			break
			default break
			endswitch
			nextspritestat spriteid spriteid
			ife TMP_B 1 set spriteid -1
		}
		ife TMP_B 1 
		{
			hitradius 1280 40 60 80 80 
			quake 20
			screensound LBM_JUMPSLAM
			
			action APMANFALLING
			set jumpjet -30
			set padmove 0
			stopactorsound THISACTOR NUKEFIRE
			// setp[].over_shoulder_on NO
		}
		else
		hitradius 768 40 60 80 80
		headspritestat spriteid 1
		whilevarn spriteid -1
		{
			ife sprite[spriteid].htpicnum RADIUSEXPLOSION
			{
				dist xydist THISACTOR spriteid
				ifle xydist 768
				{
					seta[spriteid].htpicnum APLAYER
					seta[spriteid].htowner THISACTOR
					seta[spriteid].htpicnum RPG
				}
			}
			nextspritestat spriteid spriteid
		}
	}
}
else ifg jumpjet 0 set jumpjet -1



ifp ponground 
{
	setp[].autostep 5120
	ifl jumpjet 0 add jumpjet 1 
	// else
	// ifg jumpjet 0 { set jumpjet -30 setp[].over_shoulder_on NO }
	set glideboost 0
	set glidetime GLIDEMAX
	stopsound GLIDELOOP
	stopsound GLIDEUP
	ifaction APWESGLIDING action APWESSTAND
	ifaction APMANFALLING action APMANSTAND
	ifaction APMANGLIDING action APMANSTAND
}
else
	setp[].autostep 4096
	
	
ifgapzl 32 setp[].autostep 4096

getp[].cursectnum mysector
ifg mysector -1
{
	getflorzofslope mysector player[].posx player[].posy z
	getceilzofslope mysector player[].posx player[].posy z2
	sub z z2
	ifl z 6656 
	{
		setp[].autostep 4096
		
		ifp ponground
		ifn sector[mysector].floorslope 0
		{
			getp[].posz z add z 1536 setp[].posz z
			geta[].z z add z 1536 seta[].z z
		}
	}
}

ifg shipcam -1
{
	ifg actorvar[shipcam].ikicked 0
	{
		ifactorsound THISACTOR TRAINLOOP nullop else sound TRAINLOOP
		ifg sprite[shipcam].xvel startx add startx 16 else
		ifl sprite[shipcam].xvel startx sub startx 16
		ifl startx 0 set startx 0
		set tempb startx, shiftl tempb 1
		setactorsoundpitch THISACTOR TRAINLOOP tempb
	}
}
	
ife player[].ftq 102 
{
	ifn gametype 0 // gladiator
	setp[].ftq 236 // prevents "FRY YOUR ASS" quote from displaying at match end
	else ife LEVEL 2 ife VOLUME 0 nullop else
	setp[].ftq 1447
}



// *** START OF LIGHTSABER VORPAL BLADE CODE
// and some other character specific code

ife pchar 4
{
	ifvarand player[].player_par 1 add sab_idle 1
	ifl sab_idle 21921 set sab_idle 21921
	ifg sab_idle 21926 set sab_idle 21921
	ifn player[].weapon_pos 0 
		set clawpop 1
	else
	ifg clawpop 0 { add clawpop 1 ife clawpop 6 set clawpop 0 }
	ife clawpop 0 ife saberpos 0 set clawpop -1 
	ife gotsaber 0 set gotsaber 1
	
	ifg rage 0 
	{
		sub rage 1
		set pchar 4
		setp[].curr_weapon KNEE_WEAPON
		setp[].weapon_pos 0
	}
	ifl cloak 0
	{
		add cloak 1
		ifge cloak 0
		{
			set switchboost 15
			sound CLOAKOFF
		}
	}
	// cloak code
	ifp palive
	ifge cloak 30
	ifp pducking
	ifge holdinteract 9
	ife player[].kickback_pic 0
	{
		ife player[].curr_weapon KNEE_WEAPON
		ifvarand novaupgrades[KNEE_WEAPON] 2
		{
			set rage cloak
			set switchboost rage
			set cloak 0
			palfrom 48 63
			ifrnd 84 screensound DEA_FIGHTME else
			ifrnd 84 screensound DEA_BLADEHUNGER else
			screensound DEA_IMUDEATH
		}
		else
		{
			mul cloak -1
			screensound DEA_CLOAKING
			screensound CLOAKON
		}
		ifvarand gametips 65536
		{
			xorvar gametips 65536 savegamevar gametips
		}
	}
	set temp cloakmax, mul temp -1
	clamp cloak temp cloakmax
	
	
	ifn deaonwall -1
	{
		add deawalltime 1
		setp[].posx deawallx
		setp[].posy deawally
		setp[].posz deawallz
		seta[].x deawallx
		seta[].y deawally
		seta[].ang deawallang
		setp[].ang deawallang
		// setp[].on_ground YES
		set SAVEDANG deawallang
		set SAVEDANGCOUNT 2
		set saberpos 0
		set sidekick 0
		set onturret -1
		setp[].posxv 0
		setp[].posyv 0
		setp[].poszv 0
		setp[].falling_counter 0
		setp[].jumping_counter 0
		// setp[].horiz 100
		setp[].curr_weapon KNEE_WEAPON
		setp[].kickback_pic 0
		
		action APDEASTUCK
		set temp NO
		ifn player[].weapon_pos 0 set temp YES
		ifvarand bits 2 ifge deawalltime 6 set temp YES // crouch
		ifvarand extbits 2 ifge deawalltime 3 set temp YES // back backards
		
		ifg look_ang_wait 0
		{
			sub look_ang_wait 1
			setp[].look_ang last_look_ang
		}
		
		ife temp NO
		ifg deawalltime 9
		{
			cos mycos deawallang
			sin mysin deawallang
			hitscan player[].posx player[].posy player[].posz player[].cursectnum mycos mysin 0 hitsector hitwall hitsprite hitx hity hitz CLIPMASK1
			ifn hitwall -1
			{
				sub hitx player[].posx
				sub hity player[].posy
				mul hitx hitx
				mul hity hity
				add hitx hity
				sqrt hitx hitx
				ifg hitx 420 set temp YES
			}
			else set temp YES
		}
		
		ife temp YES
		{
			set deaonwall -1
			action APDEAFALLING
			ifvarand extbits 2 
			{ 
				iffloordistl 64 nullop else 
				{
					set saberdash 1 set dashang deawallang 
					ifvarand extbits 4 sub dashang 384 else ifvarand extbits 8 add dashang 384
					set walldash -10
				}
			}
		}
		else
		ifge deawalltime 6
		{
			ifvarand extbits 1 // move forward
			{
				setp[].jumping_counter 181
				set deaonwall -1
				action APDEAJUMPING
				set walldash -10 // to keep camera active
				set saberdash 1 set dashang deawallang
				ifvarand extbits 4 sub dashang 384 else ifvarand extbits 8 add dashang 384
			}
			else
			ifvarand bits 1 // jump
			{
				setp[].jumping_counter 181
				set deaonwall -1
				action APDEAJUMPING
			}
			else
			ifvarand extbits 4 // move left
			{
				set deaonwall -1
				setp[].poszv -256
				action APDEAJUMPING
				set walldash 10
				set saberdash 1 set dashang deawallang
				ifn player[].look_ang 0
				{
					getp[].ang angvar
					add angvar player[].look_ang
					setp[].ang angvar
					setp[].oang angvar
					set SAVEDANG angvar
					setp[].look_ang 0
					set look_ang_wait 0
				}
				sub dashang 256
			}
			else
			ifvarand extbits 8 // move right
			{
				set deaonwall -1
				setp[].poszv -256
				action APDEAJUMPING
				set walldash 10
				set saberdash 1 set dashang deawallang
				ifn player[].look_ang 0
				{
					getp[].ang angvar
					add angvar player[].look_ang
					setp[].ang angvar
					setp[].oang angvar
					set SAVEDANG angvar
					setp[].look_ang 0
					set look_ang_wait 0
				}
				add dashang 256
			}
		}
	}
	else set look_ang_wait 0
}
else
ife pchar 2
{
	set deaonwall -1
	set sab_idle 19458
	ifg saberblood 0 sub saberblood 1
	ife VOLUME 6 ifg LEVEL 37 nullop else
	ife gotsaber 0 set gotsaber 1
	
	// holoduke quote check
	ife player[].ftq 91 setp[].ftq 1201
	
	ifsound MOVESWORD nullop else
	ife holdinteract 1
	ife saberpos 0
	ife player[].curr_weapon KNEE_WEAPON
		screensound MOVESWORD
}
else
{
	set deaonwall -1
	ife pchar 0
	set sab_idle 10928
	else
	ife pchar 3
	set sab_idle 20705
	else
	set sab_idle 10940
	rand temp 5
	add sab_idle temp
}
	
ife saberpos 0 ife saberdash 0 set dashtarg -1
ifn blockang 6666
{
	// ifg sprite[].htextra 0 ife sprite[].htpicnum SHOTSPARK1
	// { seta[].htextra -1 ifl blockang 0 set blockang -9 else set blockang 9 }
	ife gotsaber 0 set blockang 6666
	ifg PLAYERONTHEBIKE 0 set blockang 6666
	ifn player[].weapon_pos 0 set blockang 6666
	ifn player[].curr_weapon KNEE_WEAPON set blockang 6666
	ifn blockang 6666
	{
		setp[].kickback_pic 0 // prevents KNEE from firing
		
		ifl blockang 0 { set saberpos 85 add blockang 1 } else
		ifg blockang 0 { set saberpos 86 sub blockang 1 }
		
		ifvarand bits 4 ifg gotsaber 1
		{
			ifg blockang -6 ifl blockang 6
			set blockang 0
		}
		ife blockang 0 
		{
			set blockang 6666 ifg gotsaber 0 
			ifn halfpoint 0 set halfpoint 0 else
			{ 
				ife pchar 4 addphealth -3 else
				ife pchar 2 addphealth -3
				else
				sub gotsaber 1 
				set halfpoint 1 
			}
		}
		ife blockang 6666 { set saberpos 0 setp[].kickback_pic 0 }
	}
}
ifvarand bits 4
ifn startmode -1
ifp palive
ife player[].curr_weapon KNEE_WEAPON
ifn gotsaber 0
ife saberpos 0
ife heldobject -1
ife player[].kickback_pic 0
ife player[].weapon_pos 0
ife vendor_screen 0
ife transition 0
ifn PLAYERONTHEBIKE 1
ife deaonwall -1
ife zoomcount 0
ife qk_proxy 0
ife player[].quick_kick 0
	state startsaber
	
ifn saberpos 0
{
	setp[].curr_weapon KNEE_WEAPON
	setp[].weapon_pos 0
	set sidekick 0
	set qk_proxy 0
	setp[].quick_kick 0
	getp[].ang savx
	getp[].horiz savy
	set angvar savx
	set y2 savy
	set safecount 0 // firing flag
	ife pchar 4
	{
		switch saberpos
		// overhand R to L
		case 8 add y2 16 add angvar 32 shoot SABERPROJ set safecount 1 break
		case 9 add y2 8 add angvar 16 shoot SABERPROJ set safecount 1 break
		case 10 sub y2 8 sub angvar 16 shoot SABERPROJ set safecount 1 break
		case 11 sub y2 16 sub angvar 32 shoot SABERPROJ set safecount 1  break
		// overhand L to R
		case 24 add y2 16 sub angvar 32 shoot SABERPROJ set safecount 1 break
		case 25 add y2 8 sub angvar 16 shoot SABERPROJ set safecount 1 break
		case 26 sub y2 8 add angvar 16 shoot SABERPROJ set safecount 1 break
		case 27 sub y2 16 add angvar 32 shoot SABERPROJ set safecount 1 break
		// horizontal R to L
		case 39 add angvar 64 set safecount 1 break
		case 40 add angvar 32 shoot SABERPROJ set safecount 1 break
		case 41 shoot SABERPROJ set safecount 1 break
		case 42 sub angvar 32 shoot SABERPROJ set safecount 1 break
		case 43 sub angvar 64 set safecount 1 break
		// right and left uppercut
		case 53 case 66 sub y2 8 shoot SABERPROJ set safecount 1 break
		case 54 case 67 shoot SABERPROJ shoot SABERPROJ break
		case 55 case 68 add y2 16 shoot SABERPROJ set safecount 1 break
		case 56 case 69 add y2 24 shoot SABERPROJ set safecount 1 break
		
		// horizontal L to R
		case 76 sub angvar 64 set safecount 1 break
		case 77 sub angvar 32 shoot SABERPROJ set safecount 1 break
		case 78 shoot SABERPROJ set safecount 1 break
		case 79 add angvar 32 shoot SABERPROJ set safecount 1 break
		case 80 add angvar 64 set safecount 1 break
		
		// stabs
		case 93 case 94 case 95
		case 107 case 108 case 109
			shoot SABERPROJ	shoot SABERPROJ shoot SABERPROJ
		break
	
		endswitch
	}
	else
	{
		switch saberpos
		// angle 2 R to L
		case 8 add y2 16 add angvar 32 set safecount 1 break
		case 9 add y2 8 add angvar 16 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 10 sub y2 8 sub angvar 16 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 11 sub y2 16 sub angvar 32 set safecount 1 break
		// angle 2 L to R
		case 24 add y2 16 sub angvar 32 set safecount 1 break
		case 25 add y2 8 sub angvar 16 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 26 sub y2 8 add angvar 16 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 27 sub y2 16 add angvar 32 set safecount 1 break
		// downstrike
		case 39 add y2 20 set safecount 1 break
		case 40 add y2 10 set safecount 1 break
		case 41 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 42 sub y2 10 set safecount 1 break
		case 43 sub y2 20 set safecount 1 break
		// angle 3 right to left
		case 52 sub y2 16 add angvar 32 set safecount 1 break
		case 53 sub y2 8 add angvar 16 ifg gotsaber 0 shoot SABERPROJ set safecount 1 break
		case 54 add y2 8 sub angvar 16 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 55 add y2 16 sub angvar 32 ifg gotsaber 0 shoot SABERPROJ set safecount 1 break
		// angle 3 left to right
		case 65 sub y2 16 sub angvar 32 set safecount 1 break
		case 66 sub y2 8 sub angvar 32 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 67 add y2 8 add angvar 16 ifg gotsaber 0 { shoot SABERPROJ shoot SABERPROJ } set safecount 1 break
		case 68 add y2 16 add angvar 32 set safecount 1 break
	
		endswitch
	}
	/*
	case 8 case 9 case 10 case 11 // angle 2 R to L
	case 24 case 25 case 26 case 27 // angle 2 L to R
	case 39 case 40 case 41 case 42 case 43 // vertical
	case 52 case 53 case 54 case 55 // angle 3 R to L
	case 65 case 66 case 67 case 68 // angle 3 L to R
	shoot SABERPROJ shoot SABERPROJ shoot SABERPROJ
	*/
	
	ifn safecount 0
	{
		setp[].ang angvar
		setp[].horiz y2
		ifg gotsaber 0 
		{
			shoot SABERPROJ
			ifn pchar 2 ifn pchar 4 shoot SABERPROJ else
			ifvarand player[].player_par 1 shoot SABERPROJ
			ife pchar 4
			ifg switchboost 0 ifle switchboost 15 { shoot SABERPROJ shoot SABERPROJ }
		}
		setp[].ang savx
		setp[].horiz savy
		
		ifl cloak 0
		{
			mul cloak -1
			set switchboost 15
			sound CLOAKOFF
		}
		
	}
	
	setp[].kickback_pic 99 // to prevent KNEE from firing
	ifg saberpos 0
	{
		ife blockang 6666 // not blocking
		add saberpos 1
		
		ife pchar 4
		{
			ife saberpos 97 set saberpos 0 else
			{
				// saberdash increments to 9 then resets to 0
				// 88-100 is right, 102-114 is left
				ife saberpos 101 set saberpos 0 else
				ifg saberpos 115 set saberpos 0
			}
			
			// end strikes the normal way, even if holding fire
			ife saberpos 13 set saberpos -6 // end R overhand
			ife saberpos 29 mul saberpos -1 // end L overhand
			ife saberpos 45 mul saberpos -1 // end R to L horizontal
			ife saberpos 58 set saberpos -13 // end R uppercut
			ife saberpos 71 mul saberpos -1 // end L uppercut
			ife saberpos 82 set saberpos -82 // end L to R horizontal

			ifl saberpos 88 ifg saberpos 86 set saberpos 0 else
			{
				// saberdash increments to 9 then resets to 0
				// 88-100 is right, 102-114 is left
				ife saberpos 101 set saberpos 0 else
				ifg saberpos 115 set saberpos 0
			}
				
		}
		else
		{
			ife saberpos 19 set saberpos 22 else
			ife saberpos 75 set saberpos 51 else
			ife saberpos 80 set saberpos 64 
			
			ifp palive
			ifvarand bits 4 // holding fire
			ifg gotsaber 0
			{
				ife saberpos 14 // finished angle 2 R to L
				{
					randvar temp 1
					ife temp 0 set saberpos 19 else
					set saberpos 76 
					ife pchar 2 sound BLADESWING else
					state sabersound
				}
				
				ife saberpos 31 // finished angle 2 L to R
				{
					randvar temp 2
					ife temp 0 set saberpos 5 else
					ife temp 1 set saberpos 39 else
					set saberpos 71
					ife pchar 2 sound BLADESWING else
					state sabersound
				}
				ife saberpos 47 // finished downward strike
				{
					randvar temp 2
					ife temp 0 set saberpos 19 else
					ife temp 1 set saberpos 76 else
					ife temp 2 set saberpos 71
					ife pchar 2 sound BLADESWING else
					state sabersound
				}
				ife saberpos 58 // completed angle 3 from R to L
				{
					ifrnd 128 set saberpos 19 else
					set saberpos 76
					ife pchar 2 sound BLADESWING else
					state sabersound
					
				}
				ife saberpos 71 // finished angle 3 from L to R
				{
					ifrnd 128 set saberpos 5 // defaults to
					ife pchar 2 sound BLADESWING else
					state sabersound
				}
				
				ifg saberpos 86 { addlogvar saberpos set saberpos 0 } 
				// failsafe
			}
			else
			{
				ife saberpos 13 mul saberpos -1
				ife saberpos 29 mul saberpos -1
				ife saberpos 33 set saberpos 5
				ife saberpos 45 set saberpos -45
				ife saberpos 82 set saberpos -82
				ife saberpos 58 set saberpos -13
				ife saberpos 71 set saberpos -29
			}
			ifg saberpos 86 { addlogvar saberpos set saberpos 0 } 
			// failsafe
		}
	}
	else
	{
		// return to start
		add saberpos 1
		ife saberpos -7 set saberpos 0
		ife saberpos -24 set saberpos 0
		ife saberpos -40 set saberpos 0
		ife saberpos -65 set saberpos 0
		ife saberpos -77 set saberpos 0
		ife saberpos 0 setp[].kickback_pic 0
		ifn saberpos 0 ife pchar 4 ifvarand bits 4
		{
			ife saberpos -3 // returning from R to L overhand
			{
				ifrnd 84 set saberpos 21 // L overhand
				else ifrnd 128 set saberpos 63 // L uppercut
				else set saberpos 75 // L to R horizontal
				ifaction APDEACLAWING nullop else action APDEACLAWING
				state sabersound
			} else
			ife saberpos -8 // returning from R uppercut
			{
				ifrnd 84 set saberpos 21 // L overhand
				else ifrnd 128 set saberpos 63 // L uppercut
				else set saberpos 75 // L to R horizontal
				ifaction APDEACLAWING nullop else action APDEACLAWING
				state sabersound
			} else
			ife saberpos -26 // returning from L overhand
			{
			    ifrnd 84 set saberpos 3 // R overhand
				else ifrnd 128 set saberpos 50 // R uppercut
				else set saberpos 38 // R to L horizontal
				ifaction APDEACLAWING nullop else action APDEACLAWING
				state sabersound
			} else
			ife saberpos -42 // returning from R to L horizontal
			{
				ifrnd 84 set saberpos 21 // L overhand
				else ifrnd 128 set saberpos 63 // L uppercut
				else set saberpos 75 // L to R horizontal
				ifaction APDEACLAWING nullop else action APDEACLAWING
				state sabersound
			} else
			ife saberpos -66 // returning from L uppercut
			{
				ifrnd 84 set saberpos 3 // R overhand
				else ifrnd 128 set saberpos 50 // R uppercut
				else set saberpos 38 // R to L horizontal
				ifaction APDEACLAWING nullop else action APDEACLAWING
				state sabersound
			} else
			ife saberpos -79 // returning from L to R horizontal
			{
				ifrnd 84 set saberpos 3 // R overhand
				else ifrnd 128 set saberpos 50 // R uppercut
				else set saberpos 38 // R to L horizontal
				ifaction APDEACLAWING nullop else action APDEACLAWING
				state sabersound
			}
		}
	}
}

add sabhitsnd 1 ifg sabhitsnd 1536 set sabhitsnd 1533
add clawhitsnd 1 ifg clawhitsnd 1715 set clawhitsnd 1713
add sabclashsnd 1 ifg sabclashsnd 1540 set sabclashsnd 1537


ife player[].curr_weapon KNEE_WEAPON setp[].reloading 0

ifp palive ifn gotsaber 0 ife player[].curr_weapon KNEE_WEAPON
ife onturret -1
ife vendor_screen 0
ifn startmode -1
ife subtitle_time 0 
{
	ife saberpos 0 setp[].kickback_pic 0
	setp[].knuckle_incs 0
	
	ifn player[].weapon_pos 0 
	ife slidekick 0
	ife sidekick 0
	ife jumpkick 0
	ife pdown NO
	{ 
		ife player[].weapon_pos -9 
		ifn pchar 2
		{
			ife pchar 4 soundonce POPCLAW else
			soundonce SABERON 
			
		}
	}
	else
	{
		ifn idleanim 0 { stopactorsound THISACTOR SABERIDLE stopactorsound THISACTOR HANDBLADE_LOOP }
		else
		{
			ife pchar 2 { ifactorsound THISACTOR SABERIDLE stopactorsound THISACTOR SABERIDLE  }
			else
			ife pchar 4 
			{ 
				ifactorsound THISACTOR SABERIDLE stopactorsound THISACTOR SABERIDLE
				ifactorsound THISACTOR HANDBLADE_LOOP nullop else sound HANDBLADE_LOOP 
			}
			else
			soundonce SABERIDLE
		}
		ife saberpick -1 { globalsound WAR_AMBIENCE5 set saberpick 0 }
	}
	
	ifn pchar lastpchar
	ife gotsaber 1 
	{
		set temp NO
		ife lastpchar 2 set temp YES
		ife lastpchar 4 set temp YES
		ife temp YES
		{
			stopactorsound THISACTOR SABERIDLE
			stopactorsound THISACTOR HANDBLADE_LOOP
			set saberpos 0
		}
	}
}
else
{
	stopactorsound THISACTOR SABERON
	
	ifactorsound THISACTOR SABERIDLE 
	ifp palive ife pdown NO
	ife subtitle_time 0
	ifn pchar 2
	{
		ife pchar 4 sound SHEATHCLAW else
		sound SABEROFF 
	}
		
	
	stopactorsound THISACTOR HANDBLADE_LOOP
	stopactorsound THISACTOR SABERIDLE
	
	set lastsab 0
	ife saberpick YES 
	{
		ife player[].weapon_pos -9
		{
			setp[].curr_weapon KNEE_WEAPON
			set saberpick -1
		}
		ifp palive nullop else set saberpick NO
	}
	
}
	ifn dashing 0
	{
		set saberdash 0
		ifg dashing 0
		{
			cos xvel dashang
			sin yvel dashang
			// shiftl xvel 10
			// shiftl yvel 10
			mul xvel 768
			mul yvel 768
			setp[].posxv xvel
			setp[].posyv yvel
			sub dashing 1
			ife dashing 0 set dashing -30
		}
		else ifl dashing 0 add dashing 1
	}
	ifg saberdash 0
	{
		add saberdash 1
		ifg walldash 0
		{
			sub walldash 1
			setp[].poszv -256
		}
		else
		ifl walldash 0 add walldash 1
		ife pchar 4
		{
			ife saberdash 12
				set saberdash 0
			else
			ifge saberdash 10 // 9
			ife dashtarg -1
			{
				// hitscan for wall
				// ifp ponground nullop else
				ifg player[].cursectnum -1
				ifl player[].cursectnum 4096
				{
					getp[].ang angvar

					cos mycos angvar
					sin mysin angvar
					
					hitscan player[].posx player[].posy player[].posz player[].cursectnum mycos mysin 0 hitsector deaonwall hitsprite hitx hity hitz CLIPMASK1
				
					ifn deaonwall -1
					{
						sub hitx player[].posx
						sub hity player[].posy
						mul hitx hitx
						mul hity hity
						add hitx hity
						sqrt hitx hitx
						
						ifg hitx 384 set deaonwall -1
						else ife wall[deaonwall].pal 3 set deaonwall -1
						else
						{
							getwall[deaonwall].point2 B
							getwall[deaonwall].x x2
							getwall[deaonwall].y y2
							getwall[B].x x
							getwall[B].y y
							subvarvar x2 x
							subvarvar y2 y
							getangle deawallang x2 y2
							add deawallang 512
							// getp[].ang deawallang
							setp[].ang deawallang
							seta[].ang deawallang
							set dashang deawallang
							set kickang deawallang
							setp[].posxv 0
							setp[].posyv 0
							setp[].poszv 0
							setp[].jumping_counter 0
							getp[].posx deawallx
							getp[].posy deawally
							getp[].posz deawallz
							// setp[].horiz 100
							set saberpos 0
							set saberdash 0
							set deawalltime 0
						}
					}
				}
			}
		} else
		ife saberdash 9 
		{ 
			ife dashtarg -1 ifg gotsaber 0 ifn pchar 2 sub gotsaber 1 set saberdash 0 
		}
		
		ife saberdash 2
		{
			ife pchar 4
			{
				// 88-97 is right, 99-108 is left
				ife devside 0 { set saberpos 88 set devside 1 } else { set saberpos 102 set devside 0 }
				state sabersound 
			}
			else
			{
				randvar temp 4
				ife temp 0 { set saberpos 1 ife pchar 2 sound BLADESWING else sound SABSWING1 } else
				ife temp 1 { set saberpos 15 ife pchar 2 sound BLADESWING else sound SABSWING3 } else
				ife temp 2 { set saberpos 35 ife pchar 2 sound BLADESWING else sound SABSWING4 } else
				ife temp 3 { set saberpos 47 ife pchar 2 sound BLADESWING else sound SABSWING5 } else
				{ set saberpos 60 ife pchar 2 sound BLADESWING else sound SABSWING3 }
			}
		}
		setplayer[THISACTOR].falling_counter 0
		setplayer[THISACTOR].hard_landing 0
		cos xvel dashang
		sin z2 dashang
		ife dashtarg -1
		{
			 // shiftvarl xvel 7 shiftvarl z2 7
			 mul xvel 96 mul z2 96
		}
		else
		{
			dist xydist THISACTOR dashtarg
			shiftvarr xydist 4
			mul xvel xydist
			mul z2 xydist
		}
		ifn dashtarg -1
		{
			dist xydist THISACTOR dashtarg
			ifl xydist 480 { set xvel 0 set z2 0 }
		}
		getplayer[THISACTOR].posxv x
		getplayer[THISACTOR].posyv y
		addvarvar x xvel
		addvarvar y z2
		setplayer[THISACTOR].posxv x
		setplayer[THISACTOR].posyv y
		
		ifn dashtarg -1
		{
			geta[dashtarg].x x2
			geta[dashtarg].y y2
			sub x2 player[].posx
			sub y2 player[].posy
			getangle angvar x2 y2
			setp[].ang angvar
		}
	}
	
	ifvarand extbits 64
	ife saberdash 0
	ife dashing 0
	ife jumpkick 0
	ife slidekick 0
	ife player[].curr_weapon KNEE_WEAPON
	ife saberpos 0
	ife player[].kickback_pic 0
	ife player[].weapon_pos 0
	ifg gotsaber 0
	ifp palive
	ife deaonwall -1
	{
		set saberdash 1
		getp[].ang dashang
		ife pchar 4 action APDEASTAB
	}
// ** END OF LIGHTSABER CODE

ifvarand extbits 64 add holdaltfire 1 else set holdaltfire 0

ifvarn chainsparksprite -1
{
	ifvarn sprite[chainsparksprite].statnum 1024
	{
		getplayer[THISACTOR].posx savx
		getplayer[THISACTOR].posy savy
		getplayer[THISACTOR].posz savz
		getplayer[THISACTOR].cursectnum TMP_A
		
		setvarvar x2 sprite[chainsparksprite].x
		addvar x2 384
		rotatepoint sprite[chainsparksprite].x sprite[chainsparksprite].y x2 sprite[chainsparksprite].y sprite[chainsparksprite].ang x y
		set temp sprite[chainsparksprite].sectnum
		updatesector x y temp
		ifvarn temp -1
		{
			setplayer[THISACTOR].posx x
			setplayer[THISACTOR].posy y
			getactor[chainsparksprite].z z
			subvar z 2048
			setplayer[THISACTOR].posz z
			
			addvar z 8192
			getplayer[THISACTOR].i TMP_B
			setsprite TMP_B x y z
			changespritesect TMP_B temp
			setplayer[THISACTOR].cursectnum temp
			
			shoot BARRETPROJ	
			
			setplayer[THISACTOR].posx savx
			setplayer[THISACTOR].posy savy
			setplayer[THISACTOR].posz savz
			setplayer[THISACTOR].cursectnum TMP_A
			addvar savz 8192
			setsprite TMP_B savx savy savz
			changespritesect TMP_B TMP_A
		}
	}
	setvar chainsparksprite -1
}

ife cmode 0
{
	ifg gametype 0 
	{
		set temp NO
		ifvarand extbits 1 set temp YES
		ifvarand extbits 2 set temp YES
		ife temp YES
		{
			ifvarand extbits 4 setp[].runspeed FLAGRUNSPEED else
			ifvarand extbits 8 setp[].runspeed FLAGRUNSPEED else
			setp[].runspeed RUNNINGSPEED
		}
		else setp[].runspeed RUNNINGSPEED
		
	}
	else setp[].runspeed RUNNINGSPEED
	
	ife pdown YES setp[].runspeed 10240
}

ifg gamespeed 120
{
	set temp NO
	set tempb NO
	ifvarand extbits 1 set tempb YES
	ifvarand extbits 2 set tempb YES
	ifvarand extbits 4 set temp YES
	ifvarand extbits 8 set temp YES
	getp[].runspeed xvel
	ifp ponground
	{
		ife temp YES ife tempb YES
		{
			mul xvel 8 div xvel 9
		}
		else
		{
			mul xvel 9 div xvel 10
		}
	}
	ifp pshrunk nullop else
	ifl gametype 1
	setp[].runspeed xvel
	
	getp[].poszv z
	ifg z 4096 set z 4096
	setp[].poszv z
}

ife player[].steroids_amount 398
{
	ifsound DUKE_TAKEPILLS { stopsound DUKE_TAKEPILLS screensound USE_ADREN }
	else
	ifsound B_TAKEPILLS { stopsound B_TAKEPILLS screensound USE_ADREN }
}

ife win 2 // give upgrades
{
	set healthbuff 150
	setp[].max_player_health healthbuff
	set ancients 7
	set temp 0
	whilevarn temp 600
	{
		setarray weap_owned[temp] YES
		add temp 1
	}
	set temp 0
	whilevarn temp 12
	{
		setarray dukeupgrades[temp] 1023
		setarray shellyupgrades[temp] 1023
		setarray wesupgrades[temp] 1023
		setarray mandoupgrades[temp] 1023
		setarray novaupgrades[temp] 1023
		add temp 1
	}
	ife gametype 0
	{
		spawn FIRSTGUNSPRITE
		spawn SHOTGUNSPRITE
		spawn CHAINGUNSPRITE
		spawn RPGSPRITE
		spawn HBOMBAMMO
		spawn SHRINKERSPRITE
		spawn DEVISTATORSPRITE
		spawn FREEZESPRITE
		spawn GROWSPRITEICON
		spawn LASERPISTOL
		spawn BOWSPRITE
		spawn DBSPRITE
		spawn TRIPBOMBSPRITE
		spawn TRIPBOMBSPRITE
		add credits 50000
		add lastcredits 50000
		add totalcredits 50000
		ifl plevel 4 set plevel 4
		ife attmode 0 set attmode 2
	}
	
	set es_type 5
	set es_battery -1
	set es_hp 0
	set es_delaycount 100
	set novatype 1
	screensound EQUIPSHIELD
	
	ife pchar 0 state dukeweapons else
	ife pchar 1 state shellyweapons else
	ife pchar 2 state wesweapons else
	ife pchar 3 state mandoweapons else
	ife pchar 4 state novaweapons
	set win 0
}
else ifge win 4
{
	set vendorupgrade YES
	set radaron YES
	set perks 32767
	set inven_upgrades 63
	set iframes_max 8
	set es_type 5
	set es_battery -1
	set es_hp 0
	set es_delaycount 100
	set novatype 1
	setarray es_owned[5] YES
	screensound EQUIPSHIELD
	ifl plevel win set plevel win
	set nextplevel 10240
	set temp 0
	whilevarvarn temp plevel
	{
		mul nextplevel 5
		div nextplevel 4
		add temp 1
	}
	
	set healthbuff plevel
	sub healthbuff 1
	mul healthbuff 10
	add healthbuff 100
	setp[].max_player_health healthbuff
	
	div win 2
	sub win 1
	
	set countvar 0
	whilevarn countvar 13
	{
		setarray dweaplevel[countvar] win
		setarray bweaplevel[countvar] win
		setarray wweaplevel[countvar] win
		setarray mweaplevel[countvar] win
		setarray nweaplevel[countvar] win
		add countvar 1
	}
	
	set temp 500
	whilevarn temp 530
	{
		setarray weap_owned[temp] YES
		add temp 1
	}
		
	
	// set temp 0
	// whilevarn temp 600
	// {
		// setarray weap_owned[temp] YES
		// add temp 1
	// }
	// set temp 0
	// whilevarn temp 12
	// {
		// setarray dukeupgrades[temp] 1023
		// setarray shellyupgrades[temp] 1023
		// setarray wesupgrades[temp] 1023
		// setarray mandoupgrades[temp] 1023
		// setarray novaupgrades[temp] 1023
		// add temp 1
	// }
	set win 0
}

ifg gametype 0
ifg gametime 0
{
	ifg gametime 1 ife win 1
	{
		set gametime 1
		set bluescore scorelimit
		add bluescore 1000
		ife gametype SURVIVAL
		{
			set spawnsleft 0
			ifg monleft 1 set monleft 1
			headspritestat spriteid 1
			whilevarn spriteid -1
			{
				ifn actorvar[spriteid].teamspawned -1
				ife actorvar[spriteid].monstatus 1
				ife actorvar[spriteid].team 0
				ifg sprite[spriteid].extra 5
					seta[spriteid].extra 5
					
				nextspritestat spriteid spriteid
			}
		}
		set win 0
	}
	ifn gametype SURVIVAL sub gametime 1
	ife unbalanced NO
	ifn gametype SURVIVAL
	{
		set temp redscore
		mul temp 7
		div temp 4
		ifl temp bluescore // IMBALANCE!
		{
			ifl gametime 7200
			{
				set unbalanced YES
				// stopallsounds
				set emp_overlay_tile 12266
				set cutcamtime player[].player_par
				ife gametype DM
				{
					screensound DOMINATION
					screensound DOMINATION
					screensound DOMINATION
					screensound DOMINATION
					set emp_overlay 60
					set subtitle_time 60
					set subtitle_start 739
					set subtitle_numlines 1
				}
				else
				{
					screensound UNBALANCED
					screensound UNBALANCED
					screensound UNBALANCED
					screensound UNBALANCED
					set emp_overlay 240
					set subtitle_time 240
					set subtitle_start 534
					set subtitle_numlines 2
				}
				
			}
			else
			{
				set tempb bluescore
				// mul tempb 5
				// div tempb 3
				mul tempb 2
				ifg tempb scorelimit
				{
					set unbalanced YES
					// stopallsounds
					set emp_overlay_tile 12266
					set cutcamtime player[].player_par
					ife gametype DM
					{
						screensound DOMINATION
						screensound DOMINATION
						screensound DOMINATION
						screensound DOMINATION
						set emp_overlay 60
						set subtitle_time 60
						set subtitle_start 739
						set subtitle_numlines 1
					}
					else
					{
						screensound UNBALANCED
						screensound UNBALANCED
						screensound UNBALANCED
						screensound UNBALANCED
						set emp_overlay 240
						set subtitle_time 240
						set subtitle_start 534
						set subtitle_numlines 2
					}
				}
			}
		}
		
		// ifhitspace
		// ife thiscam -1
		// {
			// set unbalanced YES
			// globalsound UNBALANCED
			// set emp_overlay_tile 12266
			// set emp_overlay 240
			// set cutcamtime player[].player_par
			// set subtitle_time 240
			// set subtitle_start 534
			// set subtitle_numlines 2
		// }
	}
}

ife gametime 0 ifg gametype 0
{
	// end game or overtime
	ifn redscore bluescore
	{
		setp[].timebeforeexit 180 set endgametime gametime set gametime -1
	}
}

ife gametype SURVIVAL state sethordeval else
ife gametype -1 state sethordeval else
ife gametype DM state sethordeval

state spawnprotectcode
ife pdown YES { set monstatus 2 set ppowcount 0 set prating 0 }
else
{
	ifp palive
	{
		ifspritepal 33 
		ife spawnprotect 0
		{
			ife pchar 0 seta[].pal dukepal
			ife pchar 1 seta[].pal shellypal
			ife pchar 2 seta[].pal wespal
			ife pchar 3 seta[].pal mandopal
			ife pchar 4 seta[].pal novapal
		}
		set mlevel plevel
		set temp player[].player_par
		modvar temp 15
		ife temp 0
		{
			// if score is high enough, add 1 to ppowcount
			set prating 0
			
			ife player[].gotweapon PISTOL_WEAPON YES
			{
				set tempb player[].ammo_amount PISTOL_WEAPON
				div tempb 3, ifg tempb 50 set tempb 50 add prating tempb
				add prating LASERAMMO
			}
			ife player[].gotweapon SHOTGUN_WEAPON YES
			{
				set tempb player[].ammo_amount SHOTGUN_WEAPON
				ifg tempb 51 set tempb 51
				add prating tempb
			}
			ife player[].gotweapon CHAINGUN_WEAPON YES
			{
				set tempb player[].ammo_amount CHAINGUN_WEAPON
				div tempb 3, ifg tempb 50 set tempb 50 add prating tempb
			}
			ife player[].gotweapon RPG_WEAPON YES
			{
				set tempb player[].ammo_amount RPG_WEAPON
				mul tempb 3, ifg tempb 50 set tempb 50 add prating tempb
			}
			set tempb player[].ammo_amount HANDBOMB_WEAPON
			mul tempb 2
			ifg tempb 50 set tempb 50
			add prating tempb
			ife player[].gotweapon SHRINKER_WEAPON YES
			{
				set tempb player[].ammo_amount SHRINKER_WEAPON
				mul tempb 2, ifg tempb 50 set tempb 50 add prating tempb
				add prating COMMAMMO
			}
			ife player[].gotweapon DEVISTATOR_WEAPON YES
			{
				set tempb player[].ammo_amount DEVISTATOR_WEAPON
				add prating tempb
				ifg tempb 50 set tempb 50
				add prating railgunammo
			}
			ife player[].gotweapon TRIPBOMB_WEAPON YES
			{
				set tempb player[].ammo_amount TRIPBOMB_WEAPON
				mul tempb 3, ifg tempb 50 set tempb 50 add prating tempb
			}
			ife player[].gotweapon FREEZE_WEAPON YES
			{
				set tempb player[].ammo_amount FREEZE_WEAPON
				add prating tempb
				ifg tempb 50 set tempb 50
				add prating plasmammo
			}
			ife player[].gotweapon GROW_WEAPON YES
			{
				set tempb player[].ammo_amount GROW_WEAPON
				ifg tempb 50 set tempb 50
				add prating tempb
			}
			ifg gotsaber 0
			{
				set tempb gotsaber
				ifg tempb 30 set tempb 30
				add prating tempb
			}
			ifg pchar 0 ifl pchar 3
			ifvarand gotbow 1
			ifg arrows 0
			{
				set tempb arrows
				ifg tempb 50 set tempb 50
				add prating tempb
			}
			ifn pchar 1 ifn pchar 2
			ifvarand gotDB 1
			{
				set tempb dbammo
				ifg tempb 50 set tempb 50
				add prating tempb
			}
			ifg prating 500 set prating 500 // max from ammo
			
			set tempb sprite[].extra
			mul tempb 4
			add prating tempb
			
			set tempb player[].firstaid_amount
			mul tempb 3 div tempb 2
			add prating tempb
			
			set tempb player[].max_player_health
			mul tempb 3
			sub prating tempb
			
			ife es_type 0 set tempb player[].shield_amount else
			{
				set tempb es_hp
				add tempb es_battery
				div tempb 2
			}
			ifg tempb 150 set tempb 150
			add prating tempb
			
			set TMP_B 900
			ifg plevel 3
			{
				set tempb plevel
				mul tempb 9
				sub TMP_B tempb
			}
			
			ifg prating TMP_B
			ifge SKILL 3
			add ppowcount 1
			else set ppowcount 0
		}
		set monstatus 1
		// ife mysignpost -1 state spawnmysignpost
		ife gametype 0 ifge sprite[].extra 75
		ifp ponground
		ife AUTOSAVE YES
		ife checkpoints NO
		{
			set temp player[].player_par
			sub temp lastsave
			ifg temp 5400
			{
				set spriteid player[].i
				setav[spriteid].spawnprotect 90
				state autosave
			}
		}
	}
	else ifn sprite[].pal 1 set monstatus 2
}

ifl gametype 1
ifn myshelly -1
{
	set x trueoldx
	set y trueoldy
	sub x player[].posx
	mul x x
	sub y player[].posy
	mul y y
	add x y
	sqrt x x
	ifg x 4096
	ife actorvar[myshelly].monstatus 30
	{
		setsprite myshelly player[].posx player[].posy player[].posz
		setav[myshelly].crumbwait 0
	}
}
getp[].posx trueoldx
getp[].posy trueoldy

state gladiatorstuff

// movement tech block

ifg padmove 0
{
	cos xvel padang
    sin yvel padang
     
	mul xvel jumpadxvel
	mul yvel jumpadxvel
    setplayer[THISACTOR].posxv xvel
	setplayer[THISACTOR].posyv yvel
	
	setplayer[THISACTOR].falling_counter 0
	ife pchar 0
	{
		ifaction PJUMPING nullop else action PJUMPING
	}
	ife pchar 1
	{
		ifaction APSHELLYJUMPING nullop else action APSHELLYJUMPING
	}
	ife pchar 2
	{
		ifaction APWESGLIDING nullop else
		ifaction APWESJUMPING nullop else action APWESJUMPING
	}
	ife pchar 3
	{
		ifaction APMANGLIDING nullop else
		ifaction APMANJUMPING nullop else action APMANJUMPING
	}
	ife pchar 4
	{
		ifaction APDEAJUMPING nullop else action APDEAJUMPING
	}
	
	sub padmove 1
	ife padmove 0 
		setp[].movement_lock 0
}
ifp ponground 
{ 
	// ife nofalldamage 1 ife gametype 0 ifn myshelly -1 setsprite myshelly player[].posx player[].posy player[].posz
	ife nofalldamage YES setp[].over_shoulder_on NO
	set nofalldamage 0 
	set walldash 0 
}
ifn nofalldamage 0 setp[].falling_counter 0
ife globalnofall YES setp[].falling_counter 0


ifg cutcamtime 0
{
	ifn cutcam -1
	{
		setp[].kickback_pic 0
		setp[].weapon_pos -9
		setp[].quick_kick 0
		set qk_proxy 0
		setp[].crack_time 0
		ife player[].ftq 80 setp[].fta 0
		stopactorsound THISACTOR DUKE_GRUNT
		setp[].knuckle_incs 0
		setp[].horiz 100
		seta[].htextra -1
		lockplayer 10
		ifn actorvar[cutcam].droptile 122
		{
			setp[].posx sprite[cutcam].x
			setp[].posy sprite[cutcam].y
			setp[].over_shoulder_on YES
		}
		setp[].jumping_counter 0
	}
	else ifg emp_overlay 0 // hud overlay feature for character speaking
	{
		set tempb player[].player_par
		sub tempb cutcamtime
		ifg tempb 1 // advance frame
		ifl emp_overlay_tile 12270
		{
			add emp_overlay_tile 1
			ifg emp_overlay_tile 12269 set emp_overlay_tile 12266
			set cutcamtime player[].player_par
		}

		sub emp_overlay 1
		// start second set of subtitles
		ifsound PROT_BIGSPEECH 
		{
			ifhitspace al emp_overlay
			// start 2nd set of subtitles
			ife emp_overlay 470
			{
				set subtitle_start 1647
				set subtitle_numlines 4
				set subtitle_time 420
			}

			ife emp_overlay 150 
			{
				starttrackslot 7 15
				setuserdef[].music_episode 7
				setuserdef[].music_level 15
			}
		}
		ife emp_overlay 0
			set cutcamtime 0
	}
}

set temp NO
ifvarand perks 4 set temp YES
ifg fastfire 0 set temp YES

ife temp YES
{
	ifg qk_proxy 0
	{
		switch qk_proxy
		case 15 case 13 case 11 case 9 case 4 // case 2
			sub qk_proxy 1
		break
		endswitch
		
		sub qk_proxy 1
		ife qk_proxy 9 
		{
			shoot KNEE
			ifn zombieonplayer -1
			{
				seta[zombieonplayer].htpicnum KNEE
				seta[zombieonplayer].htextra KNEE_WEAPON_STRENGTH
				seta[zombieonplayer].htowner THISACTOR
				seta[zombieonplayer].htang player[].ang
			}
			ifl cloak 0
			{
				mul cloak -1
				set switchboost 15
				sound CLOAKOFF
			}
		}
	}
	else
	ifn player[].quick_kick 0
	{
		switch player[].quick_kick
		case 14 case 12 case 10 case 8 case 4 // case 2
			getp[].quick_kick temp
			sub temp 1
			setp[].quick_kick temp
		break
		case 9
			ifn zombieonplayer -1
			{
				seta[zombieonplayer].htpicnum KNEE
				seta[zombieonplayer].htextra KNEE_WEAPON_STRENGTH
				seta[zombieonplayer].htowner THISACTOR
				seta[zombieonplayer].htang player[].ang
			}
		break
		endswitch
	}
	else
	ife LASERMODE 0
	ife player[].curr_weapon 0
	ifn player[].kickback_pic 0
	{
		switch player[].kickback_pic
		case 9 case 7 case 3 case 1
			getp[].kickback_pic temp
			add temp 1
			setp[].kickback_pic temp
		break
		endswitch
	}
}
else
ifg qk_proxy 0
{
	sub qk_proxy 1
	ife qk_proxy 9 
	{
		shoot KNEE
		ifn zombieonplayer -1
		{
			seta[zombieonplayer].htpicnum KNEE
			seta[zombieonplayer].htextra KNEE_WEAPON_STRENGTH
			seta[zombieonplayer].htowner THISACTOR
			seta[zombieonplayer].htang player[].ang
		}
	}
}

ifg juice_pos 0
{
	ifhitspace ifn babesaved -1 add juice_pos 1
	else { ifg juice_pos 30 set juice_pos 30 sub juice_pos 1 }
	ifge juice_pos 50 set juice_pos 50
	ifge player[].weapon_pos 0 setp[].weapon_pos -9
	
}
ife babesaved -1 ife player[].ftq 1114 setp[].fta 0

ifg soundstopper 0 sub soundstopper 1
ifg musicwait 0
{
	sub musicwait 1
	ife musicwait 0 
	{
		ife VOLUME 4 ife LEVEL 4
		{
			starttrack 8
		}
		else
		{
			// starttrackvar LEVEL
			getuserdef[].music_episode mtype
			getuserdef[].music_level tempb
			starttrackslot mtype tempb
		}
	}
}

ifn sidekick 0 set idleanim 0
ifn qk_proxy 0 set idleanim 0

ifg idleanim 0
{
	add idleanim 1
	
	ifn pchar 2
	{
		ifge idleanim 69 // nice!
		set idleanim 0
		ife pchar 4
		{
			ife idleanim 2 { rand flashang 2047 screensound BUBBLEBLOW }
			ife idleanim 40 screensound BUBBLEPOP
		}
	}
	else
	{
		setp[].crack_time 600
		stopactorsound THISACTOR SAWBLADE_LOOP
		ifvarand idleanim 1
		ifg idleanim 30 ifl idleanim 320
		{
			ifg idleanim 110 ifl idleanim 180 nullop else
			{
				set temp westhumbs
				ifrnd 128
				{
					rand westhumbs 3
					ifn temp westhumbs screensound PRESSBUTTON
				}
			}
		}
		ifge idleanim 329
		set idleanim 0
	}

	ife pchar 4 ifg idleanim 60 nullop else
	ifg player[].weapon_pos 8 setp[].weapon_pos 11 else
	ife player[].weapon_pos 0 setp[].weapon_pos 11
	
	ifn player[].fist_incs 0 set idleanim 0
	ifvarand bits 4 { set idleanim 0 setp[].weapon_pos 3 }
	ifvarand extbits 64 { set idleanim 0 setp[].weapon_pos 3 }
	// ifhitspace set idleanim 0
	ifn player[].kickback_pic 0 set idleanim 0
	
	ife idleanim 50
	ifn pchar 2
	ifn pchar 4
	{
		espawn BIGSMOKE 
		
		getp[].posx x2
		add x2 160
		getp[].ang angvar, add angvar 48
		getp[].posz z add z 1024
		getp[].horiz zdist
		sub zdist 100
		shiftl zdist 5
		sub z zdist
		rotatepoint player[].posx player[].posy x2 player[].posy angvar x y
		setsprite RETURN x y z
		seta[RETURN].xrepeat 10
		seta[RETURN].yrepeat 10
	}
	
}

ifhitspace nullop else
ifn pchar 3
ife player[].movement_lock 0
ifl player[].crack_time 550
ifg player[].crack_time 400
ife player[].tipincs 0
ife heldobject -1
ifl PLAYERONTHEBIKE 1
ifn sector[].lotag 2
ifrnd 4
ife idleanim 0
{
	ife pchar 2 ifrnd 128 nullop else
	{
	set idleanim 1
	setp[].weapon_pos -1
	}
}


ifsound B_AFK2
{
	ifn extbits 0 stopsound B_AFK2
	ifn bits 8388640 stopsound B_AFK2
}
ifsound B_AFK1
{
	ifn extbits 0 stopsound B_AFK1
	ifn bits 8388640 stopsound B_AFK1
}
ife pchar 4 
{
	state deaactions
	ife cameratoggle YES // using a camera
	{
		cstat 257
		set cameratoggle NO
	}
	
	ife player[].reloading YES
	{
		ife player[].curr_weapon SHOTGUN_WEAPON
		{
			switch player[].kickback_pic
			case 14 screensound OPENGUN break
			case 20 case 32 screensound SMALLCHARGE break
			case 47 screensound SELECT3 break
			endswitch
		}
		else
		ife player[].curr_weapon PISTOL_WEAPON
		{
			ife burstfired GREENBULLET
			{
				ife player[].kickback_pic 17 screensound WRISTBUTTON
				ifge player[].kickback_pic 27
				{
					setp[].reloading 0
					setp[].kickback_pic 0
					set burstfired NO
				}
			}
			else ife player[].kickback_pic 15 screensound CYLINDEROUT
			else ife player[].kickback_pic 33 screensound DEAGLE_CLIPIN
		}
	}
	ife player[].ftq 47 setp[].ftq 1417
	ife player[].ftq 48 setp[].ftq 1418
	
	ife player[].knuckle_incs 3 
	ife player[].player_par 2 // game start
	{
		setp[].knuckle_incs 0
		setp[].crack_time 777
		setp[].weapon_pos -6
		setp[].curr_weapon KNEE_WEAPON
	}
	else ifl player[].crack_time 30 setp[].crack_time 777
	
}
else
ife pchar 3
{
	ife player[].gotweapon PISTOL_WEAPON NO	setp[].crack_time 666
	ifge player[].knuckle_incs 7
	ifle player[].knuckle_incs 21
	ifvarand player[].player_par 1
	{
		getp[].knuckle_incs temp
		sub temp 1
		setp[].knuckle_incs temp
	}
	
	ife player[].curr_weapon HANDBOMB_WEAPON
	{
			
		ife player[].kickback_pic 7
			screensound THERMALTHROW
	}
	
	state manactions
	ife cameratoggle YES // using a camera
	{
		cstat 257
		set cameratoggle NO
	}
}
else
ife pchar 2
{
	state wesactions
	ife cameratoggle YES // using a camera
	{
		cstat 257
		set cameratoggle NO
	}
	ifn sector[].lotag 2 ife player[].ftq 89 setp[].ftq 1200
}
else
ife pchar 1 
{
	state shellyactions
	ife cameratoggle YES // using a camera
	{
		cstat 257
		set cameratoggle NO
	}
}
else
{
	ifn myvictim -1
	{
		ife myvictim -2 // friendly fire
		ifrnd 64
		{
			ifsound DUKE_FRIEND_F1 nullop else
			ifsound DUKE_FRIEND_F2 nullop else
			{
				ifrnd 128 globalsound DUKE_FRIEND_F1 else
				globalsound DUKE_FRIEND_F2
				
			}
		}
		set myvictim -1
	}
}

ifg switchboost 0 state switchboostcode

ife player[].ammo_amount PISTOL_WEAPON 0 
	set THISCLIP PISTOLCLIP
else
ife player[].curr_weapon PISTOL_WEAPON
ife LASERMODE 0
ifl player[].ammo_amount PISTOL_WEAPON THISCLIP set THISCLIP player[].ammo_amount PISTOL_WEAPON

ifg THISCLIP PISTOLCLIP set THISCLIP PISTOLCLIP

ife player[].curr_weapon PISTOL_WEAPON
ife LASERMODE NO getp[].ammo_amount PISTOL_WEAPON pistolammo

ifl brutalcount 0 add brutalcount 1
ifg brutalcount 0
{
	ife brutalvictim -1 
	{
		set brutalcount -3
		set brutaltile -1
		setp[].movement_lock 0
	}
	else
	{
		ife subtitle_start 1577 set subtitle_time 0
		setp[].kickback_pic 0
		set qk_proxy 0
		seta[brutalvictim].xvel 0
		seta[brutalvictim].zvel 0
		setp[].posxv 0
		setp[].posyv 0
		setp[].poszv 0
		set slidekick 0
		set sidekick 0
		setav[brutalvictim].stun 150
		ifg brutalcount 3 seta[brutalvictim].cstat 32768
		seta[brutalvictim].htextra -1
		setav[brutalvictim].blueflagval 0 // no knockback
		seta[].htextra -1
		set spriteid brutalvictim
		state facesprite
		setp[].ang angvar
		add angvar 1024
		
		ife pchar 0
		{
			set x sprite[brutalvictim].x
			// ife pchar 1 add x 1024 else
			add x 512
			rotatepoint sprite[brutalvictim].x sprite[brutalvictim].y x sprite[brutalvictim].y angvar newx newy
			setsprite THISACTOR newx newy sprite[].z
			setp[].posx newx setp[].posy newy
		}
		set z sprite[brutalvictim].z
		seta[].z z
		sub z 8192
		setp[].posz z
		
		ife brutalcount 4 // ifle brutalcount 2
		{
			ifvarand gametips 262144 xorvar gametips 262144
			// ifrnd 128 set brutalflip YES else set brutalflip NO
			switch sprite[brutalvictim].picnum
			case NEWPIG
			case NEWPIGDIVE
				ife pchar 0 
				{
					set brutaltile 23215 screensound MELEE_IMPACT
				}
				else
				ife pchar 1 
				{
					set brutaltile 23200  screensound WHIPIT
				}
				// 10 tiles or 14 tiles
			break
			case NEWTROOP
			case NEWTROOPDUCKING
			case ARMLIZTROOP
			case ARMLIZTROOPDUCK
				ife pchar 0 
				{
					set brutaltile 23138
				}
				else
				ife pchar 1 
				{
					set brutaltile 23125 screensound ROPEIT
				}
				// 7 tiles or 13 tiles
			break
			case LIZMAN case LIZMANDUCKING
				ife pchar 0 
					set brutaltile 23114 
				else
				ife pchar 1 
				{
					set brutaltile 23095 screensound WHIPIT
				}
				// 11 tiles or 19 tiles
				ifrnd 96 set brutalflip YES else set brutalflip NO
			break
			case NEWBEAST
				ife pchar 0
					set brutaltile 23225
				else
				{
					set brutaltile 23241 screensound WHIPIT
				}
			break
			endswitch
			set brutalcount 5
			set spriteid brutalvictim
			state facesprite
			setp[].movement_lock 31
			break
		}
		
		add brutalcount 1
		ifl brutalcount 6 break
		
		set temp brutalcount
		sub temp 5
		ife pchar 1 modvar temp 3 else
		{
			ifge brutaltile 23225 modvar temp 3 else
			ifge brutaltile 23215 ifle brutaltile 23221 modvar temp 3 else
			modvar temp 5
		}
		ife temp 0 
		{
			// only check on increment to avoid overlap between end of brutality and start of next one
			add brutaltile 1
			switch brutaltile
			case 23107
			case 23133
			case 23212
				screensound NECKBREAK2
				screensound NECKBREAK2
				screensound NECKBREAK2
				seta[brutalvictim].alpha 0
				seta[brutalvictim].extra 1
				seta[brutalvictim].htextra 10
				seta[brutalvictim].htpicnum SHOTSPARK1
				seta[brutalvictim].htowner player[].i
				seta[brutalvictim].htang sprite[].ang
			break
			case 23118
				screensound SIZZLE
			break
			case 23123
				stopsound SIZZLE
			break
			case 23104
			case 23131
			// case 23203
				screensound BSLAP
			break
			case 23209 screensound ROPEIT break
			case 23141
				screensound NECKBREAK1
				screensound NECKBREAK1
				screensound NECKBREAK1
				seta[brutalvictim].extra 1
				seta[brutalvictim].alpha 0
				seta[brutalvictim].htextra 10
				seta[brutalvictim].htpicnum SHOTSPARK1
				seta[brutalvictim].htowner player[].i
				seta[brutalvictim].htang sprite[].ang
			break
			case 23220 screensound PIG_PAIN break
			case 23224
				screensound SHOTGUN_FIRE
				screensound SHOTGUN_FIRE
				screensound SHOTGUN_FIRE
				set temp NO
				ifl player[].ammo_amount SHOTGUN_WEAPON 3 set temp YES
				ife player[].gotweapon SHOTGUN_WEAPON NO set temp YES
				ife temp YES
				{
					setp[].gotweapon SHOTGUN_WEAPON YES
					ifl player[].ammo_amount SHOTGUN_WEAPON 3 setp[].ammo_amount SHOTGUN_WEAPON 3
					setp[].curr_weapon SHOTGUN_WEAPON
				}
			break
			case 23114 // end of bombshell enforcer
			case 23125 // end of duke enforcer
			case 23138 // end of bombshell liztroop
			case 23145 // end of duke liztroop
			case 23214 // end of bombshell pigcop
			case 23241 // end of duke newbeast
			  ife actorvar[brutalvictim].monstatus 1
			  {
				seta[brutalvictim].cstat 257
				seta[brutalvictim].extra 1
				seta[brutalvictim].alpha 0
				seta[brutalvictim].htextra 100
				seta[brutalvictim].htpicnum SHOTSPARK1
				seta[brutalvictim].htowner player[].i
				seta[brutalvictim].htang sprite[].ang
			  }
			  else
			  seta[brutalvictim].cstat 0
				set brutaltile -1 set brutalvictim -1 set brutalcount -3
				setp[].movement_lock 0
				addphealth 5
			break
			case 23231
			case 23244
				screensound NEWBEAST_PAIN screensound NEWBEAST_PAIN
			break
			case 23233
				screensound JAWBREAK screensound JAWBREAK screensound JAWBREAK
			break
			case 23225 // end of duke pigcop and shelly newbeast
			case 23254 
				ife brutaltile 23254 
				{ screensound NECKBREAK2 screensound NECKBREAK2 screensound NECKBREAK2 }
				seta[brutalvictim].extra 1
				seta[brutalvictim].alpha 0
				seta[brutalvictim].htextra 100
				seta[brutalvictim].htpicnum HEADJIB1
				seta[brutalvictim].htowner player[].i
				seta[brutalvictim].htang sprite[].ang
				seta[brutalvictim].cstat 257
				set brutaltile -1 set brutalvictim -1 set brutalcount -3
				setp[].movement_lock 0
				addphealth 5
			break
			endswitch
		}
			
	}
}
ifn brutalvictim -1
{
	ife sprite[brutalvictim].statnum 1024 set brutalvictim -1 else
	ifle brutalcount 0 ifn actorvar[brutalvictim].monstatus 1 set brutalvictim -1
}


ifn pchar lastpchar
{
	set brutalvictim -1
	set deaonwall -1
	ifl cloak 0
	{
		mul cloak -1
		set switchboost 15
		sound CLOAKOFF
	}
	ife lastpchar 4 set saberpos 0
	ife pchar 4 set saberpos 0
	
	ifn pchar 3
	{
		set burstfired NO
		ifactorsound THISACTOR FLAMELOOP
		{
			stopactorsound THISACTOR FLAMELOOP
			globalsound FLAMEEND
		}
	}
	
	set idleanim 0
	ife pchar 0 
	{
		setp[].palookup dukepal
		setuserdef[].color dukepal
		savegamevar dukepal
		ifle gotsaber 2 ifg sawammo 0 ife gotsaw 2 { state sawon set gotsaber 0 }
		state dukeweapons 
		ife lastpchar 2 ife player[].curr_weapon PISTOL_WEAPON ife THISCLIP 8 ifge player[].ammo_amount PISTOL_WEAPON PISTOLCLIP set THISCLIP PISTOLCLIP
		action PSTAND 
		ifg vendor_screen 6
		{ 
			set temp lastpchar
			mul temp 10
			sub vendor_screen temp
			set cursorx 160 set cursory 100 
		}
	}
	else
	ife pchar 1 
	{ 
		setp[].palookup shellypal
		setuserdef[].color shellypal
		savegamevar shellypal
		ifle gotsaber 2 ifg sawammo 0 ife gotsaw 2 { state sawon set gotsaber 0 }
		state shellyweapons
		ife lastpchar 2 ife player[].curr_weapon PISTOL_WEAPON ife THISCLIP 8 ifge player[].ammo_amount PISTOL_WEAPON PISTOLCLIP set THISCLIP PISTOLCLIP
		action APSHELLYSTAND 
		ifg vendor_screen 6 
		{ 
			set temp lastpchar
			sub temp pchar
			mul temp 10
			sub vendor_screen temp
			
			set cursorx 160 set cursory 100 
		}
		// 0 = regular; 1 = burning; 2 = explosive; 3 = multi; 4 = freeze; 5 = spy; 6 = electric
		// 7 = blood; 8 = radioactive
		ife arrowtype 8 set arrowtype 2
		ife arrowtype 7 set arrowtype 0
		ife arrowtype 1 set arrowtype 6
		ife arrowtype 4 set arrowtype 6
		
		ife player[].curr_weapon SHOTGUN_WEAPON
		ife zoomin YES
		{
			set zoomin NO
			set zoomcount -6
			setp[].auto_aim autoaim
		}
	}
	else
	ife pchar 2
	{
		setp[].palookup wespal
		setuserdef[].color wespal
		savegamevar wespal
		ife gotsaw YES
		{
			state sawoff
			set gotsaw 2
		}
		state wesweapons
		action APWESSTAND 
		ifg vendor_screen 6 
		{ 
			set temp lastpchar
			sub temp pchar
			mul temp 10
			sub vendor_screen temp
			set cursorx 160 set cursory 100 
		}
		
		ife gotsaw YES
		{
			state sawoff
			ifg sawammo 0
			{
				espawn SAWSPRITE
				setsprite RETURN player[].posx player[].posy player[].posz
				seta[RETURN].ang player[].ang
				setav[RETURN].initsprite sawammo
				set sawammo 0
				set gotsaw NO
			}
		}
		
		// 0 = regular; 1 = burning; 2 = explosive; 3 = multi; 4 = freeze; 5 = spy; 6 = electric
		// 7 = blood; 8 = radioactive
		ife arrowtype 2 set arrowtype 8
		ife arrowtype 0 set arrowtype 7
		ife arrowtype 6 set arrowtype 4
		
		getp[].ammo_amount SHRINKER_WEAPON temp
		mul temp 4
		setp[].ammo_amount SHRINKER_WEAPON temp
		
		getp[].ammo_amount GROW_WEAPON temp
		mul temp 2
		setp[].ammo_amount GROW_WEAPON temp
		
	}
	else
	ife pchar 3
	{
		setp[].palookup mandopal
		setuserdef[].color mandopal
		savegamevar mandopal
		ifle gotsaber 2 ifg sawammo 0 ife gotsaw 2 { state sawon set gotsaber 0 }
		state mandoweapons
		ife lastpchar 2 ife player[].curr_weapon PISTOL_WEAPON ife THISCLIP 8 ifge player[].ammo_amount PISTOL_WEAPON PISTOLCLIP set THISCLIP PISTOLCLIP
		action APMANSTAND 
		ifg vendor_screen 6
		{
			set temp lastpchar
			sub temp pchar
			mul temp 10
			sub vendor_screen temp
			set cursorx 160 set cursory 100 
		}

	}
	else ife pchar 4
	{
		setp[].palookup novapal
		setuserdef[].color novapal
		savegamevar novapal
		ifvarand novaupgrades[HANDBOMB_WEAPON] 1 nullop else ife pipemode 2 set pipemode 1
		ife gotsaw YES
		{
			state sawoff
			set gotsaw 2
		}
		state novaweapons
		
		ife lastpchar 2 ife player[].curr_weapon PISTOL_WEAPON ife THISCLIP 8 ifge player[].ammo_amount PISTOL_WEAPON PISTOLCLIP set THISCLIP PISTOLCLIP
		
		ifg vendor_screen 6 
		{
			set temp lastpchar
			sub temp pchar
			mul temp 10
			sub vendor_screen temp
			set cursorx 160 set cursory 100 
		}
	}
	ife player[].scuba_amount 1
	{
		setp[].scuba_amount 0
		ife player[].inven_icon 6 setp[].inven_icon 0
	}
	ife lastpchar 2
	{
		ifn pchar 4 ife gotsaber 1 set gotsaber 0
		getp[].ammo_amount SHRINKER_WEAPON temp
		div temp 4
		setp[].ammo_amount SHRINKER_WEAPON temp
		
		getp[].ammo_amount GROW_WEAPON temp
		div temp 2
		setp[].ammo_amount GROW_WEAPON temp
	}
	ife lastpchar 4 ifn pchar 2
		ife gotsaber 1 set gotsaber 0
	
	set lastpchar pchar
	geta[].mdflags temp
	orvar temp 16
	seta[].mdflags temp
	

	// wake up items so they have correct animations
	headspritestat spriteid 0
	whilevarn spriteid -1
	{
		ife actorvar[spriteid].monstatus 100 // item
		{
			changespritestat spriteid 1
		}
		nextspritestat spriteid spriteid
	}
	headspritestat spriteid 2
	whilevarn spriteid -1
	{
		ife actorvar[spriteid].monstatus 100 // item
		{
			changespritestat spriteid 1
		}
		nextspritestat spriteid spriteid
	}

}


ifn zombieonplayer -1
{
	set sidekick 0
	set slidekick 0
	ifn sprite[zombieonplayer].statnum 1 set zombieonplayer -1
	
	ifn sprite[zombieonplayer].picnum ZOMBIE 
		ifn sprite[zombieonplayer].picnum CORRUPT
			ifn sprite[zombieonplayer].picnum NEWBEAST
				ifn sprite[zombieonplayer].picnum TERMINATOR
					ifn sprite[zombieonplayer].picnum CRAZYLADY
	set zombieonplayer -1
	
	ifl sprite[zombieonplayer].extra 1 set zombieonplayer -1
	ifn zombieonplayer -1
	{
		add zombiecount 1
		ifg zombiecount 5
		{
			switch sprite[zombieonplayer].picnum
			
			case CORRUPT
			
				set zombiecount 0
				ifrnd 128 
				{
					state playerpainsounds
					seta[].htextra 9
					seta[].htpicnum SHOTSPARK1
					seta[].htowner zombieonplayer
					seta[].htang sprite[zombieonplayer].ang
					palfrom 24 63
				}
			break
			case NEWBEAST
				set zombiecount 0
				add zombietile 1
				
				ife zombietile 4719
				{
					state playerpainsounds
					seta[].htextra 50
					seta[].htpicnum SHOTSPARK1
					seta[].htowner zombieonplayer
					seta[].htang sprite[zombieonplayer].ang
					palfrom 50 63
					screensound BEASTBITESND
				}
				ife zombietile 4721
				{
					set zombieonplayer -1
					set zombiecount -30
				}
			break
			case ZOMBIE
			
				set zombiecount 0
				add zombietile 1
				ife zombietile 8839 screensound Z_BITE2
				
				ife zombietile 8841
				{
					state playerpainsounds
					seta[].htextra 13
					seta[].htpicnum SHOTSPARK1
					seta[].htowner zombieonplayer
					seta[].htang sprite[zombieonplayer].ang
					palfrom 24 63
				}
				ife zombietile 8844
				{
					state playerpainsounds
					seta[].htextra 11
					seta[].htpicnum SHOTSPARK1
					seta[].htowner zombieonplayer
					seta[].htang sprite[zombieonplayer].ang
					palfrom 24 63
				}
				ifg zombietile 8844 
				{
					set zombietile 8836 
					screensound Z_BITESTART
				}
			break
			case CRAZYLADY
				ife zombietile CRAZYBITE
				{
					ifg zombiecount 7
					{
						set zombietile 20392
						set zombiecount 0
						screensound Z_BITE2
						state playerpainsounds
						seta[].htextra 15
						seta[].htpicnum SHOTSPARK1
						seta[].htowner zombieonplayer
						seta[].htang sprite[zombieonplayer].ang
						palfrom 24 63
					}
				}
				else
				{
					ifg zombiecount 25
					{
						set zombieonplayer -1
						set zombiecount -30
					}
				}
			break
			default break
			endswitch
		}
	}
	else
	{
		set zombiecount -30
		set zombietile ZOMBIEBITE
	}
}
else
{
	ifg zombiecount 0 set zombiecount 0
	set zombietile ZOMBIEBITE
	set zombieflip NO
	stopsound Z_BITESTART
	stopsound Z_BITE2
	ifl zombiecount 0 add zombiecount 1
}

ifaction PFROZEN nullop else
ifaction ALTDUKEFROZEN nullop else
ifaction APSHELLYFROZEN nullop else
ifaction APWESFROZEN nullop else
{
	getp[].pycount temp
	ifn temp lastbobang
	{
		ifg temp lastbobang
		{
			sub temp lastbobang
			mul temp 3
			shiftr temp 1
			add temp lastbobang
			setp[].pycount temp
		}
		set lastbobang player[].pycount
	}


	ifn player[].weapon_sway 1024
	{
		getp[].posxv x
		abs x
		shiftr x 14
		getp[].posyv y
		abs y
		shiftr y 14
		add x y
		mul x 2 div x 3
		add lastsway x
		// setp[].weapon_sway lastsway
	}
	else set lastsway 0
}

ifg horizfall 0
{
	getp[].horiz temp
	sub temp 1
	sub horizfall 1
	setp[].horiz temp
	ifle player[].horiz savedhoriz set horizfall 0
}

ifg targetwait 0 sub targetwait 1

ifn pchar 2 ifn pchar 4
ife gotsaw YES ifg sawammo 0
ifn WEAPON0_SHOOTS SAWPROJ state sawon

ife gotsaw NO ife WEAPON0_SHOOTS SAWPROJ state sawoff

// LASER TURRET FIRING CODE
ifn onturret -1
{
	ife countvarc YES
	{
		ife sprite[onturret].picnum EMPTYEDFTURRET
		{
			shoot SHOTSPARK1
			sound MINIFIRE
			spawn SHELL
		}
		else
		{
			setprojectile[GREENLASER].offset 14354
			setprojectile[GREENLASER].extra 24
			shoot GREENLASER
			setprojectile[GREENLASER].offset -160
			setprojectile[GREENLASER].extra 16
			sound TERMLASER
		}
		set countvarc NO
	}
}

ife player[].curr_weapon PISTOL_WEAPON
{
	ife player[].kickback_pic WEAPON1_FIREDELAY
	{
		stopactorsound THISACTOR WEAPON1_FIRESOUND
		espawn SOUNDPLATE
		setav[RETURN].SPRITELOTAG WEAPON1_FIRESOUND
		setav[RETURN].mtype 1
	}
	ife player[].reloading YES
	ifn burstfired GREENBULLET 
	{
		ifle player[].kickback_pic WEAPON1_FIREDELAY
		{
			set tempb WEAPON1_FIREDELAY
			add tempb 1
			setp[].kickback_pic tempb
		}
		set temp NO
		ifg fastfire 0 set temp YES
		ifvarand perks 2048 set temp YES
		ife temp YES
		{
			ifge player[].kickback_pic 25
			ifle player[].kickback_pic 26
			
				set THISCLIP PISTOLCLIP
		}
		else
		ife player[].kickback_pic 26
		set THISCLIP PISTOLCLIP
	}
	
	// hack to prevent firing at level start
	// this really sucks
	set temp NO
	ife pchar 0 ifvarand dukeupgrades[PISTOL_WEAPON] 4 ifvarand dukeupgrades[PISTOL_WEAPON] 8 set temp YES
	ife pchar 1 ifvarand shellyupgrades[PISTOL_WEAPON] 4 ifvarand shellyupgrades[PISTOL_WEAPON] 8 set temp YES
	ife temp YES
	{
		ifl player[].player_par 23 setp[].kickback_pic 0
		// also sound hack
		ifsound INSERT_CLIP { stopsound INSERT_CLIP sound GLOCKMAGIN }
		ifsound DEAGLE_CLIPIN { stopsound DEAGLE_CLIPIN sound GLOCKMAGIN }
	}

	set tempb WEAPON1_TOTALTIME
	sub tempb 1
	ife player[].kickback_pic tempb
	ifl THISCLIP 1
	ifn pchar 3
	{
		ifg player[].ammo_amount PISTOL_WEAPON 1
		{
			ife pchar 2 setp[].kickback_pic 9
			else
			ife pchar 1 setp[].kickback_pic 10 else
			setplayer[THISACTOR].kickback_pic 7
			setplayer[THISACTOR].reloading YES
			ife pchar 0 ifvarand dukeupgrades[PISTOL_WEAPON] 8 sound GLOCKMAGOUT else
			ife pchar 1 ifvarand shellyupgrades[PISTOL_WEAPON] 8 sound GLOCKMAGOUT else
			ifn pchar 0 sound DEAGLE_CLIPOUT else
			sound EJECT_CLIP
		}
		else
		{
			setp[].kickback_pic 0
			setp[].weapon_pos -1
		}
	}
	
	ife pchar 0
	ifp palive
	{
		ifvarand dukeupgrades[PISTOL_WEAPON] 4
		{
			ifg player[].player_par 5
			ife player[].kickback_pic 5
			{
				ifp pshrunk setp[].kickback_pic 0
				
				ifvarand dukeupgrades[PISTOL_WEAPON] 8
				shoot SHOTSPARK1
				else
				{
					shoot SHOTGUN
					// sound NEW_PISTOL_FIRE
					espawn SOUNDPLATE
					setav[RETURN].mtype 1
					setav[RETURN].SPRITELOTAG NEW_PISTOL_FIRE
				}
			}
			ife player[].kickback_pic 30 sound EJECT_CLIP
			ife player[].kickback_pic 42 sound INSERT_CLIP
		}
		ifvarand dukeupgrades[PISTOL_WEAPON] 8
		{
			ife player[].reloading YES
			{
				ife player[].kickback_pic 12
				{
					espawn SHELL
					setav[RETURN].mtype CLIPFALL
				}
				ifsound EJECT_CLIP { stopsound EJECT_CLIP sound GLOCKMAGOUT }
				// ifsound INSERT_CLIP { stopsound INSERT_CLIP sound GLOCKMAGIN }
				ife player[].kickback_pic 25 sound GLOCKMAGIN
				else
				{
					set temp NO
					ifg fastfire 0 set temp YES
					ifvarand perks 2048 set temp YES
					
					ife temp YES ife player[].kickback_pic 55 sound GLOCKMAGIN
				}
			}
			ife player[].kickback_pic 3
			{
				ifg fastfire 0
				ifg player[].ammo_amount PISTOL_WEAPON 1
				{
					shoot SHOTSPARK1
					sub THISCLIP 1
					getp[].ammo_amount PISTOL_WEAPON temp
					sub temp 1
					setp[].ammo_amount PISTOL_WEAPON temp
				}
				rand tempb 2
				add tempb 3
				set horizfall tempb
				set savedhoriz player[].horiz
				add tempb player[].horiz
				setp[].horiz tempb
			}
		}
	}
	
	ife pchar 1
	ifp palive
	{
		ife player[].kickback_pic 3
		{
			ifvarand shellyupgrades[PISTOL_WEAPON] 8
			{
				ifg fastfire 0
				ifg player[].ammo_amount PISTOL_WEAPON 1
				{
					shoot SHOTSPARK1
					sub THISCLIP 1
					getp[].ammo_amount PISTOL_WEAPON temp
					sub temp 1
					setp[].ammo_amount PISTOL_WEAPON temp
				}
				rand tempb 2
				add tempb 3
			}
			else
			{
				rand tempb 2
				add tempb 4
			}
			set horizfall tempb
			set savedhoriz player[].horiz
			add tempb player[].horiz
			setp[].horiz tempb
		}
		ifvarand shellyupgrades[PISTOL_WEAPON] 8 
		{
			ifvarand shellyupgrades[PISTOL_WEAPON] 4
			{
				ifg player[].player_par 5
				ife player[].kickback_pic 5
					shoot SHOTSPARK1
			}
		}
		else
		ifvarand shellyupgrades[PISTOL_WEAPON] 4
		{
			ifg player[].player_par 6
			ife player[].kickback_pic 6
			{
				shoot DEAGLEBULLET
				// sound DEAGLE_FIRE
				espawn SOUNDPLATE
				setav[RETURN].mtype 1
				setav[RETURN].SPRITELOTAG DEAGLE_FIRE
				rand tempb 2
				add tempb 4
				set horizfall tempb
				set savedhoriz player[].horiz
				add tempb player[].horiz
				setp[].horiz tempb
			}
		}
		ife player[].kickback_pic 12
		{
			espawn SHELL
			ifvarand shellyupgrades[PISTOL_WEAPON] 8
			setav[RETURN].mtype CLIPFALL else
			setav[RETURN].mtype CLIPFALL2
		}
		ife player[].kickback_pic 22 // 27
		{
			ifvarand shellyupgrades[PISTOL_WEAPON] 8
			sound GLOCKMAGIN else
			sound DEAGLE_CLIPIN
		}
		
		
		
		ifvarand shellyupgrades[PISTOL_WEAPON] 8 
		{
			set temp NO
			ifg fastfire 0 set temp YES
			ifvarand perks 2048 set temp YES
			ife temp YES ife player[].kickback_pic 33 sound GLOCKMAGOUT
			else ife player[].kickback_pic 34 sound GLOCKMAGOUT
			
			set temp NO
			ifg fastfire 0 set temp YES
			ifvarand perks 2048 set temp YES
			ife temp YES ife player[].kickback_pic 53 sound GLOCKMAGIN
			else ife player[].kickback_pic 54 sound GLOCKMAGIN
		}
		else ife player[].reloading YES
		{
			ife player[].kickback_pic 34 sound DEAGLE_CLIPOUT
			set temp NO
			ifg fastfire 0 set temp YES
			ifvarand perks 2048 set temp YES
			ife temp YES ife player[].kickback_pic 46 sound DEAGLE_CLIPIN
			else
			ife player[].kickback_pic 47 sound DEAGLE_CLIPIN
		}
		
	}
	
	ife pchar 2
	ifp palive
	{
		ife player[].kickback_pic 3
		{
			rand tempb 2
			add tempb 3
			set horizfall tempb
			set savedhoriz player[].horiz
			add tempb player[].horiz
			setp[].horiz tempb
		}
		
		ife player[].reloading YES
		{
			set temp NO
			ifg fastfire 0 ife player[].kickback_pic 15 set temp YES
			else
			ifvarand perks 2048 ife player[].kickback_pic 15 set temp YES
			else
			ife player[].kickback_pic 16 set temp YES
			ife temp YES
			{
				set TMP_A THISCLIP
				set TMP_B PISTOLCLIP
				whilevarvarn TMP_A TMP_B
				{
					spawn SHELL
					add TMP_A 1
					ifg TMP_A TMP_B set TMP_A TMP_B
				}
				// spawn SHELL spawn SHELL spawn SHELL
				// spawn SHELL spawn SHELL spawn SHELL
				// spawn SHELL spawn SHELL
				ifvarand wesupgrades[PISTOL_WEAPON] 4
				{
					// spawn SHELL spawn SHELL spawn SHELL
					// spawn SHELL spawn SHELL spawn SHELL
					// spawn SHELL spawn SHELL
					set TMP_A THISCLIP
					set TMP_B PISTOLCLIP
					whilevarvarn TMP_A TMP_B
					{
						spawn SHELL
						add TMP_A 1
						ifg TMP_A TMP_B set TMP_A TMP_B
					}		
				}
			}
		}
		ifsound EJECT_CLIP { stopsound EJECT_CLIP sound GLOCKMAGIN }
		
		ifvarand wesupgrades[PISTOL_WEAPON] 4
		{
			ifg player[].player_par 6
			ife player[].kickback_pic 7 // 6
			ifg player[].ammo_amount PISTOL_WEAPON 0
			{
				getp[].ammo_amount PISTOL_WEAPON B
				sub B 1, ifl B 0 set B 0
				sub pistolammo 1
				setp[].ammo_amount PISTOL_WEAPON B
				shoot WESBULLET
				// sound DEAGLE_FIRE
				espawn SOUNDPLATE
				setav[RETURN].mtype 1
				setav[RETURN].SPRITELOTAG REVOLVER_FIRE
				rand tempb 2
				add tempb 3
				set horizfall tempb
				set savedhoriz player[].horiz
				add tempb player[].horiz
				setp[].horiz tempb
			}
		}
		
		
		// ife player[].kickback_pic 30 sound DEAGLE_CLIPOUT

		
	}
	
	ife pchar 3
	ifp palive
	ife LASERMODE 0
	ife vendor_screen 0
	ifn startmode -1
	{
		ife player[].weapon_pos 0 
		{
			ifvarand oldextbits 64 nullop else
			ifvarand extbits 64
			ife player[].kickback_pic 0
			{
				ife wristmode 0 
				{
					set wristmode 1 
					set WEAPON1_SHOOTS FLAMEPROJ2
					set WEAPON1_FIRESOUND NULLSOUND
				}
				else
				{
					set wristmode 0
					set WEAPON1_SHOOTS MANDOLASER
					set WEAPON1_FIRESOUND WRISTSHOT
				}
				globalsound WRISTCHANGE
				ifvarand gametips 131072 xorvar gametips 131072
			}
			
			ifg wristready 0 
			{
				ife wristready 5 globalsound WRISTOUT
				sub wristready 1
			}
		}
		else 
		{
			ifl wristready 6 add wristready 1
			ifactorsound THISACTOR FLAMELOOP
			{
				stopactorsound THISACTOR FLAMELOOP
				globalsound FLAMEEND
			}
		}
		
		ife wristmode 1
		ifvarand bits 4
		// ifg player[].ammo_amount PISTOL_WEAPON 1
		ifg wristammo 0 
		{
			ifactorsound THISACTOR FLAMELOOP nullop else sound FLAMELOOP
			setprojectile[FLAMEPROJ2].pal 0
			setprojectile[FLAMEPROJ2].extra 4
			shoot FLAMEPROJ2
			ifvarand player[].player_par 1 shoot FLAMEPROJ2
			ife player[].kickback_pic 7
				setp[].kickback_pic 1
		}
		else ifactorsound THISACTOR FLAMELOOP
		{
			stopactorsound THISACTOR FLAMELOOP
			globalsound FLAMEEND
		}
		
	}
	
	ifg LASERAMMO 4
	ife LASERMODE YES
	ife LASERFIRE 0
	ifvarand extbits 64
	{
		ife LASERCHARGE 0 sound CHARGESND
		ifg LASERCHARGE 32 soundonce CHARGEHOLD
		ifl LASERCHARGE 52 
		add LASERCHARGE 1
		ifg fastfire 0 add LASERCHARGE 1
		
	}
	else
	{
		stopsound CHARGESND
		stopsound CHARGEHOLD
		ifge LASERCHARGE 32 set LASERFIRE 1
		else set LASERCHARGE 0
	}
	
}
else
{
	ifactorsound THISACTOR FLAMELOOP
	{
		stopactorsound THISACTOR FLAMELOOP
		globalsound FLAMEEND
	}
	stopsound CHARGESND
	stopsound CHARGEHOLD
	set LASERCHARGE 0
	ifl wristready 6 add wristready 1
}

ife pchar 0
{
	ifl spinframe 10367 set spinframe 10367
	ifg spinframe 10373 set spinframe 10373 // failsafe
	ife player[].curr_weapon CHAINGUN_WEAPON
	{
		ifg fastfire 0 set WEAPON3_SHOTSPERBURST 4 else set WEAPON3_SHOTSPERBURST 0
		ife player[].kickback_pic WEAPON3_FIREDELAY
		{
			stopactorsound THISACTOR WEAPON3_FIRESOUND
			espawn SOUNDPLATE
			setav[RETURN].SPRITELOTAG WEAPON3_FIRESOUND
			setav[RETURN].mtype 1
		}
		ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 
		ifvarand gotshock 2 { stopsound MINISPIN set spinup 0 }
		else
		ifvarand dukeupgrades[CHAINGUN_WEAPON] 1
		{
			ife player[].weapon_pos 0
			ife vendor_screen 0
			ifn startmode -1
			{
				ifg spinup 0 add spinframe 1
				ifvarand bits 4 { add spinup 1 ifg fastfire 0 add spinup 1 }
				else ifg spinup 0 sub spinup 1
				ifg spinup 12 set spinup 12
				ifl spinup 10 
				{
					ifg spinframe 10370 set spinframe 10367
					ifg player[].kickback_pic 1 setp[].kickback_pic 1
					ife spinup 0 setp[].kickback_pic 0
				}
				else
				ifn player[].kickback_pic 0
				{
					ifl spinframe 10371 set spinframe 10371
					ifg spinframe 10373 set spinframe 10371
					ifg fastfire 0
					ifg player[].ammo_amount CHAINGUN_WEAPON 1
					ifvarand player[].player_par 1
					{
						shoot CHAINGUN
						getp[].ammo_amount CHAINGUN_WEAPON temp
						sub temp 1
						setp[].ammo_amount CHAINGUN_WEAPON temp
					}
					
				}
				ifg spinup 0 soundonce MINISPIN else stopsound MINISPIN
			}
			else { set spinup 0 stopsound MINISPIN }
		}
	}
	else { stopsound MINISPIN set spinup 0 }
	
}



ifl player[].ammo_amount SHOTGUN_WEAPON 1 setp[].ammo_amount SHOTGUN_WEAPON 1

ife pchar 0
ife player[].curr_weapon SHOTGUN_WEAPON
{
	ifvarand gotDB 2
	{
		ifg player[].kickback_pic 11 ifl dbammo 2 setp[].kickback_pic 0
		ifvarand dukeupgrades[SHOTGUN_WEAPON] 32
		{
			ife player[].kickback_pic 21 screensound DBLOAD
			ife player[].kickback_pic 29 screensound DBLOAD
			ife player[].kickback_pic 36 screensound DBCLOSE
			ife player[].kickback_pic 17 spawn SHOTGUNSHELL
		}
		else
		{
			ife player[].kickback_pic 33 screensound DBLOAD
			ife player[].kickback_pic 45 screensound DBLOAD
			ife player[].kickback_pic 53 screensound DBCLOSE
			ife player[].kickback_pic 23 spawn SHOTGUNSHELL
		}
		ife zoomin YES
		{
			set zoomin NO
			set zoomcount -6
			setp[].auto_aim autoaim
		}
	}
	else
	ifvarand dukeupgrades[SHOTGUN_WEAPON] 4
	{
		getp[].kickback_pic temp
		ifn player[].weapon_pos 0 set zoomcount 0
		
		ifg zoomcount 0 ifl zoomcount 7 add zoomcount 1
		ifl zoomcount 0 add zoomcount 1
		
		ifvarand dukeupgrades[SHOTGUN_WEAPON] 2 // burstfire
		ifl burstfired 2 // NO
		ifge player[].kickback_pic 8
		ifle player[].kickback_pic 9
		ifvarand bits 4
		ifg player[].ammo_amount SHOTGUN_WEAPON 1
		ife vendor_screen 0
		ifn startmode -1
		{
			setp[].kickback_pic 1
			add burstfired 1
			// set burstfired YES
		}
		ifge player[].kickback_pic 10 set burstfired NO
		
		
		ifvarand dukeupgrades[SHOTGUN_WEAPON] 1 // zoom when release
		{
			ifvarand oldextbits 64
			{
				ife player[].kickback_pic 0 ife player[].weapon_pos 0
				{
					ifvarand extbits 64 nullop else
					ife zoomcount 0 set zoomcount 1
					
					ife zoomin YES
					{
						ifvarand extbits 64 nullop else
						{
							set zoomin NO
							set zoomcount -6
							setp[].auto_aim autoaim
						}
					}
				}
			}
		}
		else
		{
			ifvarand extbits 64
			{
				ife player[].kickback_pic 0 ife player[].weapon_pos 0
				{
					ifvarand oldextbits 64 nullop else
					ife zoomcount 0 set zoomcount 1
					
					ife zoomin YES
					{
						ifvarand oldextbits 64 nullop else
						{
							set zoomin NO
							set zoomcount -6
							setp[].auto_aim autoaim
						}
					}
				}
			}
		}

		ife zoomcount 6
		ife zoomin NO
		{
			set zoomin YES
			set zoomlevel 2
			set vrhi viewingrange
			set vrlo vrhi
			// div vrlo zoomlevel	
			mul vrlo 2
			div vrlo 3
			
			set zoomcount 7
		}
		ifn zoomcount 0 ife zoomin NO setp[].kickback_pic 0
	}
}


ife player[].curr_weapon SHOTGUN_WEAPON
{
	ife pchar 4 ifvarand gotbow 2 xorvar gotbow 2
	
	ifvarand gotbow 2
	{
		set temp NO
		
		ife pchar 1 ifvarand shellyupgrades[SHOTGUN_WEAPON] 4 set temp YES
		ife pchar 2 ifvarand wesupgrades[SHOTGUN_WEAPON] 4 set temp YES
		
		ife pchar 2
		ife arrowtype 8 orvar monstflags 4096 else ifvarand monstflags 4096 xorvar monstflags 4096
		
		ife temp YES
		{
			ifvare player[].kickback_pic 1 { sound BOWDRAW set arrowview -1 }
			ifvarg player[].kickback_pic 12 ifvarl player[].kickback_pic 16 ifvarand bits 4
				setplayer[].kickback_pic 14
				
			ifvarand oldextbits 64 nullop else
			ifvarand extbits 64
			ife player[].weapon_pos 0
			{
				screensound HOLSTER
				// 0 = regular; 1 = burning; 2 = explosive; 3 = multi; 4 = freeze; 5 = spy; 6 = electric
				// 7 = blood; 8 = radioactive
				// shellyupgrades[SHOTGUN_WEAPON] 8=EXPLOSIVE, 16=MULTI, 32=SPY, 64=ELECTRIC, 256=ICE, 512=FIRE
				// wesupgrades[SHOTGUN_WEAPON] 8=blood, 16=MULTI, 32=SPY, 64=RADIOACTIVE, 256=ICE, 512=FIRE
				ife pchar 1
				set B shellyupgrades[SHOTGUN_WEAPON]
				else ife pchar 2
				set B wesupgrades[SHOTGUN_WEAPON]
				set TMP_A NO
				whilevarn TMP_A YES
				{
					add arrowtype 1
					
					ife pchar 1
					{
						ifg arrowtype 6 set arrowtype 0
						switch arrowtype
						case 0 set TMP_A YES break
						case 1 ifvarand B 512 set TMP_A YES break
						case 2 ifvarand B 8 set TMP_A YES break
						case 3 ifvarand B 16 set TMP_A YES break
						case 4 ifvarand B 256 set TMP_A YES break
						case 5 ifvarand B 32 set TMP_A YES break
						case 6 ifvarand B 64 set TMP_A YES break
						default set TMP_A YES break
						endswitch
					}
					else
					{
						// wesupgrades[SHOTGUN_WEAPON] 8=blood, 16=MULTI, 32=SPY, 64=RADIOACTIVE, 256=ICE, 512=FIRE
						ifg arrowtype 8 set arrowtype 1
						switch arrowtype
						case 0 set TMP_A NO break
						case 1 ifvarand B 512 set TMP_A YES break
						case 2 set TMP_A NO break
						case 3 ifvarand B 16 set TMP_A YES break
						case 4 ifvarand B 256 set TMP_A YES break
						case 5 ifvarand B 32 set TMP_A YES break
						case 6 set TMP_A NO break
						case 7 set TMP_A YES break
						case 8 ifvarand B 8 set TMP_A YES break
						default set TMP_A YES break
						endswitch
					}
				}
				ifvarand gametips 512 { xorvar gametips 512 savegamevar gametips }
				ife arrowtype 3 set WEAPON2_SHOTSPERBURST 3
			}
			ifn WEAPON2_SHOOTS ARROWPROJ
			ife player[].kickback_pic 0
			{
				ife pchar 1 state shellyweapons else
				ife pchar 2 state wesweapons
			}
			ifn arrowtype 3 set WEAPON2_SHOTSPERBURST 1
			
		}
	}
	else 
	{
		ifvarand monstflags 4096 xorvar monstflags 4096
		set arrowview -1
		ifn pchar 0
		ifn pchar 3
		{
			ife player[].kickback_pic 0 
			{
				ife pchar 1 ifvarand shellyupgrades[SHOTGUN_WEAPON] 128
					set WEAPON2_TOTALTIME 11
				else
				ife pchar 2 ifvarand wesupgrades[SHOTGUN_WEAPON] 128
					set WEAPON2_TOTALTIME 11
			}
			
			set temp player[].ammo_amount SHOTGUN_WEAPON
			sub temp 1
			
			ife pchar 4
			{
				ifl temp novamag set novamag temp
				
				ifvarand gotDB 2
				ifvarand bits 4
				{
					ife player[].kickback_pic 14
						setp[].kickback_pic 13
				}
			}
			else
			{
				ifl temp spasclip set spasclip temp
			}
			

			
			ife player[].kickback_pic 0
			ife player[].reloading NO
			ife player[].weapon_pos 0
			ifg player[].ammo_amount SHOTGUN_WEAPON 1
			{
				ife pchar 4
				{
					ifvarand gotDB 2 nullop else
					ifl novamag 1
					{
						setp[].reloading YES
						setp[].kickback_pic 16
						ifl player[].ammo_amount SHOTGUN_WEAPON 10
						{
							set novamag player[].ammo_amount SHOTGUN_WEAPON 
							sub novamag 1
						}
						else
						set novamag 9
					}
				}
				else
				ifl spasclip 1
				{
					setp[].reloading YES
					setp[].kickback_pic 11
					ifl player[].ammo_amount SHOTGUN_WEAPON 9
					{
						set spasclip player[].ammo_amount SHOTGUN_WEAPON 
						sub spasclip 1
					}
					else
					set spasclip 8
				}
			}
		}
		
	}
	ife pchar 3
	{
		ifvarand gotDB 2
		{
			ifg rightDB_weapcount 0
			{
				add rightDB_weapcount 1
				ife fastfire YES ifn rightDB_weapcount WEAPON2_FIREDELAY 
				
				ifn rightDB_weapcount WEAPON2_SOUND2TIME ifn rightDB_weapcount WEAPON2_SPAWNTIME
				add rightDB_weapcount 1
				
				ife rightDB_weapcount WEAPON2_FIREDELAY
				{
					globalsound WEAPON2_FIRESOUND
					sub dbammo 1, ifl dbammo 0 set dbammo 0
					set safecount WEAPON2_SHOTSPERBURST
					ifl safecount 1 set safecount 1
					whilevarn safecount 0
					{
						shootvar WEAPON2_SHOOTS
						sub safecount 1
					}
				}
				ife rightDB_weapcount WEAPON2_SOUND2TIME globalsound WEAPON2_SOUND2SOUND
				ife rightDB_weapcount WEAPON2_SPAWNTIME 
					espawnvar WEAPON2_SPAWN
					
				ifge rightDB_weapcount WEAPON2_TOTALTIME
					set rightDB_weapcount 0
			}
			
			ifvarand extbits 64
			ife rightDB_weapcount 0
			ife player[].weapon_pos 0
			ifg dbammo 0
			ifp palive
				set rightDB_weapcount 1
		}
		else
		ife player[].kickback_pic 6 shoot SWITCHBULLET2
	}
}
else 
{
	set arrowview -1
	set rightDB_weapcount 0
	ifvarand monstflags 4096 xorvar monstflags 4096
}

ife player[].curr_weapon SHOTGUN_WEAPON
ifge pchar 2
ife stakefire YES
{
	set temp NO
	
	ife player[].kickback_pic 0 set temp YES else
	ifg player[].kickback_pic 24 set temp YES else
	ife pchar 4 ifg player[].kickback_pic 9 set temp YES
	
	ife temp YES
	{
		set stakefire NO
		ife pchar 2
		{
			set WEAPON2_FIRESOUND WES_SHOTTY
			set WEAPON2_SHOOTS SHOTSPARK1
			set WEAPON2_SHOTSPERBURST 8
		}
		else
		ife pchar 3
		{
			set WEAPON2_SHOOTS PLASPELPROJ
			set WEAPON2_SHOTSPERBURST 14
			set WEAPON2_FIRESOUND PLASFIRE
		}
		else
		ife pchar 4
		{
			setprojectile[NOVAPLASBOLT].pal 23
			setprojectile[NOVAPLASBOLT].extra 7
			set WEAPON2_FIRESOUND DEASHOTLEFT
		}
	}
	
	
}

ifn pchar 0 ifn pchar 2 ifn pchar 4
ife player[].curr_weapon CHAINGUN_WEAPON
{
	// ife player[].kickback_pic WEAPON3_FIREDELAY
	// {
		// stopactorsound THISACTOR WEAPON3_FIRESOUND
		// espawn SOUNDPLATE
		// setav[RETURN].SPRITELOTAG WEAPON3_FIRESOUND
		// setav[RETURN].mtype 1
	// }
	set temp NO
	ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 set temp YES
	ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 set temp YES
	ife temp YES
	ifvarand gotshock 2 set m4reload 0
	else
	{
		ifl player[].ammo_amount CHAINGUN_WEAPON m4clip
			set m4clip player[].ammo_amount CHAINGUN_WEAPON
		ifvarand player[].kickback_pic 1 nullop else
		ife m4reload 0
		ife player[].weapon_pos 0
		ifl m4clip 1
		ifg player[].ammo_amount CHAINGUN_WEAPON 0
		{
			set m4reload 1
		}
		ifn player[].weapon_pos 0 { set m4reload 0 set zoomcount 0 }
		ifn m4reload 0
		{
			set zoomin NO
			set zoomcount 0
			setp[].kickback_pic 0
			add m4reload 1
			ife m4reload 9 ife pchar 1
			{
				ifvarand shellyupgrades[CHAINGUN_WEAPON] 1 sound M4CLIPOUT
				else
				sound SHELLYCLIPOUT
				espawn SHELL
				setav[RETURN].mtype CLIPFALL
			}
			ife m4reload 11 ife pchar 3
			{
				sound SKARCLIPOUT
				espawn SHELL
				setav[RETURN].mtype CLIPFALL3
				ifvarand mandoupgrades[CHAINGUN_WEAPON] 1
				{
					espawn SHELL
					setav[RETURN].mtype CLIPFALL3
					set angvar sprite[RETURN].ang
					add angvar 1024
					seta[RETURN].ang angvar
				}
			}
			ife m4reload 29 
			{ 
				ife pchar 3 sound SKARCLIPIN else
				ifvarand shellyupgrades[CHAINGUN_WEAPON] 1 sound M4CLIPIN
				else sound SHELLYCLIPIN
			}
			ifg m4reload 40
			{
				set m4reload 0
				getp[].ammo_amount CHAINGUN_WEAPON temp
				ifge temp 30
				{
					set m4clip 30
					// sub temp 30
					// setp[].ammo_amount CHAINGUN_WEAPON temp
				}
				else
				{
					set m4clip temp
					// setp[].ammo_amount CHAINGUN_WEAPON 0
				}
			}
		}
		
		ife pchar 3
		{
			ife zoomin YES set WEAPON3_SHOTSPERBURST 0 else
			ifvarand mandoupgrades[CHAINGUN_WEAPON] 1 set WEAPON3_SHOTSPERBURST 2
		}
		
		ifg fastfire 0
		ifn player[].kickback_pic 0
		{
			ifg player[].ammo_amount CHAINGUN_WEAPON 1
			ifvarand player[].player_par 1
			{
				shoot CHAINGUN
				getp[].ammo_amount CHAINGUN_WEAPON temp
				sub temp 1
				setp[].ammo_amount CHAINGUN_WEAPON temp
			}
			
		}
		
		ifg zoomcount 0 ifl zoomcount 7 add zoomcount 1
		ifl zoomcount 0 add zoomcount 1
		ifvarand extbits 64
		{
			ife m4reload 0 ife player[].weapon_pos 0
			{
				ifvarand oldextbits 64 nullop else
				ife zoomcount 0 set zoomcount 1
				
				ife zoomin YES
				{
					ifvarand oldextbits 64 nullop else
					{
						set zoomin NO
						set zoomcount -6
						setp[].auto_aim autoaim
					}
				}
			}
		}

		ifg zoomcount 6
		ifn zoomin YES
		{
			set zoomin YES
			set zoomlevel 2
			set vr -1
			// set vrhi viewingrange
			// set vrlo vrhi
			// div vrlo zoomlevel	
			set zoomcount 7
			ifvarand gametips 4 { xorvar gametips 4 savegamevar gametips }
		}
		ifn zoomcount 0 ife zoomin NO setp[].kickback_pic 0
	}
}
else set m4reload 0

ife pchar 2
ife player[].curr_weapon CHAINGUN_WEAPON
{

	ifvarand wesupgrades[CHAINGUN_WEAPON] 8 
	ifvarand gotshock 2 set uzireload 0
	else
	{
		ifl player[].ammo_amount CHAINGUN_WEAPON uziclip
		set uziclip player[].ammo_amount CHAINGUN_WEAPON
		ifvarand player[].kickback_pic 1 nullop else
		ife uzireload 0
		ife player[].weapon_pos 0
		ifl uziclip 1
		ifg player[].ammo_amount CHAINGUN_WEAPON 0
		{
			set uzireload 1
		}
		ifn player[].weapon_pos 0 { set uzireload 0 set zoomcount 0 }
		ifn uzireload 0
		{
			set zoomin NO
			set zoomcount 0
			setp[].kickback_pic 0
			add uzireload 1
			ife uzireload 9 
			{
				sound SHELLYCLIPOUT
				espawn SHELL
				setav[RETURN].mtype CLIPFALL
				
				ifvarand wesupgrades[CHAINGUN_WEAPON] 1
				{
					espawn SHELL
					setav[RETURN].mtype CLIPFALL
					set angvar sprite[RETURN].ang
					add angvar 1024
					seta[RETURN].ang angvar
				}
			}
			ife uzireload 25 
				sound SHELLYCLIPIN
			
			ifg uzireload 35
			{
				set uzireload 0
				getp[].ammo_amount CHAINGUN_WEAPON temp
				ifge temp 32
				{
					set uziclip 32
					// sub temp 30
					// setp[].ammo_amount CHAINGUN_WEAPON temp
				}
				else
				{
					set uziclip temp
					// setp[].ammo_amount CHAINGUN_WEAPON 0
				}
			}
		}
		
		ifg fastfire 0
		ifn player[].kickback_pic 0
		{
			ifg player[].ammo_amount CHAINGUN_WEAPON 1
			ifvarand player[].player_par 1
			{
				shoot CHAINGUN
				getp[].ammo_amount CHAINGUN_WEAPON temp
				sub temp 1
				setp[].ammo_amount CHAINGUN_WEAPON temp
			}
			
		}

	}
}
else set uzireload 0

ife pchar 2
{
	set temp NO
	ife player[].curr_weapon GROW_WEAPON { set temp YES set B player[].ammo_amount GROW_WEAPON }
	ife player[].curr_weapon SHRINKER_WEAPON { set temp YES set B player[].ammo_amount SHRINKER_WEAPON }
	ife temp YES
	{
		
		ifvarand extbits 64
		ife player[].kickback_pic 0
		ife player[].weapon_pos 0
		ife vendor_screen 0
		ifn startmode -1
		{
			set temp NO
			ifge B 10 set temp YES else
			ifge B 5 ife player[].curr_weapon SHRINKER_WEAPON set temp YES
			ife temp YES
			{
				ife player[].curr_weapon SHRINKER_WEAPON
				{
					set WEAPON6_SHOOTS BLOODBOMB
					set WEAPON6_FIRESOUND GRENADE_SHOOT
					set WEAPON6_TOTALTIME 14
				}
				else
				{
					set WEAPON11_SHOOTS GRENADEPROJ // WESGRENADE
					set	WEAPON11_SHOTSPERBURST 0
					set WEAPON11_FIRESOUND GRENADE_SHOOT
					set WEAPON11_TOTALTIME 14
				}
				setp[].kickback_pic 1
			}
		}
		
		ife WEAPON11_SHOOTS GRENADEPROJ // WESGRENADE
		ifg player[].kickback_pic 12
		{
			set WEAPON11_SHOOTS WESBULLET
			set	WEAPON11_SHOTSPERBURST 2
			set WEAPON11_FIRESOUND WESKAR_FIRE
			set WEAPON11_TOTALTIME 4
		}
		
		ife WEAPON6_SHOOTS BLOODBOMB
		ifg player[].kickback_pic 12
		{
			set WEAPON6_SHOOTS BLOODBULLET
			set WEAPON6_FIRESOUND RPG_SPLIT
			set WEAPON6_TOTALTIME 4
		}
		
		ife player[].curr_weapon SHRINKER_WEAPON
		{
			ifl B skarclipB
			set skarclipB B
		}
		else
		{
			ifl B skarclip
			set skarclip B
		}
		
		ife player[].reloading NO
		ife player[].weapon_pos 0
		ifg B 0
		ifle player[].kickback_pic 1
		{
			set temp NO
			ife player[].curr_weapon SHRINKER_WEAPON ifl skarclipB 1 set temp YES
			ife player[].curr_weapon GROW_WEAPON ifl skarclip 1 set temp YES
			ife temp YES
			{
				setp[].reloading YES
				setp[].kickback_pic 5
			}
		}
		
		ife player[].reloading YES
		{
			ife player[].kickback_pic 17 
			{
				sound SKARCLIPOUT
				espawn SHELL
				setav[RETURN].mtype CLIPFALL3
			}
			ife uzireload 35 
				sound AMMOPICK
			
			ifg player[].kickback_pic 40
			{
				setp[].kickback_pic 0
				setp[].reloading 0
				ife player[].curr_weapon SHRINKER_WEAPON
				{
				ifge B 10
					set skarclipB 10
				else
					set skarclipB B
				}
				else
				{
				ifge B 20
					set skarclip 20
				else
					set skarclip B
				}
			}
			
			// failsafe
			ife player[].kickback_pic 0 setp[].reloading NO
		}	
	}
}

ife pchar 4
{
	ife player[].curr_weapon CHAINGUN_WEAPON
	ifge overheat 0
	{
		ife WEAPON3_SHOTSPERBURST 3 // burst firing
		{
			soundonce SPIN_FAST
			set spinup 12
			setp[].kickback_pic 2
			add overheat 1
			set temp NO
			ifvarand extbits 64 nullop else set temp YES
			ifvarand bits 4 set temp YES
			ifge overheat 64 set temp YES
			ife player[].ammo_amount CHAINGUN_WEAPON 0 set temp YES
			ife temp YES
			{
				set spinup 0
				set WEAPON3_SHOTSPERBURST 0
				state novaweapons
				
				ifge overheat 64 
				{
					set overheat -60
					screensound STEAMRELEASE
					screensound STEAMRELEASE
					screensound STEAMRELEASE
					screensound STEAMRELEASE
				}
			}
			
		}
		
		ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 
		ifvarand gotshock 2 { stopsound SPIN_FAST set spinup 0 }
		else
		ife player[].weapon_pos 0
		ife vendor_screen 0
		ifn startmode -1
		{
			ifvarand bits 4 { add spinup 1 ifg fastfire 0 add spinup 1 }
			else ifg spinup 0 sub spinup 1
			ifg spinup 12 set spinup 12
			ife player[].ammo_amount CHAINGUN_WEAPON 0 ifg spinup 9 set spinup 9
			ifl spinup 10 
			{
				ifg player[].kickback_pic 1 setp[].kickback_pic 1
				ife spinup 0 setp[].kickback_pic 0
			}
			else
			ifn player[].kickback_pic 0
			{
				ifg fastfire 0
				ifg player[].ammo_amount CHAINGUN_WEAPON 1
				ifvarand player[].player_par 1
				{
					shoot DEALASER
					getp[].ammo_amount CHAINGUN_WEAPON temp
					sub temp 1
					setp[].ammo_amount CHAINGUN_WEAPON temp
				}
				
			}
			ifg spinup 0 soundonce SPIN_FAST else stopsound SPIN_FAST
		}
		else { set spinup 0 stopsound SPIN_FAST }
	}
	else stopsound SPIN_FAST
	ifn overheat 0
	{
		ifg overheat 0 ife spinup 0 sub overheat 1
		else ifl overheat 0
		{
			setp[].kickback_pic 0
			setp[].curr_weapon CHAINGUN_WEAPON
			setp[].weapon_pos 0
			add overheat 1
			
			espawn BIGSMOKE 
		
			getp[].posx x2
			add x2 160
			getp[].ang angvar, add angvar 48
			rand angle2 16 sub angle2 8 add angvar angle2
			getp[].posz z add z 1024
			getp[].horiz zdist
			sub zdist 100
			shiftl zdist 5
			sub z zdist
			rotatepoint player[].posx player[].posy x2 player[].posy angvar x y
			setsprite RETURN x y z
			seta[RETURN].xrepeat 10
			seta[RETURN].yrepeat 10
		}
	}
	ife player[].curr_weapon HANDBOMB_WEAPON
	ife player[].weapon_pos 10
	{
		ife pipemode -1 set pipemode 1 else
		ife pipemode -2 set pipemode 2
	}
	ife player[].curr_weapon SHRINKER_WEAPON
	{
		ifvarand novaupgrades[SHRINKER_WEAPON] 1
		ifvarand bits 4
		ifg player[].kickback_pic 0
		{
			add pipehold 1
			ife pipehold 74 screensound SMALLCHARGE
			ifg pipehold 75 set pipehold 75
			getp[].kickback_pic temp
			add temp 1
			ife temp WEAPON6_FIREDELAY
			{
				sub temp 2
				setp[].kickback_pic temp
			}
			ifsound ELEC_LOOP nullop else soundonce ELEC_LOOP
			set temp pipehold
			// shiftl temp 3
			mul temp 12
			setactorsoundpitch THISACTOR ELEC_LOOP temp
			
		}
		else
		{
			ifactorsound THISACTOR ELEC_LOOP stopactorsound THISACTOR ELEC_LOOP
		}
	}
}


ife player[].curr_weapon RPG_WEAPON
{
	set temp NO
	ife pchar 0 ifvarand dukeupgrades[RPG_WEAPON] 1 set temp YES
	ife pchar 1 ifvarand shellyupgrades[RPG_WEAPON] 1 set temp YES
	ife pchar 2 set temp YES // ifvarand wesupgrades[RPG_WEAPON] 1 set temp YES
	ife temp YES
	{
		ifg zoomcount 0 ifl zoomcount 7 add zoomcount 1
		ifl zoomcount 0 add zoomcount 1
		ifvarand extbits 64
		{
			ife player[].kickback_pic 0 ife player[].weapon_pos 0
			{
				ifvarand oldextbits 64 nullop else
				ife zoomcount 0 set zoomcount 1
				
				ife zoomin YES
				{
					ifvarand oldextbits 64 nullop else
					{
						set zoomin NO
						set zoomcount -6
						setp[].auto_aim autoaim
					}
				}
			}
		}

		ifg zoomcount 6
		ifn zoomin YES
		{
			set targetwait 10
			set zoomin YES
			set zoomlevel 2
			set vr -1
			// set vrhi viewingrange
			// set vrlo vrhi
			// div vrlo zoomlevel	
			set zoomcount 7
			ifvarand gametips 16 { xorvar gametips 16 savegamevar gametips }
		}
		ifn zoomcount 0 ife zoomin NO setp[].kickback_pic 0
		
		ife zoomin YES
		ife player[].kickback_pic WEAPON4_FIREDELAY
		{
			rand tempb 4
			add tempb 8
			
			set horizfall tempb
			set savedhoriz player[].horiz
			add tempb player[].horiz
			setp[].horiz tempb
		}
		
		// if firing, make sure that all locks are fired at
		ife player[].kickback_pic 8 // just finished firing a rocket
		ifg player[].ammo_amount RPG_WEAPON 0
		{
			ifn targetlock[0] -1 setp[].kickback_pic 3 else
			ifn targetlock[1] -1 setp[].kickback_pic 3 else
			ifn targetlock[2] -1 setp[].kickback_pic 3
		}
		set tempb NO
		ifvarand dukeupgrades[RPG_WEAPON] 4 set tempb YES
		ifvarand shellyupgrades[RPG_WEAPON] 4 set tempb YES
		ife pchar 2 set tempb NO
		ife tempb YES
		{
			ifg loadrox 0 ifg player[].kickback_pic WEAPON4_FIREDELAY
			{
				shoot RPG
				ife devside 0
				{
					getp[].ammo_amount RPG_WEAPON temp
					sub temp 1 
					setp[].ammo_amount RPG_WEAPON temp
					
					set devside 1
				}
				else set devside 0
				
				soundvar WEAPON4_FIRESOUND
				ifvarand gametips 32 { xorvar gametips 32 savegamevar gametips }
			}
			ife player[].kickback_pic 0 { set holdfire 0 set loadrox 0 }
			
			ifp palive
			ife player[].weapon_pos 0
			ife zoomcount 0
			ifvarand bits 4 
			ifg player[].kickback_pic 0
			ifl player[].kickback_pic WEAPON4_FIREDELAY
			ifg player[].ammo_amount RPG_WEAPON 0
			ife vendor_screen 0
			ifn startmode -1
			{
				add holdfire 1
				ifg fastfire 0 add holdfire 1
				ife holdfire 20 ifg player[].ammo_amount RPG_WEAPON 1 { set loadrox 2 sound LOADROX }
				ife holdfire 40 ifg player[].ammo_amount RPG_WEAPON 2 { set loadrox 3 sound LOADROX }
				ife holdfire 60 ifg player[].ammo_amount RPG_WEAPON 3 { set loadrox 4 sound LOADROX }
				setp[].kickback_pic 1
			}
		}
	}
	else
	ife zoomin YES
	{
		set zoomin NO
		set zoomcount -6
		setp[].auto_aim autoaim
	}
	ife pchar 3
	ife nukeselect NO
	{
		ifg loadrox 0 ifg player[].kickback_pic WEAPON4_FIREDELAY
		{
			add flashang 256
			shoot RPG
			ife devside 0
				set devside 1
			else set devside 0
			
			soundvar WEAPON4_FIRESOUND
		}
		else
		ifvarand mandoupgrades[RPG_WEAPON] 2
		ifvarand extbits 64
		ifg player[].ammo_amount RPG_WEAPON 0
		ife player[].kickback_pic 0 ife player[].weapon_pos 0
		ife vendor_screen 0
		ifn startmode -1
		{
			// start straight line altfire rocket burst
			set burstfired MANDOFETT
			setp[].kickback_pic 1
		}
		ife player[].kickback_pic 0 set burstfired 0
	}
	ife pchar 4
	ifn WEAPON4_SHOOTS PLASROCKET
	ifg player[].kickback_pic 26
	{
		set WEAPON4_SHOOTS PLASROCKET
		set WEAPON4_SHOTSPERBURST 4
		set WEAPON4_FIRESOUND D_ROXFIRE
		set WEAPON4_TOTALTIME 25
	}
}
else
{
	setarray targetlock[0] -1
	setarray targetlock[1] -1
	setarray targetlock[2] -1
	ife burstfired MANDOFETT set burstfired NO
}

// ife player[].curr_weapon SHRINKER_WEAPON
// ife player[].kickback_pic 1
// {
	// set temp NO
	// ife pchar 0 ifvarand dukeupgrades[SHRINKER_WEAPON] 1 set temp YES
	// ife pchar 1 ifvarand shellyupgrades[SHRINKER_WEAPON] 1 set temp YES
	// ife temp YES
	// sound BFGFIRE
// }

ifn pchar 1 ifn pchar 2
ife player[].curr_weapon HANDBOMB_WEAPON
ife player[].weapon_pos 0
ife player[].kickback_pic 0
ife vendor_screen 0
ifn startmode -1
{
	ifvarand extbits 64
	{
		ife pchar 0 // Duke switch pipebomb mode
		{
			screensound HOLSTER
			setp[].weapon_pos -1
			ife PIPEBOMB_CONTROL 1 { set PIPEBOMB_CONTROL 2 quote 1158 set pipemode 2 set GRENADE_LIFETIME 60 } else
			{ set PIPEBOMB_CONTROL 1 quote 1157 set pipemode 1 }
			ifvarand gametips 4096 { xorvar gametips 4096 savegamevar gametips }
		}
		else
		ife pchar 3 // Mando thermal detonator quick throw
		{
			ifg player[].ammo_amount HANDBOMB_WEAPON 0
			{
				set burstfired THERMAL
				setp[].kickback_pic 1
			}
		}
		else
		ife pchar 4 // Dea manual detonation 
		// handled in DOLLBOMB code in ROLLYTURRET.CON
		{
			screensound HOLSTER
			setp[].weapon_pos -1
		}
	}
}

ife player[].curr_weapon SHRINKER_WEAPON
ife WEAPON6_SHOOTS BMFGPROJ
{
	set temp 0
	ifvarand dukeupgrades[SHRINKER_WEAPON] 2 set temp YES
	ife temp YES
	ife player[].weapon_pos 0
	ifg player[].ammo_amount SHRINKER_WEAPON 0
	ife player[].kickback_pic 0
	ifvarand extbits 64
	ife vendor_screen 0
	ifn startmode -1
	{
		setp[].kickback_pic 1
		set bmfgaltfire YES
	}
	

	ifg player[].kickback_pic 0
	ifl player[].kickback_pic WEAPON6_FIREDELAY
	{
		ifvarand bits 4
		{
			getp[].kickback_pic temp
			add temp 1
			ife temp WEAPON6_FIREDELAY
			{
				sub temp 2
				setp[].kickback_pic temp
				stopsound BFGFIRE
			}
			ifsound BFGFIRE nullop else soundonce BFGLOOP
		}	
	}
	
	ifge player[].kickback_pic WEAPON6_FIREDELAY
	{
		// ifsound BFGFIRE nullop else
		soundonce BFGFIRE2
		
		stopsound BFGLOOP
		stopsound BFGFIRE
	}
	ife player[].kickback_pic 0 set bmfgaltfire NO
}

ife player[].curr_weapon GROW_WEAPON
ife player[].weapon_pos 0
ifge player[].ammo_amount GROW_WEAPON 15
ife player[].kickback_pic 0
ife WEAPON11_SHOOTS GROWSPARK
ifvarand extbits 64
ife vendor_screen 0
ifn startmode -1
{
	set WEAPON11_SHOOTS LOVEBOMB
	set	WEAPON11_SHOTSPERBURST 0
	set WEAPON11_FIREDELAY 8
	set WEAPON11_TOTALTIME 20
	setp[].kickback_pic 1
}

ife WEAPON11_SHOOTS LOVEBOMB
{
	set temp NO
	ife player[].kickback_pic 0 set temp YES
	ifg player[].kickback_pic 17 set temp YES
	ifn player[].curr_weapon GROW_WEAPON set temp YES
	ifn player[].weapon_pos 0 set temp YES
	ife temp YES
	{
		set WEAPON11_SHOOTS GROWSPARK
		set	WEAPON11_SHOTSPERBURST 0
		set WEAPON11_FIREDELAY 3
		set WEAPON11_TOTALTIME 5
	}
}


ife player[].curr_weapon DEVISTATOR_WEAPON
{
	ifvarand gotrailgun 2
	{
		set temp NO
		ife pchar 0 ifvarand dukeupgrades[DEVISTATOR_WEAPON] 8 set temp YES
		ife pchar 1 ifvarand shellyupgrades[DEVISTATOR_WEAPON] 8 set temp YES
		ife pchar 2 ifvarand wesupgrades[DEVISTATOR_WEAPON] 8 set temp YES
		ife temp YES
		{
			ife player[].kickback_pic 9 setp[].kickback_pic 26
		}
	}
	else
	ife pchar 1
	{
		set temp NO
		ife fastfire 0 
		{
			ife player[].kickback_pic 11 set temp YES
		}
		else
			ife player[].kickback_pic 12 set temp YES
			
		ife temp YES
		{
			ife devside 0 
			{
				set devside 1 
				setprojectile[GRENADEPROJ].offset 65408
				setprojectile[STICKYPROJ].offset 65408
			}
			else
			{
				set devside 0
				setprojectile[GRENADEPROJ].offset 128
				setprojectile[STICKYPROJ].offset 128
			}
		}
		ifvarand shellyupgrades[DEVISTATOR_WEAPON] 2
		ife player[].kickback_pic 3
		{
			ifvarand shellyupgrades[DEVISTATOR_WEAPON] 1
			{
				eshoot STICKYPROJ
				geta[RETURN].z z, sub z 2048 seta[RETURN].z z
				geta[RETURN].zvel z, sub z 1024 seta[RETURN].zvel z
				
				eshoot STICKYPROJ
				geta[RETURN].z z, sub z 2048 seta[RETURN].z z
				geta[RETURN].zvel z, sub z 1024 seta[RETURN].zvel z
			}
			else
			{
				eshoot GRENADEPROJ
				geta[RETURN].z z, sub z 2048 seta[RETURN].z z
				geta[RETURN].zvel z, sub z 1024 seta[RETURN].zvel z
			}
		}
		
	}
	else
	ife pchar 0
	{
		ifvarand dukeupgrades[DEVISTATOR_WEAPON] 1
		{
			ife player[].kickback_pic 2
			{
				ife devside 0 
					set devside 1 
				else
					set devside 0

			}
		}
	}
	// else ife pchar 3 // Mando Devastator code
	else ifge pchar 3
	{
		ifl spinframe 21237 set spinframe 21237
		ifg spinframe 21241 set spinframe 21241 // failsafe
		ife player[].weapon_pos 0
		{
			ifg spinup 0 add spinframe 1
			ife vendor_screen 0
			ifn startmode -1
			ifvarand bits 4 { add spinup 1 ifg fastfire 0 add spinup 1 ife player[].ammo_amount DEVISTATOR_WEAPON 0 ifg spinup 9 set spinup 9 }
			else ifg spinup 0 sub spinup 1
			ifg spinup 12 set spinup 12
			ifl spinup 10 
			{
				ifg spinframe 21241 set spinframe 21237
				ifg player[].kickback_pic 1 setp[].kickback_pic 1
				ife spinup 0 setp[].kickback_pic 0
			}
			else
			ifn player[].kickback_pic 0
			{
				ifn fastfire 0 set WEAPON7_SHOTSPERBURST 3 else set WEAPON7_SHOTSPERBURST 2
				ifg spinframe 21241 set spinframe 21237
				// ifg fastfire 0
				// ifg player[].ammo_amount DEVISTATOR_WEAPON 1
				// ifvarand player[].player_par 1
				// {
					// shoot CHAINGUN
					// getp[].ammo_amount CHAINGUN_WEAPON temp
					// sub temp 1
					// setp[].ammo_amount CHAINGUN_WEAPON temp
				// }
				
			}
			ifg spinup 0 soundonce BIGBARRELS else stopsound BIGBARRELS
		}
		else { set spinup 0 stopsound BIGBARRELS }
	}
}

// ZOOM OR UNZOOM RAILGUN
ifvarand oldextbits 64 nullop else
ifvarand extbits 64
{
	ife player[].curr_weapon DEVISTATOR_WEAPON
	ifvarand gotrailgun 2
	ife zoomin NO
	{
		set zoomin YES
		set zoomcount 1
		ifvarand gametips 256 { xorvar gametips 256 savegamevar gametips }
		ifn player[].auto_aim 0
		{
			getp[].auto_aim autoaim
			setp[].auto_aim NO
		}
		set zoomlevel 3
		set vrhi viewingrange
		set vrlo vrhi
		// div vrlo zoomlevel	
		div vrlo 3
	}
	else
	ifn zoomin NO
	{
		ife pchar 0 ifvarand dukeupgrades[SHOTGUN_WEAPON] 5 ife player[].curr_weapon SHOTGUN_WEAPON nullop 
		else
		{
			set zoomin NO
			setp[].auto_aim autoaim	
			set zoomcount -6
		}
	}
}

ife player[].curr_weapon FREEZE_WEAPON
{
	ife WEAPON9_SHOOTS GOOBULLET // reload check
	ife player[].weapon_pos 0
	ife player[].reloading NO
	ifg player[].ammo_amount FREEZE_WEAPON 0
	ife player[].kickback_pic 0
	ifl gooclip 10
	ifl gooclip player[].ammo_amount FREEZE_WEAPON
	{
		ifvarand extbits 64
		{
			setp[].reloading YES
			setp[].kickback_pic 11
			screensound CLIPOUT2
		}
		else
		ife gooclip 0
		{
			setp[].reloading YES
			setp[].kickback_pic 11
			screensound CLIPOUT2
		}
	}
	ifn player[].kickback_pic 0
	{
		setp[].weapon_sway 1024
		ife pchar 1
		{
			ifvarand shellyupgrades[FREEZE_WEAPON] 1
			ife WEAPON9_SHOOTS FIREBEAM
			soundonce LASERLOOP
		}
		else
		ife pchar 0
		{
			
			ifvarand dukeupgrades[FREEZE_WEAPON] 1
			ife WEAPON9_SHOOTS ICEBEAM
			soundonce FREEZELOOP
		}
		else
		ife pchar 3
		{
			add flashang 147
			ife WEAPON9_SHOOTS FLAMEPROJ2
			{
				ifvarand extbits 64
				ife vendor_screen 0 ifn startmode -1
				ifg player[].ammo_amount FREEZE_WEAPON 0
				{
					ife player[].kickback_pic 11 shoot FLAMEPROJ2
					ife player[].kickback_pic 12
					{
						setp[].kickback_pic 10
						shoot FLAMEPROJ2
						setprojectile[FLAMEPROJ2].extra 8
						setprojectile[FLAMEPROJ2].pal 27
						getp[].ammo_amount FREEZE_WEAPON temp
						ifn halfpoint 0
						{
							sub temp 1
							setp[].ammo_amount FREEZE_WEAPON temp
							set halfpoint 0
						}
						else set halfpoint 1
						modvar temp 4
						ife temp 0
						screensound STEAMHISS
					}
				}
				
				ife player[].kickback_pic 0 state mandoweapons
				else
				ifg player[].kickback_pic 15
					state mandoweapons
				
			}
				
		}
		else ife pchar 4
		ife player[].reloading YES
		{
			ife player[].kickback_pic 35
			{
				screensound CLIPIN2
				ifge player[].ammo_amount FREEZE_WEAPON 10
					set gooclip 10 else
					set gooclip player[].ammo_amount FREEZE_WEAPON
			}
		}
	}
	else 
	{ 
	    ifactorsound THISACTOR LASERLOOP stopactorsound THISACTOR LASERLOOP 
		ifactorsound THISACTOR FREEZELOOP stopactorsound THISACTOR FREEZELOOP 
	}
	
	ifvarand gotplasma 2 // reset in case shockball2 was fired
	{
		ife player[].kickback_pic 0
		state setplasmagun else
		ife player[].kickback_pic 16
		state setplasmagun
		else ifge player[].kickback_pic 12
		ifvarand bits 4 state setplasmagun
	}
}
else { ifactorsound THISACTOR LASERLOOP stopactorsound THISACTOR LASERLOOP 
		ifactorsound THISACTOR FREEZELOOP stopactorsound THISACTOR FREEZELOOP  }

ife player[].curr_weapon CHAINGUN_WEAPON
{
	// set temp NO
	// ifvarand gotshock 2
	// {
		// ife pchar 0 ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 set temp YES
		// ife pchar 1 ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 set temp YES
		// ife pchar 2 ifvarand wesupgrades[CHAINGUN_WEAPON] 8 set temp YES
		// ife pchar 3 ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 set temp YES
		// ife pchar 4 ifvarand novaupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// }
	// ife temp YES
	ifvarand gotshock 2
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 8
	{
		ifvarand bits 4 nullop else
		state clearshock
		
		ifn player[].kickback_pic 0
		{
			setp[].weapon_sway 1024
			ifg player[].kickback_pic WEAPON3_FIREDELAY 
			{
				set WEAPON3_SHOOTS SHOCKBEAM
				set WEAPON3_FIRESOUND LIGHTNINGFIRE
			}
			
			ifvarand bits 4
			ifn startshocktime -1
			ife player[].weapon_pos 0
			{
				ifactorsound THISACTOR ELECTRICLOOP nullop else sound ELECTRICLOOP
				ife player[].kickback_pic 11
				ife sidekick 0
				ife slidekick 0
				{
					setprojectile[SHOCKBEAM].extra 3
					set picnum METALSPARK1
					rand temp 4
					add picnum temp
					setprojectile[SHOCKBEAM].spawns picnum
					shoot SHOCKBEAM
					setprojectile[SHOCKBEAM].extra 52
					setprojectile[SHOCKBEAM].spawns ELEC_EXP
					setp[].posxv 0
					setp[].posyv 0
				}
				ife player[].kickback_pic 12
				{
					setp[].kickback_pic 9
					setp[].weapon_sway 1024
				}
				set temp player[].player_par
				sub temp startshocktime
				modvar temp 4
				ife temp 0
				{
					getp[].ammo_amount 3 temp
					sub temp 1, ifl temp 0 set temp 0
					setp[].ammo_amount 3 temp
					ife temp 0 state clearshock
				}
			}
			else state clearshock
			
		}
		else
		ifg player[].ammo_amount 3 0
		ife player[].weapon_pos 0
		ifp palive
		ife vendor_screen 0
		ifn startmode -1
		{
			ifvarand bits 4 // chain lightning
			{
				getp[].player_par startshocktime
				setp[].kickback_pic 9
				setp[].weapon_sway 1024
				getp[].ammo_amount 3 temp
				sub temp 1
				setp[].ammo_amount 3 temp
			}
			else
			ifvarand extbits 64 // single shot
			ifg player[].ammo_amount 3 4
			{
				setp[].kickback_pic 1
				setp[].weapon_sway 1024
				getp[].ammo_amount 3 temp
				sub temp 5
				setp[].ammo_amount 3 temp
			}
		}
	}
}
else state clearshock

set inithp player[].max_player_health
ife userdef[].god YES 
{
	set bleeding 0
	seta[].htextra -1
}

// ife vendorupgrade YES
ife cutcam -1
{
	getkeyname 1101 36 2 // get name of vendor key into quote 1101
	qsprintf 1102 1100 1101
}

// increment or decrement timer variables
add radarupdate 1
ife pdown YES 
{
	setp[].jetpack_on NO
	ifg deathcounter 0 sub deathcounter 1
	ifvarand perks 64 ifge rescuecharge RESCUEAMOUNT
	ifl deathcounter 420
	// ifp ponground
	{
		// spawn in helper troops
		set rescuecharge 0
		add RESCUEAMOUNT 50
		screensound BOSSPORT
		
		getp[].posx savx add savx 1024
		getp[].posy savy add savy 1024

		espawn EDFSNIPER
		setav[RETURN].monstflags 8 // shield
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz

		sub savx 2048
		sub savy 2048
		
		espawn EDFSNIPER
		setav[RETURN].monstflags 2048 // ghostly
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz

		add savx 2048
		
		espawn EDFTROOP
		setav[RETURN].monstflags 4
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz

		add savy 1024
		
		espawn EDFTROOP
		seta[RETURN].pal 22
		setav[RETURN].monstflags 16384 // VAMPIRE
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz
		
			
		sub savx 1024
		add savy 1024
		
		espawn ARMEDF
		setav[RETURN].monstflags 512 // sideguns
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz
			
		sub savy 2048
		
		espawn EDFDRONE
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setav[RETURN].monstflags 512 // sideguns
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz
		
		sub savx 1024
		add savy 1024
		
		espawn EDFTROOP
		seta[RETURN].pal 19
		setav[RETURN].monstflags 128 // multishot
		setav[RETURN].spawnprotect 100
		setav[RETURN].FEMKILLCOUNT 2700
		setav[RETURN].mlevel plevel
		setsprite RETURN savx savy player[].posz
		espawn GLARESTAR
		setsprite RETURN savx savy player[].posz
		
		set spawnprotect 120
		set bigmsgcount 90
		set bigmsg 1087
		set shellyinmap 120
	}
}

ifg waterboost 0 sub waterboost 1
ifg atvendor 0 sub atvendor 1
ifg secretsfound 0 sub secretsfound 1
ifg ptargeted 0 sub ptargeted 1
ifg forwinput 0 sub forwinput 1
ifg backinput 0 sub backinput 1
ifg gun_nametime 0 sub gun_nametime 1
ifg handicon 0 sub handicon 1
ifg gotcoins 0 sub gotcoins 1
ifg ancients_transport 0 sub ancients_transport 1

ifvarg portalview 0
{
	subvar portalview 1
	ifvare portalview 0 setvar portalcam -1
}

ifg bigmsgcount 0 
ifg startmode -1
{
	sub bigmsgcount 1
	ife bigmsgcount 0 ifn buffermsg 0
	{
		set bigmsg buffermsg
		set buffermsg 0
		set bigmsgcount 90
	}
}
ifn combotime 0 { ifg combotime 0 sub combotime 1 else ifl combotime 0 add combotime 1 }
ifg monidtime 0 { sub monidtime 1 ife monidtime 0 set monid -1 }
ifvarand perks 64 ifge rescuecharge RESCUEAMOUNT ifl shellyinmap 10 set shellyinmap 10
ifg shellyinmap 0 
{
	sub shellyinmap 1
	ife shellyinmap 0 
	{
		// set myshelly -1
		set cmode 0
	}
	getkeyname 155 11 2
}
ifg sawfleshtime 0
{
	sub sawfleshtime 1
	ife sawfleshtime 0
	{
		stopsound SCRAPE
		stopsound SAWFLESH
	}
}
ifg lastbubble 0
{
	setp[].airleft 390
	sub lastbubble 1
}

ifg damagefade 0
{
	ifl damagefade 4 add damagefade 1 else
	add damagefade 4 // 8
	ifg damagefade 255 set damagefade 0
}

ifl water_screen 30 add water_screen 1

ifvarand perks 1 // sidegun perk
ifn gametype -1
{
	set safecount -1
	ife leftsidegun -1
	{
		espawn SIDEGUN
		ifn myshelly -1 ifn actorvar[myshelly].monstatus 2 setav[RETURN].myspawner myshelly else
		setav[RETURN].myspawner THISACTOR
		setav[RETURN].botclip -384
		set leftsidegun RETURN
		rand safecount 5
		setav[RETURN].mtype safecount
	}
	ife rightsidegun -1
	{
		espawn SIDEGUN
		ifn myshelly -1  ifn actorvar[myshelly].monstatus 2 setav[RETURN].myspawner myshelly else
		setav[RETURN].myspawner THISACTOR
		setav[RETURN].botclip 384
		set rightsidegun RETURN
		ife safecount -1
		rand safecount 5
		setav[RETURN].mtype safecount
	}
}

ife epselect -1
{
	state in_menu
	getplayer[].ang oang
	getplayer[].horiz ohoriz
	
	// ife rendmode 0 { set tempselect -1 break }
	ife startmode -2 { state wesoverride ife startmode -2 break }
	ife rendmode 4 { set tempselect -1 break }
	
	
	
	ife VOLUME 0
	{
		ife tempselect -1
		{
			ifle cursorx 160
			{
				ifle cursory 100
				{
					ifhitspace { set tempselect 0 resetcount }
					ifvarand bits 4 { set tempselect 0 resetcount }
					ife tempselect 0
					ifl cursorx 160 ifg cursorx 101 ifl cursory 21
					{
						set marathon YES
						set bigmsg 3090
						set bigmsgcount 150
					}
				}
				else
				{
					ifhitspace { set tempselect 2 resetcount }
					ifvarand bits 4 { set tempselect 2 resetcount }
				}
			}
			else
			{
				ifle cursory 100
				{
					ifhitspace { set tempselect 1 resetcount }
					ifvarand bits 4 { set tempselect 1 resetcount }
				}
				else
				{
					ifhitspace { set tempselect 3 resetcount }
					ifvarand bits 4 { set tempselect 3 resetcount }
				}
			}
			
			ifg tempselect -1 ifl tempselect 7
			{
				ifl tempselect 4 set switchmode YES
				ife PROGRESSION NO
				{
					set attmode NO
					set vendorupgrade YES
					set credits 1000
					set lastcredits 1000
					set totalcredits 1000
				}
				else
				{
					set attmode 2				
					set vendorupgrade YES
					set credits 10000
					set lastcredits 10000
					set totalcredits 10000
				}
			}
			break
		}
	}
	else
	ife VOLUME 1 // new episodes
	{
		ife tempselect -1
		{
			ifle cursory 100
			{
				ifle cursorx 160
				{
					ifhitspace 
					{ 
						set tempselect 4 
						ifvarand charlocked 4 set startmode -2 else
						set startmode 1 
						resetcount 
					}
					ifvarand bits 4 
					{ 
						set tempselect 4 
						ifvarand charlocked 4 set startmode -2 else
						set startmode 1 
						resetcount 
					}
					
					ife tempselect 4
					{
						ife PROGRESSION NO
						{
							set attmode NO
							set vendorupgrade YES
							set credits 1000
							set lastcredits 1000
						}
						else
						{
							set attmode 2				
							set vendorupgrade YES
							set credits 10000
							set lastcredits 10000
						}
					}
			
				}
				else
				{	
					// SETTINGS FOR GLADIATOR EPISODE
					ifhitspace 
					{ 
						set vendorupgrade NO set radaron YES orvar perks 2 set tempselect 7 
						ifvarand charlocked 4 set startmode -2 else
						set startmode 3 
						resetcount 
					}
					ifvarand bits 4 
					{ 
						set vendorupgrade NO set radaron YES orvar perks 2 set tempselect 7 
						ifvarand charlocked 4 set startmode -2 else
						set startmode 3 
						resetcount 
					}
					// note we set startmode here to prevent character menu from coming up
				}
			}
			else
			{
				set temp NO
				ifhitspace set temp YES
				ifvarand bits 4 set temp YES
				ife temp YES
				{
					ifl cursorx 160
					{
						// SETTINGS FOR WES EPISODE
						resetcount
						set attmode 2
						set switchmode NO
						set tempselect 9
						set vendorupgrade YES
						set PROGRESSION YES
						set credits 5000
						set lastcredits 5000
						set totalcredits 5000
						// set LOGO_FLAGS 522495
						ifn radaron -1
						set radaron YES
						orvar perks 2
						set startmode 4
						set charsel 4
					}
					else
					ifge cursorx 160
					{
						// SETTINGS FOR FINAL EPISODE
						al cursory
						resetcount
						set attmode 2
						set marathon 2
						set switchmode YES
						set tempselect 10
						set vendorupgrade NO
						set PROGRESSION YES
						set credits 0
						set lastcredits 0
						// set LOGO_FLAGS 522495
						set radaron NO
						set startmode 16
						set charsel 16
						set avoid_melee NO
						set disable_infighting NO
						set mirror_maps NO
						set random_items NO
						set NEWENEMIES NO
					}
					
				}
			}
			break
		}
	}
	else
	ife VOLUME 2 // expansion episodes
	{
		ife tempselect -1
		{
			ifle cursorx 160
			{
				ifhitspace { set tempselect 5 resetcount }
				ifvarand bits 4 { set tempselect 5 resetcount }	
			}
			else
			{	
				set temp NO
				ifhitspace set temp YES
				ifvarand bits 4 set temp YES
				
				ife temp YES
				{
					resetcount
					ifle cursory 100 set tempselect 6
					else
					ifg cursory 100
					{
						resetcount
						// SETTINGS FOR WAR OF ATTRITION EPISODE
						ifg cursory 180 ifl cursorx 212 
						{
							set challenge YES
							set checkpoints YES
							set bigmsg 3097
							set bigmsgcount 150
							ifl userdef[].player_skill 3
							{
								setuserdef[].player_skill 3
								set SKILL 3
							}
						}
						set attmode YES
						set switchmode YES
						set tempselect 8
						set vendorupgrade YES
						state next_att_map
						al ATTVOLUME al ATTLEVEL
						set credits 10000
						set lastcredits 10000
						set totalcredits 10000
						set LOGO_FLAGS 522495
						set NEWENEMIES YES
					}
				}
			}
			ifg tempselect -1 ifl tempselect 7
			{
				ife PROGRESSION NO
				{
					set attmode NO
					set vendorupgrade YES
					set credits 1000
					set lastcredits 1000
					set totalcredits 1000
				}
				else
				{
					set attmode 2				
					set vendorupgrade YES
					set credits 10000
					set lastcredits 10000
			        set totalcredits 10000
				}
			}
			break
		}
	}
	ife startmode -2 break
	ifl startmode 0 { state startmodecode break }
	set epselect tempselect
	setarray visited[LEVEL] 0
	set init_picnums 0 

	set mirror_thismap NO
	
	ife epselect 0 startlevel 0 1 // episode 1 hollywood holocaust

	ife epselect 1 startlevel 0 8 // episode 2 the space episode
	ife epselect 2 startlevel 0 19 // episode 3 starts in raw meat
	ife epselect 3 startlevel 0 30 // episode 4 starts in impossible
	
	ife epselect 4 startlevel 4 0 // NEW INVASION 
	ife epselect 5 startlevel 5 0 // DUKE IT OUT IN DC
	ife epselect 6 { set altcostume 34 startlevel 6 0 } // caribbean vacation
	ife epselect 7 { setuserdef[].show_level_text NO startlevel 6 11 } // space gladiators
	ife epselect 8 startlevel ATTVOLUME ATTLEVEL // war of attrition
	ife epselect 9 startlevel 6 38 // RESISTANCE
	ife epselect 10 startlevel 4 10 // FINAL EPISODE
 
	break
}

ife startmode -1 state startmodecode

ifn vendor_screen 0 state vendorcode
else 
{
	ife disable_tips YES set gametips 0
	ife reset_options YES
	{
		set radaron YES
		orvar perks 2
		set MONHUD YES
		set SHOWPOINTS YES
		set AUTOSAVE YES
		set STEPSOUNDS YES
		set NEWENEMIES YES
		set MAXRANGE 65536
		set disable_doubletap NO
		set disable_kickheads NO
		set jibs_duration 1800
		set avoid_melee NO
		set mirror_maps NO
		set reset_options NO
		set random_items NO
		set disable_tips NO
		savegamevar radaron
		savegamevar MONHUD
		savegamevar SHOWPOINTS
		savegamevar AUTOSAVE
		savegamevar STEPSOUNDS
		savegamevar disable_tips
		set gametips 131071
		savegamevar mirror_maps
		savegamevar random_items
		savegamevar jibs_duration
		savegamevar disable_kickheads
		savegamevar RANDOMENEMIES
		savegamevar disable_doubletap
	}
	// ife mirror_thismap -1
	// {
		// state mirror
		// ife mirror_maps YES
		// set mirror_thismap YES else
		// set mirror_thismap NO
	// }
}

ifn award_screen 0 state awardcode

ifn matchmenu 0 state matchmenucode

ife vrmenu YES state vrmenucode


ife bonus_screen GAMEOVERSCREEN
{
	state in_menu
	setp[].fta 0
	setp[].ftq 285
	set z player[].player_par
	sub z lastclock
	ifg z 150 
	{
		quote 13
		ifhitspace
		resetplayer // cmenu 15000
	}
	setp[].timebeforeexit 50 
	getplayer[].ang oang
	getplayer[].horiz ohoriz
	break
}

ifn cutscene_ready 0
{
	ife player[].ftq 102 setp[].fta 0
	set temp NO
	ife player[].timebeforeexit 0 set temp YES
	else
	ifl player[].timebeforeexit 15 set temp YES
	ife temp YES
	{
		stopallsounds
		stopallmusic
		switch cutscene_ready
		case 1252 // episode 1 ending
			screensound EP1_END
			screensound EP1_END
			screensound EP1_END
			screensound EP1_END
			screensound EP1_END
		break
		case 1253 // episode 2 ending 	
			screensound EP2_END
			screensound EP2_END
			screensound EP2_END
			screensound EP2_END
			screensound EP2_END
		break
		case 1254 // episode 3 ending
			screensound EP3_END
			screensound EP3_END
			screensound EP3_END
			screensound EP3_END
			screensound EP3_END
		break
		case 1255 // episode 4 ending
			screensound EP4_END
			screensound EP4_END
			screensound EP4_END
			screensound EP4_END
			screensound EP4_END
		break
		endswitch
		
		startcutscene cutscene_ready
		ife marathon YES
		{
			add mlevel_bonus 1
			seta[].extra player[].max_player_health
			setuserdef[].display_bonus_screen YES
			ife cutscene_ready 1252
			{
				set cutscene_ready 0
				setuserdef[].level_number 7
				set epselect 1
				// startlevel 0 8
				state clearpweapons
				setp[].firstaid_amount 0
				setp[].scuba_amount 0
				setp[].holoduke_amount 0
				setp[].shield_amount 0
			}
			ife cutscene_ready 1253
			{
				set cutscene_ready 0
				setuserdef[].level_number 18
				set epselect 2
				// startlevel 0 19
				state clearpweapons
				setp[].firstaid_amount 0
				setp[].scuba_amount 0
				setp[].holoduke_amount 0
				setp[].shield_amount 0
			}
			ife cutscene_ready 1254
			{
				set cutscene_ready 0
				setuserdef[].level_number 29
				set epselect 3
				// startlevel 0 30
				state clearpweapons
				setp[].firstaid_amount 0
				setp[].scuba_amount 0
				setp[].holoduke_amount 0
				setp[].shield_amount 0
			}	
		}
		set cutscene_ready 0
		
	}
	
}

// fake bonus screen code
ifg gametype 0
ifg player[].timebeforeexit 10 ifl player[].timebeforeexit 60
ifl bonus_screen 4
{
	setuserdef[].display_bonus_screen NO
	state in_menu
	setp[].fta 0
	setp[].ftq 285
	ife bonus_screen 0 
	{
		stopallmusic
		setp[].timebeforeexit 0
		ifg bluescore redscore
		screensound BONUSMUSIC
		setp[].timebeforeexit 50 
		set bonus_screen 1 
		set timebonus endgametime
		// shiftr timebonus 1
		ife gametype SURVIVAL set timebonus 0
		add credits timebonus
		switch LEVEL
		case 11 set winbonus 4000 break
		case 13 set winbonus 7000 break
		case 14 set winbonus 6500 break
		case 15 set winbonus 8000 break
		case 16 set winbonus 8000 break
		case 17 set winbonus 7000 break
		case 18 set winbonus 6500 break
		case 21 set winbonus 9000 break
		case 25 set winbonus 10000 break
		case 26 set winbonus 12000 break
		default set winbonus 6500 break
		endswitch
		ife unbalanced YES add credits 3000
		add credits winbonus
		set pstarts 0
		set lastcredits credits
	}
	else
	ife bonus_screen 1 // just a buffer screen
	{
		ifle player[].timebeforeexit 20
		{
			set bonus_screen 2
			setp[].timebeforeexit 0 // otherwise sound will not play
			
			ife gametype SURVIVAL 
			{
				ife survivor_winner NO { set bluescore 0 set redscore 1000 }
				else { set bluescore 1000 set redscore 0 }
			}
			
			ifl bluescore redscore
			{
				rand temp 3
				ife temp 0 sound DUKE_KILLED5 else
				ife temp 1 sound DUKE_KILLED3 else
				ife temp 2 sound DUKE_KILLED1 else
				ife temp 3 sound DUKE_KILLED2
			}
			else
			{
				rand temp 3
				ife temp 0 sound BONUS_SPEECH1 else
				ife temp 1 sound BONUS_SPEECH2 else
				ife temp 2 sound BONUS_SPEECH3 else
				ife temp 3 sound BONUS_SPEECH4
			}
			
			
			screensound SHOTGUN_COCK
			setp[].timebeforeexit 50
		}
	}
	else
	{
		ife bonus_screen 2
		{
			ifl player[].timebeforeexit 20
			{
				set bonus_screen 3
				setp[].timebeforeexit 50
			}
		}
		else
		ife bonus_screen 3
		{
			set temp NO
			ifhitspace set temp YES
			ifvarand bits 1 set temp YES
			ifvarand bits 4 set temp YES
			ifn bits oldbits set temp YES
			ife temp YES
			{
				setp[].timebeforeexit 0
				screensound PIPEBOMB_EXPLODE
				ife gametype SURVIVAL 
				{
					ife survivor_winner NO { set bluescore 0 set redscore 1000 }
					else { set bluescore 1000 set redscore 0 }
				}
				ifl bluescore redscore 
				{ 
					set bonus_screen GAMEOVERSCREEN 
					getp[].player_par lastclock 
					stopsound BONUSMUSIC
					screensound GAMEOVERMUS
					getplayer[].ang oang
					getplayer[].horiz ohoriz
					break 
				}
				else
				{
					setp[].timebeforeexit 50
					set bonus_screen 4
				}
				
			}
			else
			{
				setp[].timebeforeexit 30
			}
		}
	}
}

 ife player[].fist_incs 32
 ife attmid 3
 ife attmode YES
	{
		endofgame 2
		set attmid 4
	}

ifg gametype 0
{
	ifg player[].timebeforeexit 0 ifl player[].timebeforeexit 5
	{
		startlevel 6 12
	}
}
else 
ifvarand player[].gm 8
{
	ife marathon 2 // character fatigue system
	{
		ife hublevel YES set hublevel NO else
		{
			add dready 1 clamp dready -1 1
			add bready 1 clamp bready -1 1
			add wready 1 clamp wready -1 1
			add mready 1 clamp mready -1 1
			add nready 1 clamp nready -1 1
			ifvarand startmode 1 { set dready -1 ife VOLUME 4 ife LEVEL 13 set dready 0 }
			ifvarand startmode 2 { set bready -1 ife VOLUME 4 ife LEVEL 13 set bready 0 }
			ifvarand startmode 4 set wready -1
			ifvarand startmode 8 set mready -1
			ifvarand startmode 16 set nready -1
		}
	}
	ifn attmode YES
	{
		readgamevar NEWENEMIES ife NEWENEMIES NO set NEWENEMIES RANDOMENEMIES
	}
	set mirror_thismap NO
	ife challenge YES set checkpoints YES else
	set checkpoints NO
	ife attmode YES
	{
		ife attmid 4
		{
		// add attbosses 1, ifge attbosses 5 set attbosses 0
		add attbeaten 1
		
		// savegamevar attbosses
		savegamevar attbeaten
		ifvarand charsel 4 orvar charlocked 4
		savegamevar charlocked
		screensound BIGCHEER
		starttrackslot 0 0
		set midscreen 16880
		set cutend totalclock
		add cutend 2000
		set cutmash 4
		startscreen
		stopsound BIGCHEER
		set midscreen 16881
		set cutmash 4
		set cutend totalclock
		add cutend 2000
		startscreen
		set midscreen 16882
		set cutmash 3
		set cutend totalclock
		add cutend 2000
		startscreen
		state writehighscores
		}
	}
	// else
	// ife VOLUME 0 ifge LEVEL 8 ifle LEVEL 18
	// {
		// setuserdef[].volume_number 1
		// set FAKEVOLUME 1
	// }
}




ifinwater 
{
	// horiz based movement code
	// 299 all the way up, -99 all the way down
	add pinwater 1
	ifp palive
	{
		ifvarand bits 1
		{
			gets[player[].cursectnum].ceilingbunch temp
			ifn temp -1 set waterboost 2
		}
		else
		ifvarand bits 2 nullop else
		ifg extbits 0 ifl extbits 4
		{
			getp[].horiz z
			sub z 100 // 100 horiz equals straight ahead, so take away 100 and make 0 'straight ahead' for this
			
			set tempb z
			abs tempb
			div tempb 3
			set temp 100
			sub temp tempb
			
			getp[].posxv x
			mul x temp
			div x 100
			setp[].posxv x
			
			getp[].posyv y
			mul y temp
			div y 100
			setp[].posyv y
			
			mul z -19
			ifvarand extbits 2 mul z -1
			ifl z -2304 set z -2304
			setp[].poszv z
	
		}
	}
}
else
{
	ifg waterboost 0
	{
		set waterboost 0
		ifvarand bits 1
		{
			set z player[].poszv
			sub z 1560
			setp[].poszv z
			setp[].jumping_toggle 1
		}
	}
	// ifg pinwater 3
	// ife water_screen 30
	// {
		// set water_screen -30
		// set waterpal 1
	// }
	set pinwater 0
	
	ifg o2damage 0
	ifl sprite[player[].i].extra player[].max_player_health
	{
		// geta[player[].i].extra temp
		// add temp o2damage
		// ifg temp MAXPLAYERHEALTH set temp MAXPLAYERHEALTH
		// seta[player[].i].extra temp
		addphealth 1
		sub o2damage 1
	}

	
	ifp palive ifp prunning ifp ponground
	ife player[].quick_kick 0 ife player[].last_quick_kick 0 ife player[].knee_incs 0
	ife qk_proxy 0
	ife slidekick 0
	ife sidekick 0
	ife saberdash 0
	ifl PLAYERONTHEBIKE 1
	{
		set temp YES
		ifonwater ifn player[].spritebridge 1 set temp NO
		else
		ifn player[].kickback_pic 0
		{
			switch player[].curr_weapon
			case KNEE_WEAPON ife WEAPON0_SHOOTS KNEE set temp NO break
			case TRIPBOMB_WEAPON set temp NO break
			endswitch
		}
		ife temp YES
		{
			ifvarand bits 2 // pressing crouch
			ifg forwinput 5 // pressed forward for at least 6 tics
			ifvarand extbits 1 // and still pressing forward
			{
				set slidekick 1
				sound SLIDESOUND
				set slidehit NO
				setp[].weapon_pos -1
			}
			// see EVENT_KICKQUICK for starting a sidekick (NOT slidekick)
		}
	}
}

ifp ponground 
{
	set jumpkickhit NO
	ifl jumpkick 0 add jumpkick 1
	else
	ifg jumpkick 0 { set sidekick jumpkick set jumpkick 0 }
}
// see EVENT_QUICKKICK for jump kick trigger

ifg jumpkick 0
{
	ifl jumpkick 16
	iffloordistl 32
	{
		getp[].poszv z
		sub z 384
		setp[].poszv z
	}
	ifl jumpkick 18 
	setp[].weapon_pos -7
	setp[].quick_kick 0
	getp[].rotscrnang temp
	add temp 36
	ifg temp 60 set temp 60
	setp[].rotscrnang temp
	add jumpkick 1
	ife jumpkick 3 sound KICKOUT
	ifg jumpkick 5 ifl jumpkick 15 ife jumpkickhit NO shoot KNEE
	ifg jumpkick 23 { set jumpkick -10 set jumpkick NO }
	
	ifl jumpkick 20
	{
		cos kickfvel player[].ang
		sin kicksvel player[].ang
			
		mul kicksvel 160
		mul kickfvel 160
		
		ifg backinput 0 set jumpkick -10
		ifinwater set jumpkick -10
	}
}

ifg slidekick 0
{
	ifl slidekick 20 ifl player[].weapon_pos -8 
	{
		ife player[].curr_weapon KNEE_WEAPON
		ifg gotsaber 0 nullop else
		setp[].weapon_pos -8
	}
	getp[].rotscrnang temp
	add temp 36
	ifg temp 90 set temp 90 // 60
	setp[].rotscrnang temp
	add slidekick 1
	ife slidekick 5 sound KICKOUT
	ife slidekick 12 ife slidehit NO shoot KNEE
	ifg slidekick 26 { set slidekick 0 set slidehit NO }
	
	ifl slidekick 20
	{
		geta[].cstat temp
		ifvarand temp 256 { xorvar temp 256 seta[].cstat temp }
		cos kickfvel player[].ang
		sin kicksvel player[].ang
		ifvarand perks 4
		{
			mul kicksvel 200
			mul kickfvel 200
		}
		else
		{
			mul kicksvel 160
			mul kickfvel 160
		}
		ife sector[].lotag 1 { div kickfvel 2 div kicksvel 2 }
		headspritesect spriteid player[].cursectnum
		whilevarn spriteid -1
		{
			ife sprite[spriteid].picnum SECTOREFFECTOR
			ife sprite[spriteid].lotag 24 
			{
				set kicksvel 0
				set kickfvel 0
			}
			nextspritesect spriteid spriteid
		}
		ifg backinput 0 { set slidekick 0 cstator 256 }
		// ifinwater { set slidekick 0 cstator 256 }
		ifinwater cstator 256
	}
	else cstator 256
}
else ifp palive cstator 256

ifl sidekick 0 add sidekick 1
ifg sidekick 0
{
/*
	ife pchar 2
	{
		// switch sidekick
		// case 1 getp[].ang initkickang set kickang initkickang add kickang 342 break
		// case 2 add kickang 342 setp[].ang kickang break
		// case 3 add kickang 342 setp[].ang kickang break
		// case 4 add kickang 342 setp[].ang kickang break
		// case 5 add kickang 342 setp[].ang kickang break
		// case 6 add kickang 342 setp[].ang kickang break
		// case 7 setp[].ang initkickang break
		// endswitch
		ife sidekick 1 
		{
			ife player[].over_shoulder_on YES set over_shoulder YES else set over_shoulder NO
			setp[].over_shoulder_on YES
		}
		ife sidekick 10
		{
			ife over_shoulder NO setp[].over_shoulder_on NO
		}
	}
*/	
	setp[].quick_kick 0
	set qk_proxy 0
	ifl player[].weapon_pos -8 
	{
		// ifl sidekick 16 
		ife player[].curr_weapon KNEE_WEAPON
		ifg gotsaber 0 nullop else
		setp[].weapon_pos -8
	}
	getp[].rotscrnang temp
	ifge sidekick 51 ifle sidekick 99 sub temp 36 else
	add temp 36
	ifg temp 75 set temp 75
	ifl temp -75 set temp -75
	setp[].rotscrnang temp
	add sidekick 1
	
	set tempb NO
	ifvarand perks 4 set tempb YES
	ifg fastfire 0 set tempb YES
	// ife pchar 2 set tempb YES
	
	ifg sidekick 3 ife tempb YES ifvarand sidekick 1 
	ifn sidekick 23
	ifn sidekick 15
	ifn sidekick 31 ifn sidekick 37 ifn sidekick 45
	ifn sidekick 43 ifn sidekick 47
	ifn sidekick 55 ifn sidekick 63
	ifn sidekick 61
	ifn sidekick 69
	ifl sidekick 100
	ifn sidekick 127
		add sidekick 1
	
	ife sidekick 3 sound KICKOUT // start sidekick
	ife sidekick 34 sound KICKOUT // start roundhouse kick
	ife sidekick 52 sound KICKOUT // start of LEFT roundhouse
	
	ifge sidekick 15 ifle sidekick 16
	{
		ifvarand bits 4194304
		{
			set sidekick 30 // start of roundhouse kick
			set slidehit NO
		}
	}
	
	ifge sidekick 7 ifle sidekick 14 ife slidehit NO shoot KNEE
	
	ifge sidekick 40 ifle sidekick 43 
		ife slidehit NO shoot KNEE
		
	ifge sidekick 58 ifle sidekick 61
		ife slidehit NO shoot KNEE
	
	ife sidekick 50 
	{ 
	    set slidehit NO
		ifvarand bits 4194304 ifn kicktarg -1
		{
			set qk_proxy 15
			set sidekick 0
		}
		else
		{
			set kicktarg -1 set sidekick -6
		}
	}
	
	ife sidekick 69 
	{
		ifn kicktarg -1 
		ifvarand bits 4194304
		{
			set sidekick 100 getp[].ang kickang set initkickang kickang
		}
		else
		{
			set sidekick -6
			set kicktarg -1
		}
		set slidehit NO 
	}
	
	ife sidekick 23 { set kicktarg -1 set sidekick -6 set slidehit NO }
	
	set kicksvel 0
	set kickfvel 0
	
	ifge sidekick 100
	{
		set tempb NO
		ifvarand perks 4 set tempb YES
		ifg fastfire 0 set tempb YES
		// ife pchar 2 set tempb YES
		ife tempb YES
		{
			switch sidekick
			case 101 case 103 case 105 case 107
				add sidekick 1
				add kickang 190
			break
			endswitch
		}
		ife sidekick 104 sound KICKOUT
		ifle sidekick 108 add kickang 190 else
		ifle sidekick 115 add kickang 76 else
		ifle sidekick 121 add kickang 32
		setp[].ang kickang
		ifge sidekick 108 ifl sidekick 123
		{
			shoot KNEE
			ifge sidekick 109
			ifle sidekick 115
			{
				getp[].ang angvar
				sub angvar 40
				setp[].ang angvar
				shoot KNEE
				add angvar 80
				setp[].ang angvar
				shoot KNEE
				setp[].ang kickang
			}
		}
		ifle sidekick 116
		{
			ife player[].curr_weapon KNEE_WEAPON
			ifg gotsaber 0 nullop else
			setp[].weapon_pos -8
		}
		
		cos kickfvel initkickang
		sin kicksvel initkickang
		
		ifle sidekick 123
		{
			ifvarand perks 4
			{
				mul kicksvel 160
				mul kickfvel 160
			}
			else
			{
				mul kicksvel 120
				mul kickfvel 120
			}
		}
	}
	ife sidekick 127 { set kicktarg -1 set sidekick -6 set slidehit NO setp[].ang initkickang }
	
	
	ifl sidekick 100
	{
		cos kickfvel player[].ang
		sin kicksvel player[].ang
		ifvarand perks 4
		{
			mul kicksvel 200
			mul kickfvel 200
		}
		else
		{
			mul kicksvel 160
			mul kickfvel 160
		}
		ifge sector[].lotag 1 ifle sector[].lotag 2 { div kickfvel 2 div kicksvel 2 }
		headspritesect spriteid player[].cursectnum
		whilevarn spriteid -1
		{
			ife sprite[spriteid].picnum SECTOREFFECTOR
			ife sprite[spriteid].lotag 24 
			{
				set kicksvel 0
				set kickfvel 0
			}
			nextspritesect spriteid spriteid
		}
		
	}
	
}
else
ife player[].quick_kick 0
ife qk_proxy 0
set kicktarg -1

ifn kicktarg -1
{
	geta[kicktarg].x x2
	geta[kicktarg].y y2
	sub x2 player[].posx
	sub y2 player[].posy
	getangle angvar x2 y2
	ifl sidekick 100
	setp[].ang angvar
	else set initkickang angvar
	ife actorvar[kicktarg].monstatus 2 set kicktarg -1 else
	ife sprite[kicktarg].statnum 1024 set kicktarg -1 else
	{
		ldist xydist THISACTOR kicktarg
		ifl xydist 640 { set kickfvel 0 set kicksvel 0 }
	}
}

ifn slidekick 0
{
	ifn kickfvel 0 setp[].posxv kickfvel
	ifn kicksvel 0 setp[].posyv kicksvel
}
else ifg jumpkick 0 ifl jumpkick 20
{
	setp[].posxv kickfvel
	setp[].posyv kicksvel
}
else
ifg sidekick 0
{
	ifn kickfvel 0 setp[].posxv kickfvel
	ifn kicksvel 0 setp[].posyv kicksvel
}

ifl kneecharge FULLKNEE add kneecharge 1

ife LASERMODE -4 // switching to comm gun FROM laser pistol
{
	ife player[].weapon_pos -9
	{
		set LASERMODE 3
		sound SELECT7
		setp[].ammo_amount PISTOL_WEAPON COMMAMMO 
	}
}
ife LASERMODE -2 // switching to comm gun
{
	ife player[].weapon_pos -9
	{
		set LASERMODE 3
		sound SELECT7
		setp[].ammo_amount PISTOL_WEAPON COMMAMMO 
	}
}
ife LASERMODE -3 // switching to laser pistol FROM comm gun
{
	ife player[].weapon_pos -9
	{
		set LASERMODE YES
		sound SWITCHTOLASER
		set WEAPON1_SELECTSOUND SWITCHTOLASER
		setp[].ammo_amount PISTOL_WEAPON LASERAMMO 
	}
}
ife LASERMODE -1 // switching to laser pistol
{
	ife player[].weapon_pos -9
	{
		set LASERMODE YES
		sound SWITCHTOLASER
		set WEAPON1_SELECTSOUND SWITCHTOLASER
		setp[].ammo_amount PISTOL_WEAPON LASERAMMO 
	}
}

set temp NO
ife LASERMODE 2 set temp YES
ife LASERMODE 4 set temp YES
ife temp YES // switching from laser pistol or comm gun to regular
{
	ife player[].weapon_pos -9
	{
		set LASERMODE NO
		ife pchar 0 state dukeweapons else
		ife pchar 1 state shellyweapons else
		ife pchar 2 state wesweapons else
		ife pchar 3 state mandoweapons else
		ife pchar 4 state novaweapons
		soundvar WEAPON1_SELECTSOUND
		setp[].ammo_amount PISTOL_WEAPON pistolammo
	}
}


ife LASERAMMO 0
{
	ife LASERMODE YES
	{
		ife player[].curr_weapon PISTOL_WEAPON
		{
			ife player[].weapon_pos 0 setp[].weapon_pos -1
			else ife player[].weapon_pos -9 set LASERMODE NO
		}
		else set LASERMODE NO
	}
}
ife COMMAMMO 0
{
	ife LASERMODE 3
	{
		ife player[].curr_weapon PISTOL_WEAPON
		{
			ife player[].weapon_pos 0 setp[].weapon_pos -1
			else ife player[].weapon_pos -9 set LASERMODE NO
		}
		else set LASERMODE NO
	}
}

ifg LASERFIRE 0
{
	add LASERFIRE 1
	
	ife LASERMODE 1 // laser pistol
	{
		ife LASERFIRE 2 state firelaserpistol
		ifg LASERFIRE 8 set LASERFIRE 0
	}
	else
	ife LASERMODE 3 // comm gun
	{
		ife LASERFIRE 10 state firecommgun
		ifg LASERFIRE 18 set LASERFIRE 0
	}
	else
	set LASERFIRE 0
}

ife player[].curr_weapon PISTOL_WEAPON
{
	ife LASERMODE YES
	{
		set WEAPON1_SELECTSOUND SWITCHTOLASER 
		ifactorsound THISACTOR INSERT_CLIP
		{
			stopactorsound THISACTOR INSERT_CLIP globalsound SWITCHTOLASER
		}
		else
		ifactorsound THISACTOR GLOCKMAGIN
		{
			stopactorsound THISACTOR GLOCKMAGIN globalsound SWITCHTOLASER
		}
		else
		ifactorsound THISACTOR DEAGLE_SLIDE
		{
			stopactorsound THISACTOR DEAGLE_SLIDE globalsound SWITCHTOLASER
		}
	}
	else ife LASERMODE 3
	{
		set WEAPON1_SELECTSOUND SELECT7
		ifactorsound THISACTOR INSERT_CLIP
		{
			stopactorsound THISACTOR INSERT_CLIP globalsound SELECT7
		}
		else
		ifactorsound THISACTOR GLOCKMAGIN
		{
			stopactorsound THISACTOR GLOCKMAGIN globalsound SELECT7
		}
		else
		ifactorsound THISACTOR DEAGLE_SLIDE
		{
			stopactorsound THISACTOR DEAGLE_SLIDE globalsound SELECT7
		}
	}
	else
	{
		// DEANOTE18#
		ife pchar 0
		{
			ifvarand dukeupgrades[PISTOL_WEAPON] 8 set WEAPON1_SELECTSOUND GLOCKMAGIN else
			set WEAPON1_SELECTSOUND INSERT_CLIP
		}
		else ife pchar 2 set WEAPON1_SELECTSOUND GLOCKMAGIN
		else set WEAPON1_SELECTSOUND DEAGLE_SLIDE
	}
}

ife rpgchange YES
{
	ifg player[].kickback_pic 20 set rpgchange NO
	ifn player[].curr_weapon RPG_WEAPON set rpgchange NO
}

ifvarand shellyupgrades[RPG_WEAPON] 1 nullop else
ife pchar 1
ife player[].curr_weapon RPG_WEAPON
ife player[].kickback_pic 18 sound RPGLOAD

ife player[].gotweapon DEVISTATOR_WEAPON 0 
{
	ifvarand gotrailgun 2 
	{
		set gotrailgun 0
		state switchrailgun
	}
}

ifvarand gotrailgun 4 nullop else
ifvarand gotrailgun 8 nullop else
ife player[].ammo_amount DEVISTATOR_WEAPON 0
ife player[].weapon_pos 0
ife player[].kickback_pic 0
{
	ifvarand gotrailgun 2
	{
		ifg railgunammo 0
		{
			ife player[].curr_weapon DEVISTATOR_WEAPON
			{
				orvar gotrailgun 8
				setp[].weapon_pos -1
			}
			else
			{
				xorvar gotrailgun 2
				state switchrailgun
				setp[].ammo_amount DEVISTATOR_WEAPON railgunammo
				set railgunammo 0
			}
		}
	}
	else
	{
		ifg railgunammo 0
		ifvarand gotrailgun 1
		{
			ife player[].curr_weapon DEVISTATOR_WEAPON
			{
				orvar gotrailgun 4
				setp[].weapon_pos -1
			}
			else
			{
				orvar gotrailgun 2
				state switchrailgun
				setp[].ammo_amount DEVISTATOR_WEAPON railgunammo
				set railgunammo 0
			}
		}
	}
}

ife player[].gotweapon FREEZE_WEAPON 0 
{
	ifvarand gotplasma 2 
	{
		set gotplasma 0
		state switchplasma
	}
}

ifvarand gotplasma 4 nullop else
ifvarand gotplasma 8 nullop else
ife player[].ammo_amount FREEZE_WEAPON 0
ife player[].weapon_pos 0
ife player[].gotweapon FREEZE_WEAPON YES
ife player[].kickback_pic 0
{
	ifvarand gotplasma 2
	{
		ifg plasmammo 0
		{
			ife player[].curr_weapon FREEZE_WEAPON
			{
				orvar gotplasma 8
				setp[].weapon_pos -1
			}
			else
			{
				xorvar gotplasma 2
				state switchplasma
				setp[].ammo_amount FREEZE_WEAPON plasmammo
				set plasmammo 0
			}
		}
	}
	else
	{
		ifg plasmammo 0
		ifvarand gotplasma 1
		{
			ife player[].curr_weapon FREEZE_WEAPON
			{
				orvar gotplasma 4
				setp[].weapon_pos -1
			}
			else
			{
				orvar gotplasma 2
				state switchplasma
				setp[].ammo_amount FREEZE_WEAPON plasmammo
				set plasmammo 0
			}
		}
	}
}

// switch to nuke if available and RPG empty
ife player[].ammo_amount RPG_WEAPON 0
ifg nukeamount 0
ife nukeselect NO
ifn player[].curr_weapon RPG_WEAPON
ife player[].weapon_pos 0
ife player[].kickback_pic 0
{
	set nukeselect YES
	setp[].ammo_amount RPG_WEAPON nukeamount
	set weap4ammo 0
	state switchnuke
}

ifvarand gotshock 4 // switching to EXECUTIONER
{
	ife player[].weapon_pos 10
	{
		setp[].curr_weapon CHAINGUN_WEAPON
		xorvar gotshock 4
		orvar gotshock 2	
		sound SWITCHTOLASER
		ife pchar 0 state dukeweapons else ife pchar 1 state shellyweapons
		else ife pchar 2 state wesweapons else
		ife pchar 3 state mandoweapons else
		ife pchar 4 state novaweapons
	}
} 
else
ifvarand gotshock 8 // switching back to CHAINGUN
{
	ifn player[].curr_weapon CHAINGUN_WEAPON xorvar gotshock 8
	else
	ife player[].weapon_pos 10
	{
		xorvar gotshock 8
		xorvar gotshock 2
		
		ife pchar 1 state shellyweapons else
		ife pchar 2 state wesweapons else
		ife pchar 3 state mandoweapons else
		ife pchar 4 state novaweapons else
		ife pchar 0 state dukeweapons
			
		soundvar WEAPON3_SELECTSOUND
		
		
	}
}

ife nukeselect -1 // switching to nuke
{
	ife player[].weapon_pos 10
	{
		setp[].curr_weapon RPG_WEAPON
		set tempb player[].ammo_amount RPG_WEAPON
		ife tempb 1 set tempb 0
		setp[].ammo_amount RPG_WEAPON nukeamount
		set weap4ammo tempb
		// sound NUKEREADY
		set nukeselect YES
		state switchnuke
	}
}
ife nukeselect -2 // switching back to RPG
{
	ife player[].curr_weapon RPG_WEAPON
	{
		ife player[].weapon_pos 0
		ifg player[].kickback_pic 20
		{
			setp[].weapon_pos -1
		}
		ife player[].curr_weapon RPG_WEAPON
		ife player[].weapon_pos 10
		{
			set nukeselect NO
			setp[].ammo_amount RPG_WEAPON weap4ammo
			state switchnuke
			
		}
	}
	else
	{
		set nukeselect NO
		setp[].ammo_amount RPG_WEAPON weap4ammo
		state switchnuke
	}
}

ifvarand gotrailgun 4 // switching to railgun
{
	ife switchnew NO
	ifn player[].curr_weapon DEVISTATOR_WEAPON xorvar gotrailgun 4
	else
	ife player[].weapon_pos 10
	{
		setp[].curr_weapon DEVISTATOR_WEAPON
		xorvar gotrailgun 4
		orvar gotrailgun 2
		set tempb player[].ammo_amount DEVISTATOR_WEAPON
		setp[].ammo_amount DEVISTATOR_WEAPON railgunammo
		set railgunammo tempb
		sound RIFLEREADY
		state switchrailgun
		ife switchnew YES set switchnew NO
	}
} 
else
ifvarand gotrailgun 8 // switching back to devastator
{
	ife player[].weapon_pos 10
	{
		setp[].curr_weapon DEVISTATOR_WEAPON
		xorvar gotrailgun 8
		xorvar gotrailgun 2
		set tempb player[].ammo_amount DEVISTATOR_WEAPON
		setp[].ammo_amount DEVISTATOR_WEAPON railgunammo
		set railgunammo tempb
		state switchrailgun
		soundvar WEAPON7_SELECTSOUND
	}
}

ifn pchar 1 ifn pchar 2
{
	ifvarand gotDB 4 // switching to DB shotty
	{
		ife player[].weapon_pos 10
		{
			setp[].curr_weapon SHOTGUN_WEAPON
			xorvar gotDB 4
			orvar gotDB 2
			set gun_name DBSPRITE
			ife pchar 4 sound SELECT7 else
			sound DBCLOSE
			ife pchar 0 state dukeweapons else
			ife pchar 3 state mandoweapons else
			ife pchar 4 state novaweapons
		}
	} 
	else
	ifvarand gotDB 8 // switching back to other shotgun
	{
		ifn player[].curr_weapon SHOTGUN_WEAPON xorvar gotDB 8
		else
		ife player[].weapon_pos 10
		{
			xorvar gotDB 8
			xorvar gotDB 2
			set gun_name SHOTGUNSPRITE
			
			ife pchar 0 state dukeweapons else
			ife pchar 3 state mandoweapons else
			ife pchar 4 state novaweapons
			soundvar WEAPON2_SELECTSOUND
		}
	}
}
else
{
	ifvarand gotDB 8 xorvar gotDB 8
	ifvarand gotDB 4 xorvar gotDB 4
}

ifge pchar 1 ifle pchar 2
{
	ifvarand gotbow 4 // switching to bow
	{
		ife player[].weapon_pos 10
		{
			setp[].curr_weapon SHOTGUN_WEAPON
			xorvar gotbow 4
			orvar gotbow 2
			set gun_name BOWSPRITE
			sound SELECTBOW
			ife pchar 1 state shellyweapons else
			ife pchar 2 state wesweapons
		}
	} 
	else
	ifvarand gotbow 8 // switching back to shotgun
	{
		ifn player[].curr_weapon SHOTGUN_WEAPON xorvar gotbow 8
		else
		ife player[].weapon_pos 10
		{
			xorvar gotbow 8
			xorvar gotbow 2
			set gun_name SHOTGUNSPRITE
			
			ife pchar 1 state shellyweapons else
			ife pchar 2 state wesweapons else
			ife pchar 3 state mandoweapons
			soundvar WEAPON2_SELECTSOUND
		}
	}
}
else
{
	ifvarand gotbow 8 xorvar gotbow 8
	ifvarand gotbow 4 xorvar gotbow 4
}

ifl combotime 0 
{
	getp[].weapon_pos temp
	ifl temp 0 ifg temp -8 set temp -8
	else
	ifg temp 1 ifl temp 8 set temp 1
	setp[].weapon_pos temp
	
}

ifvarand gotplasma 4 // switching to plasma
{
	ife player[].weapon_pos 10
	{
		setp[].curr_weapon FREEZE_WEAPON
		xorvar gotplasma 4
		orvar gotplasma 2
		set tempb player[].ammo_amount FREEZE_WEAPON
		setp[].ammo_amount FREEZE_WEAPON plasmammo
		set plasmammo tempb
		sound RIFLEREADY
		state switchplasma
	}
} 
else
ifvarand gotplasma 8 // switching back to freezer or incinerator
{
	ifn player[].curr_weapon FREEZE_WEAPON xorvar gotplasma 8
	else
	ife player[].weapon_pos 10
	{
		// setp[].curr_weapon FREEZE_WEAPON
		xorvar gotplasma 8
		xorvar gotplasma 2
		set tempb player[].ammo_amount FREEZE_WEAPON
		setp[].ammo_amount FREEZE_WEAPON plasmammo
		set plasmammo tempb
		state switchplasma
		soundvar WEAPON9_SELECTSOUND
	}
}

ife player[].curr_weapon TRIPBOMB_WEAPON
{
	ife player[].weapon_pos 10
	{
		ifvarand gotspider 4 // switching to spider mines
		{
			// ife pchar 0
			// {
				// set temp dukeupgrades[TRIPBOMB_WEAPON]
				// orvar temp 1
				// setarray dukeupgrades[TRIPBOMB_WEAPON] temp
				// state dukeweapons
			// }
			// else
			// ife pchar 1
			// {
				// set temp shellyupgrades[TRIPBOMB_WEAPON]
				// orvar temp 1
				// setarray shellyupgrades[TRIPBOMB_WEAPON] temp
				// state shellyweapons
			// }
			// else 
			// ife pchar 2
			// {
				// set temp wesupgrades[TRIPBOMB_WEAPON]
				// orvar temp 1
				// setarray wesupgrades[TRIPBOMB_WEAPON] temp
				// state wesweapons
			// }
			// else
			// ife pchar 3
			// {
				// set temp mandoupgrades[TRIPBOMB_WEAPON]
				// orvar temp 1
				// setarray mandoupgrades[TRIPBOMB_WEAPON] temp
				// state mandoweapons
			// }
			set temp dukeupgrades[TRIPBOMB_WEAPON]
			orvar temp 1
			setarray dukeupgrades[TRIPBOMB_WEAPON] temp
			xorvar gotspider 4
			ife pchar 0 state dukeweapons else
			ife pchar 1 state shellyweapons else
			ife pchar 2 state wesweapons else
			ife pchar 3 state mandoweapons else
			ife pchar 4 state novaweapons
		} 
		else
		ifvarand gotspider 8 // switching to tripbombs
		{
			// ife pchar 0
			// {
				// set temp dukeupgrades[TRIPBOMB_WEAPON]
				// ifvarand temp 1 xorvar temp 1
				// setarray dukeupgrades[TRIPBOMB_WEAPON] temp
				// state dukeweapons
			// }
			// else
			// ife pchar 1
			// {
				// set temp shellyupgrades[TRIPBOMB_WEAPON]
				// ifvarand temp 1 xorvar temp 1
				// setarray shellyupgrades[TRIPBOMB_WEAPON] temp
				// state shellyweapons
			// }
			// else
			// ife pchar 2
			// {
				// set temp wesupgrades[TRIPBOMB_WEAPON]
				// ifvarand temp 1 xorvar temp 1
				// setarray wesupgrades[TRIPBOMB_WEAPON] temp
				// state wesweapons
			// }
			// else
			// ife pchar 3
			// {
				// set temp mandoupgrades[TRIPBOMB_WEAPON]
				// ifvarand temp 1 xorvar temp 1
				// setarray mandoupgrades[TRIPBOMB_WEAPON] temp
				// state mandoweapons
			// }
			set temp dukeupgrades[TRIPBOMB_WEAPON]
			ifvarand temp 1 xorvar temp 1
			setarray dukeupgrades[TRIPBOMB_WEAPON] temp
			ife pchar 0 state dukeweapons else
			ife pchar 1 state shellyweapons else
			ife pchar 2 state wesweapons else
			ife pchar 3 state mandoweapons else
			ife pchar 4 state novaweapons
			xorvar gotspider 8
		}
	}
}
else
{
	ifvarand gotspider 4 xorvar gotspider 4
	ifvarand gotspider 8 xorvar gotspider 8
}

ife player[].curr_weapon DEVISTATOR_WEAPON
	ifvarand gotrailgun 2 
{
	ifg zoomcount 0 ifl zoomcount 7 add zoomcount 1
	ifl zoomcount 0 add zoomcount 1
		


	set temp NO
	ifn zoomin NO set temp YES
	ife pchar 0 ifvarand dukeupgrades[DEVISTATOR_WEAPON] 4 set temp YES
	ife pchar 1 ifvarand shellyupgrades[DEVISTATOR_WEAPON] 4 set temp YES
	ife pchar 2 ifvarand wesupgrades[DEVISTATOR_WEAPON] 4 set temp YES
	
	ife temp YES
	ife player[].kickback_pic WEAPON7_FIREDELAY // 3
	{
		rand tempb 3
		add tempb 5
		set horizfall tempb
		set savedhoriz player[].horiz
		add tempb player[].horiz
		setp[].horiz tempb
	}
	ifn player[].weapon_pos 0 set zoomin NO
}
else
ife pchar 1
ife player[].curr_weapon CHAINGUN_WEAPON
{
	ifn player[].weapon_pos 0 set zoomin NO
}
else
 ifn zoomcount 7 set zoomin NO
 

ifvarand gotplasma 2 stopactorsound THISACTOR SAWBLADE_LOOP else
ife player[].curr_weapon FREEZE_WEAPON
ife pchar 2
{
	ifl sawpic 19920 set sawpic 19920

	ifaction APWESFROZEN nullop else
	ife player[].kickback_pic 0
	ife vendor_screen 0
	ifn startmode -1
	{
		// stopactorsound THISACTOR SAWATTACK
		
		ifactorsound THISACTOR SAWBLADE_LOOP nullop else ife idleanim 0 sound SAWBLADE_LOOP
		set B sawspeed, sub B 1, mul B 50
		setactorsoundpitch THISACTOR SAWBLADE_LOOP B
		// sawpic advancement code in the display code
		ifvarand extbits 64 add sawspeed 1 else 
		{
			ifge sawspeed 30 setp[].kickback_pic 1
			ifg sawspeed 1 sub sawspeed 1
		}
		ifg sawspeed 30 set sawspeed 30
	}
	else 
	{
		stopactorsound THISACTOR SAWBLADE_LOOP
		ifg sawspeed 25
		ifvarand wesupgrades[FREEZE_WEAPON] 1 ife player[].kickback_pic 5
		ifg player[].ammo_amount FREEZE_WEAPON 0
		{
			sound BLADE_FIRE
			shoot BLADEPROJ
			getp[].ammo_amount FREEZE_WEAPON temp
			sub temp 1
			setp[].ammo_amount FREEZE_WEAPON temp
		}
		ifg player[].kickback_pic 6 set sawspeed 1
	}
	
}
else
{
	// stopactorsound THISACTOR SAWATTACK
	stopactorsound THISACTOR SAWBLADE_LOOP
}

ifn player[].weapon_pos 0 { set zoomin NO set zoomcount 0 }

ife pchar 0 ife player[].curr_weapon CHAINGUN_WEAPON ife zoomin YES
{ set zoomin NO set zoomcount 0 }

ifg sub_maxactors 0
{
	getp[].max_actors_killed temp
	sub temp sub_maxactors
	setp[].max_actors_killed temp
	set sub_maxactors 0
}

ifvarand oldextbits 64
{
	ifn player[].kickback_pic 0 xorvar oldbits 268435456
	else
	ifn player[].weapon_pos 0 xorvar oldbits 268435456
}

ife attmode YES
{
	ifvarand player[THISACTOR].gm 8
	ifvare GMCHECK 0
	{
		setvar GMCHECK 1
		// state savestatus
		// state resetammo
		setactor[THISACTOR].extra player[THISACTOR].max_player_health
		setplayer[THISACTOR].jetpack_amount 0
		addvar attfinished 1
		set temp attfinished
		mul temp 1000
		add totalxp temp
		addvar leveltoken 1
	}
	// following code moved to end of player actor because otherwise it breaks the game
	// if any music files are missing or any paths are incorrect since
	// eduke32 idiotically aborts the rest of the actor on any error
	// ifn attmusic -1
	// {
		// ife userdef[].music_episode 0
		// ife userdef[].music_level attmusic
		// nullop
		// else starttrackslot 0 attmusic
	// }
}

ifn SAVEDANGCOUNT 0
	sub SAVEDANGCOUNT 1

ifp palive
{
	ifg player[].falling_counter 62 set falldeath YES
	else ife player[].hard_landing 0 
	{
		ifinouterspace nullop else
		ifsquished nullop else
		set falldeath NO
	}
	
	ifg player[].secret_rooms secrets
	{
		ifn attmode 0 add totalxp 500
		ifsound SECRETFOUND nullop else
		screensound SECRETFOUND
		set secrets player[].secret_rooms
	}
	// add wakecount 1
	// ifg wakecount 10
	// {
		// ifg player[].cursectnum -1
		// {
			// getp[].cursectnum mysector
			// set tempc YES
			// headspritesect spriteid mysector
			// whilevarn spriteid -1
			// {
				// ife sprite[spriteid].picnum SECTOREFFECTOR
				// ife sprite[spriteid].lotag 7 set tempc YES
				// nextspritesect spriteid spriteid
			// }
			
			// ife tempc NO spawn WAKEY
		// }
		// set wakecount 0
	// }
	
	ifaction PFROZEN nullop else
	ifaction ALTDUKEFROZEN nullop else
	ifaction APSHELLYFROZEN nullop else
	ifaction APWESFROZEN nullop else
	ife player[].curr_weapon KNEE_WEAPON
	ifn pchar 2
	ifn pchar 4
	ife gotsaw YES
	ife WEAPON0_SHOOTS SAWPROJ
	{
		ife pchar 0 ifg sawpic 7644 set sawpic DUKESAWSTART
		ife pchar 1 ifl sawpic SAWSTART set sawpic SAWSTART
		ife pchar 3 ifl sawpic SAWSTART set sawpic SAWSTART
		ife player[].kickback_pic 0
		{
			stopactorsound THISACTOR SAWATTACK
			ifactorsound THISACTOR SAWIDLE nullop else sound SAWIDLE
			add sawpic_count 1
			ifge sawpic_count 2
			{
				set sawpic_count 0
				add sawpic 1
				ife pchar 1 ifg sawpic 8861 set sawpic SAWSTART
				ife pchar 3 ifg sawpic 8861 set sawpic SAWSTART
				ife pchar 0 ifg sawpic 7644 set sawpic DUKESAWSTART
			}
		}
		else
		{
			stopactorsound THISACTOR SAWIDLE
			ifactorsound THISACTOR SAWATTACK nullop else sound SAWATTACK
		}
	}
	else
	{
		stopactorsound THISACTOR SAWATTACK
		stopactorsound THISACTOR SAWIDLE
	}
	
	ife player[].rapid_fire_hold YES // pipebomb ready to be thrown
	{
		ifl pipehold 192 add pipehold 8
		ifp pducking nullop else
		ifn pchar 1 ifn pchar 2
		ifn pchar 4
		{
			set pipecount 0
			set xvel 192
			add xvel pipehold
			getp[].horiz zdist
			sub zdist 100
			mul zdist -2048
			div zdist 56
			getp[].posx x
			getp[].posy y
			getp[].posz z
			getp[].ang angvar
			whilevarn pipecount 130
			{
				set x2 x
				add x2 xvel
				sub xvel 5
				ifl xvel 0 set xvel 0
				rotatepoint x y x2 y angvar x y
				espawn LOBTRAIL
				set temp player[].cursectnum
				updatesectorz x y z temp
				ife temp -1 set pipecount 129 else
				changespritesect RETURN temp
				seta[RETURN].x x
				seta[RETURN].y y
				seta[RETURN].z z
				seta[RETURN].htbposx x
				seta[RETURN].htbposy y
				seta[RETURN].htbposz z
				setav[RETURN].countvar pipecount
				add z zdist
				add zdist 264
				add pipecount 1
			}
		}
	}
	else ifn pchar 4
	{
		// pipehold used on deanova for chrono-trigger upgrade
		ife player[].kickback_pic 0 set pipehold 0
		ifn player[].curr_weapon HANDBOMB_WEAPON set pipehold 0
	}
	
	// breadcrumb code
	
	add breadcount 1
	ifg breadcount 5
	ifl Numsprites 15360
	{
		set breadcount 0
		espawn BREADCRUMB
		setav[RETURN].mtype player[].player_par
		seta[RETURN].xrepeat 32
		seta[RETURN].yrepeat 32
		seta[RETURN].cstat 32768
		seta[RETURN].z player[].posz
		changespritestat RETURN 999
	}

	ifg burning 0 state imonfire
	else ifl burning 0 add burning 1
	ifg stun 0 
		sub stun 1
/*	
	ifvarn player[].cursectnum -1
	{
		getp[].cursectnum mysector
		ifn sector[mysector].floorslope 0
		{
			getflorzofslope mysector player[].posx player[].posy z
			// posz is normally 9748 higher (less z) than surface
			// the diff is reduced by about 512 for 1st tic of jump, then increases
			// after landing, the diff is reduced again for a few tics
			// when fully crouched, the diff is 4609
			getp[].posz temp
			add temp 9748
			sub temp z
			// we want to allow jumping when temp is slightly negative
			
			ifvarand bits 1
			ife player[].jumping_counter 0
			ifg temp -3804
			ife player[].jumping_toggle 0
			ifn sector[].lotag 1
			ifn sector[].lotag 2
			{
				setp[].jumping_counter 1
			}
			
		}
	}
*/
	ife player[].ftq 80 setp[].fta 0
	
	// set temp NO
	// ife pchar 1 ifvarand shellyupgrades[TRIPBOMB_WEAPON] YES set temp YES
	// ife pchar 0 ifvarand dukeupgrades[TRIPBOMB_WEAPON] YES set temp YES
	// ife pchar 2 ifvarand wesupgrades[TRIPBOMB_WEAPON] YES set temp YES
	// ife pchar 3 ifvarand mandoupgrades[TRIPBOMB_WEAPON] YES set temp YES
	// ife temp YES
	
	// ifvarand dukeupgrades[TRIPBOMB_WEAPON] YES
	// {
		// ife player[].weapon_pos 0
		// set WEAPON8_WORKSLIKE 6
		// else set WEAPON8_WORKSLIKE 8
	// }
	
	ifvarand dukeupgrades[TRIPBOMB_WEAPON] YES
	ifvarand bits 4
	ifp palive
	ife player[].weapon_pos 0
	ife player[].gotweapon TRIPBOMB_WEAPON YES
	ifg player[].ammo_amount TRIPBOMB_WEAPON 0
	ife player[].curr_weapon TRIPBOMB_WEAPON
	ife player[].kickback_pic 0
	{
		setp[].kickback_pic 1
	}
	
	// AIMBOT CODE
	ife aimbot_on YES
	{
		ifg player[].heat_amount 180
			set fastfire 2
		set bluetimer 0
		set safecount bottarget
		state targetsearch
		ife bottarget myshelly set bottarget -1 // failsafe
		ifn bottarget -1
		{
			ifn bottarget safecount sound AIMBOT_LOCK
			state turntotarget
			state turntotarget
			
			geta[bottarget].z zdist
			
			
			set TMP_A tiledata[sprite[bottarget].picnum].ysize
			mul TMP_A sprite[bottarget].yrepeat
			shiftl TMP_A 1
			add TMP_A 2048
			// TMP_A is now overall z size of target; how far up from the feet to strike
			// for comparison a standard liztroop would have a TMP_A of 78*40*2+2048==8228
			sub zdist TMP_A
			
			sub zdist player[].posz
			
			ldist xydist THISACTOR bottarget
			mul zdist -8
			div zdist xydist
			add zdist 100
			setp[].horiz zdist
		}
		getp[].heat_amount temp
		sub temp 1
		ifl temp 0 set temp 0
		setp[].heat_amount temp
		ifl temp 1 { set aimbot_on NO sound NITEVISION_ONOFF quote 710 }
		
	}

	// DOUBLE JUMP CODE
	ifvarand oldbits 1 nullop else
	// ifg player[].boot_amount 0
	// ifvarand inven_upgrades 8
	ife pchar 3 // Mando
	ifvarand bits 1
	ifn player[].poszv 0
	ife doublejump NO
	{
		iffloordistl 2 nullop else
		ifinwater nullop else
		{
			set doublejump 1
			ifl player[].poszv 0 setp[].poszv -1024
			sound DOUBLEJUMPSND
			// getp[].boot_amount temp
			// sub temp 2
			// ifl temp 0 set temp 0
			// setp[].boot_amount temp
		}
		
	}
	
	ifn doublejump 0
	{
		ifl doublejump 0 
		{
			sub doublejump 1
			ifg doublejump -15 setp[].falling_counter 0
		}
		
		ifl doublejump 45
		ifg doublejump 0
		{
			ifvarand bits 1
			{
				getp[].poszv z
				ifg z 0 shiftr z 1
				sub z 416
				set temp doublejump
				ifg temp 30 set temp 30
				mul temp 12
				add z temp
				setp[].poszv z
			}
			// else add doublejump 2
			
			add doublejump 1
			ifle doublejump 10 iffloordistl 2 { getp[].posz z sub z 512 setp[].posz z }
			setp[].falling_counter 0
			ifge doublejump 45 set doublejump -1
		}
		iffloordistl 2 
		{
			set temp NO
			ifg doublejump 10 set temp YES
			ifl doublejump 0 set temp YES
			ife temp YES
			{
				set doublejump NO
				stopsound DOUBLEJUMPSND
			}
		}
	}

	ifn triphack -1
	{
		ifn player[].curr_weapon 8 set triphack -1
		else
		{
			ife player[].kickback_pic 4
			{
				// getp[].ammo_amount 8 temp
				// sub temp 1
				// setp[].ammo_amount 8 temp
				espawn TRIPBOMBSPRITE
				setsprite RETURN tripx tripy tripz
				seta[RETURN].cstat 32
				seta[RETURN].ang player[].ang
				seta[RETURN].mdflags 16
				seta[RETURN].yoffset -10
				setav[RETURN].mtype 1
				sound LASERTRIP_ONWALL
				set triphack -1
			}
		}
	}
	ifg drinkcola 0
	{
		add drinkcola 1
		
		set temp NO
		ifg sprite[].htextra 0 set temp YES
		ifand bits 4 set temp YES
		ifand extbits 64 set temp YES
		
		ife temp YES
		{
			set drinkcola 0
			espawn COLACANSIDE
			seta[RETURN].pal snackpal
			setav[RETURN].droptile snackpic
			geta[RETURN].z z, sub z 5120, seta[RETURN].z z
			stopsound SODA_OPEN
		}
		
		ife drinkcola 4 sound SODA_OPEN
		ifg drinkcola 12 soundonce DUKE_TAKEPILLS
		ife drinkcola 40 
		{
			set tempb healthbuff
			div tempb 15
			
			geta[].extra temp
			add temp tempb
			
			set tempb healthbuff
			add tempb 20
			ifg temp tempb set temp tempb
			seta[].extra temp
			
			ife snackpic REACTORCAN
			ifl player[].steroids_amount 90
			setp[].steroids_amount 90
			
			espawn COLACANSTAND
			setav[RETURN].droptile snackpic
			seta[RETURN].htextra 10
			seta[RETURN].htpicnum SHOTSPARK1
			seta[RETURN].htowner THISACTOR
			setav[RETURN].myspawner THISACTOR
			palfrom 16 0 32 
			set drinkcola 0 
			set snackpic 0
			ifrnd 64 sound DUKE_USEMEDKIT
		}
	}
	ifg eatsnack 0
	{
		add eatsnack 1
		set temp NO
		ifg sprite[].htextra 0 set temp YES
		ifand bits 4 set temp YES
		ifand extbits 64 set temp YES
		
		ife temp YES
		{
			set eatsnack 0
			espawn SNACKSPRITE
			seta[RETURN].pal snackpal
			ife snackpic SNACKSPRITE setav[RETURN].droptile 1 else
			setav[RETURN].droptile snackpic
			geta[RETURN].z z, sub z 5120, seta[RETURN].z z
			stopsound EAT_SNACK
		}
		ife eatsnack 2 sound EAT_SNACK
		ife eatsnack 40 
		{
			set tempb healthbuff
			div tempb 15
			
			geta[].extra temp
			add temp tempb
			
			set tempb healthbuff
			add tempb 20
			ifg temp tempb set temp tempb
			seta[].extra temp
			
			palfrom 16 0 32 
			set eatsnack 0 
			set snackpic 0
			ifrnd 64 sound DUKE_USEMEDKIT
		}
	}
	
	

	ife player[].player_par 2 
	{
		set ATTLEVEL -1
		setvar GMCHECK 0
		setuserdef[].display_bonus_screen 1
		set gun_nametime 100
		set init_picnums 0 
		set raining rainstart 
		set wantrain raining
		set rainstart 0 
		set prevsawtime 0
		ifn AUTOSAVE YES set lastsave 999999 else
		set lastsave 2
		ifn mynavsprite -1 ife sprite[mynavsprite].picnum NAVSPRITE
			setav[mynavsprite].monstatus 2
		set mynavsprite -1
		ife VOLUME 6 ifg LEVEL 11 ifl LEVEL 38
		{
			strength MAXPLAYERHEALTH
			ifg gametype 0 { set radaron YES orvar perks 2 }
			else ife gametype 0 ifvarand perks 2 ifn radaron -1 set radaron YES
			else set radaron NO
		}
		else
		{
			ifvarand perks 2 ifn radaron -1 set radaron YES else
			set radaron NO
		}
		
		ife wesreplace 1 // wes replaces duke
		{
			ife pchar 0 set pchar 2
			ifvarand charsel 1
			{
				xorvar charsel 1
				orvar charsel 4
			}
			ifvarand startmode 1
			{
				xorvar startmode 1
				orvar startmode 4
			}
		}
		ife wesreplace 2 // wes replaces bombshell
		{
			ife pchar 1 set pchar 2
			ifvarand charsel 2
			{
				xorvar charsel 2
				orvar charsel 4
			}
			ifvarand startmode 2
			{
				xorvar startmode 2
				orvar startmode 4
			}
		}

		ife pchar 0 { setp[].palookup dukepal seta[].pal dukepal setuserdef[].color dukepal } else
		ife pchar 1 { setp[].palookup shellypal seta[].pal shellypal setuserdef[].color shellypal } else
		ife pchar 3 { setp[].palookup mandopal seta[].pal mandopal setuserdef[].color mandopal } else
		ife pchar 4 { setp[].palookup novapal seta[].pal novapal setuserdef[].color novapal } else
		ife pchar 2 
		{ 
			setp[].palookup wespal seta[].pal wespal setuserdef[].color wespal 
			ifn startguns 0 ife gotsaber 0 set gotsaber 1
		}
		
		ife startmode 1
		{
			set pchar 0
			set numchars 1
			state dukeweapons
		}
		else
		ife startmode 2
		{
			set pchar 1
			set numchars 1
			state shellyweapons
		}
		else ife startmode 3
		{
			set numchars 2
			ife pchar 0
			{
				state dukeweapons
				ife VOLUME 6 ife LEVEL 12 ifg visited[LEVEL] 1 nullop else
				{
					set temp YES
					headspritestat spriteid 1
					whilevarn spriteid -1
					{
						ife temp YES
						{
						ife sprite[spriteid].picnum SHELLY set temp NO
						ife sprite[spriteid].picnum SHELLYCROUCH set temp NO
						ife temp NO ifge actorvar[spriteid].initflags 32766 set temp YES
						}
						nextspritestat spriteid spriteid
					}
					ife temp YES
					spawn SHELLY
				}
			}
			else 
			{
				ife pchar 3 state mandoweapons else
				ife pchar 2 state wesweapons else
				ife pchar 1 state shellyweapons else
				state dukeweapons
				ife VOLUME 6 ife LEVEL 12 ifg visited[LEVEL] 1 nullop else
				{
					set temp YES
					headspritestat spriteid 1
					whilevarn spriteid -1
					{
						ife temp YES
						{
							ife sprite[spriteid].picnum DUKEBOT set temp NO
							ife sprite[spriteid].picnum DUKEBOTCROUCH set temp NO
							ife temp NO ifge actorvar[spriteid].initflags 32766 set temp YES
						}
						nextspritestat spriteid spriteid
					}
					ife temp YES
					spawn DUKEBOT
				}
			}
		}
		else
		ifg startmode 0
		{
			// all other player combos that are not D&B
			ifvarand startmode 1 // spawn DUKEBOT
			{
				ife pchar 0 state dukeweapons else
				ifl visited[LEVEL] 2
				{ espawn DUKEBOT set myshelly RETURN }
			}
			
			ifvarand startmode 2 // spawn SHELLY
			{
				ife pchar 1 state shellyweapons else 
				ifl visited[LEVEL] 2
				{ espawn SHELLY set myshelly RETURN }
			}
			ifvarand startmode 4 // spawn WESBOT
			{
				ife startmode 4 set pchar 2
				ife pchar 2 state wesweapons else 
				ifl visited[LEVEL] 2
				{ espawn WESBOT set myshelly RETURN }
			}
			ifvarand startmode 8 // spawn MANDOFETT
			{
				ife player[].ammo_amount PISTOL_WEAPON 48 set wristammo 32
				ife startmode 8 set pchar 3
				ife pchar 3 nullop else 
				ifl visited[LEVEL] 2
				{ espawn MANDOFETT set myshelly RETURN seta[RETURN].pal 3 }
				ife mylily -1
				{
					espawn LILY
					set mylily RETURN
				}
			}
			ifvarand startmode 16 // spawn DEANOVA
			{
				ife startmode 16 set pchar 4
				ife pchar 4 nullop else 
				ifl visited[LEVEL] 2
				{ espawn DEABOT set myshelly RETURN }
			}
		}
		ife gametype -1 // gladitorium and cathedral
		{
			getp[].player_par curr_tick
			add curr_tick 1
			headspritestat spriteid 980
			whilevarn spriteid -1
			{
				setav[spriteid].redflagval 0
				setav[spriteid].rediteration 99999
				setav[spriteid].redtimer curr_tick
				nextspritestat spriteid spriteid
			}
			rand countvar 4
			set spriteid 0
			whilevarn spriteid 16384
			{
				ife sprite[spriteid].picnum NAVSPRITE
				ifn sprite[spriteid].statnum 1024
				ifn actorvar[spriteid].mtype 6
				{
					add countvar 1
					ifg countvar 4
					{
						set countvar 0
						espawn DUMCIV
						setsprite RETURN sprite[spriteid].x sprite[spriteid].y sprite[spriteid].z
					}
				}
				ife sprite[spriteid].picnum DEANOVA
				ifl actorvar[spriteid].SPRITELOTAG 0
					setav[spriteid].monstatus 2
				add spriteid 1
			}
			seta[].extra player[].max_player_health
		}
		ifn vrtrip 0 seta[].extra player[].max_player_health
		
		// ife VOLUME 4
		// ifge LEVEL 10
		// {
			// set attmode 2
			// set switchmode NO
			// set vendorupgrade NO
			// set PROGRESSION YES
			// set NEWENEMIES NO
			// set radaron YES
		// }
		
		ife attmode YES
		{
			setp[].jetpack_amount 0
			ifstrength MAXPLAYERHEALTH strength MAXPLAYERHEALTH
			set NEWENEMIES YES
			// ife attfinished 0
				// set vendor_screen -20
				
			// state clearpweapons
			
			// 1 = pistol
			// 2 = shotgun
			// 4 = chaingun
			// 8 = RPG
			// 16 = pipebombs
			// 32 = shrinker or bmfg
			// 64 = devastator
			// 128 = spider-bombs or tripbombs
			// 256 = freezer or incinerator
			// 512 = babifier or shock rifle
			// 1024 = terminator gun
			// 2048 = vorpal blade
			// 4096 = chainsaw
			// 8192 = alien blaster
			// 16384 = railgun or penetrator
			
			// start with two weapons
			set startguns 0
			// rand temp 5
			rand temp 6
			// add temp 1
			switch temp
			case 0 orvar startguns 1 break
			case 1 orvar startguns 2 break
			case 2 orvar startguns 4 break
			case 3 orvar startguns 256 break
			case 4 orvar startguns 512 break
			case 5 orvar startguns 1024 break
			case 6 orvar startguns 32768 break
			endswitch
			rand temp 6
			switch temp
			case 0 orvar startguns 8 break
			case 1 orvar startguns 16 break
			case 2 orvar startguns 32 break
			case 3 orvar startguns 64 break
			case 4 orvar startguns 128 break
			case 5 orvar startguns 2048 break
			case 6 orvar startguns 16384 break
			endswitch
			ife attmid 1 ife VOLUME 5 ife LEVEL 11 set startguns 0
			state applystartguns
			ife VOLUME 5 ife LEVEL 11 setp[].ammo_amount PISTOL_WEAPON 0
			ife attmid 3
			{
				set bigmsg 1154
				set bigmsgcount 90
				mul leveltoken 1000
				add credits leveltoken
				add lastcredits leveltoken
				add totalcredits leveltoken
				set leveltoken 0
				globalsound GETCOINS
			}
		}
		state wakeupcivs // for kill counter accuracty

	}
	// else ife myshelly -1
	// ifg numchars 1
	// {
		// ifvarand startmode 1 // spawn DUKEBOT
		// {
			// ifn pchar 0
			// ifl visited[LEVEL] 2
			// { espawn DUKEBOT set myshelly RETURN }
		// }
		
		// ifvarand startmode 2 // spawn SHELLY
		// {
			// ifn pchar 1 
			// ifl visited[LEVEL] 2
			// { espawn SHELLY set myshelly RETURN }
		// }
		// ifvarand startmode 4 // spawn WESBOT
		// {
			// ifn pchar 2
			// ifl visited[LEVEL] 2
			// { espawn WESBOT set myshelly RETURN }
		// }
		// ifvarand startmode 8 // spawn MANDOFETT
		// {
			
			// ifn pchar 3
			// ifl visited[LEVEL] 2
			// { espawn MANDOFETT set myshelly RETURN seta[RETURN].pal 3 }
		// }
		// ifvarand startmode 16 // spawn DEANOVA
		// {
			
			// ifn pchar 4
			// ifl visited[LEVEL] 2
			// { espawn DEABOT set myshelly RETURN }
		// }
	// }
}
else
{
	// setp[].runspeed RUNNINGSPEED
	set triphack -1
	set drinkcola 0
	stopactorsound THISACTOR SAWATTACK
	stopactorsound THISACTOR SAWIDLE
}

ife input[].fvel 0 ife input[].svel 0
{
	rand stepcount 32000
	// ife player[].transporter_hold 0
	// {
		// ifg decay 1
		// {
			// cos xvel moveang
			// sin yvel moveang
			// mul xvel decay
			// mul yvel decay
			// setp[].posxv xvel
			// setp[].posyv yvel
		// }
		// else { setp[].posxv 0 setp[].posyv 0 }
		// mul decay 5 div decay 6
	// }
}
// else 
// {
	// getp[].posxv logxv getp[].posyv logyv
	// getangle moveang logxv logyv
	// abs logxv abs logyv
	// add logxv logyv
	// sqrt logxv decay
	// shiftr decay 4
	// ifn player[].transporter_hold 0 set decay 0
// }

ife STEPSOUNDS YES ifp palive 
ifl PLAYERONTHEBIKE 1
state stepsoundstuff	 

ife startmode -1 set gamespeed DEFAULTSPEED else
{
	ifp ponsteroids ife player[].timebeforeexit 0 
	{
		set gamespeed 80 
		set fastfire 3
	}
	else
	ifn gamespeed TRAINTIMER
	set gamespeed DEFAULTSPEED
	
}

inittimer gamespeed

ife player[].timebeforeexit 0 ifn lexit 0 { setp[].timebeforeexit lexit set lexit 0 }

state checkhitscan

ifn shootswitch 0 
{ 
	getp[].posz savz sub savz 256 setp[].posz savz shoot SWITCHBULLET
	add savz 256 setp[].posz savz
}

ifg shootswitch 0 sub shootswitch 1

// ife player[].heat_on YES
ife zoomin YES
{
	ife vr -1
	{
		set vrhi viewingrange
		set vrlo vrhi
		ife zoomlevel 2 { mul vrlo 2 div vrlo 3 }
		else div vrlo zoomlevel
		set vr vrhi
	}
	
	ifg vr vrlo 
	{
		sub vr 4096 // 3072
		ifl vr vrlo set vr vrlo
		ife player[].curr_weapon CHAINGUN_WEAPON set vr vrlo
	}

	set temp MAPVISIBILITY, sub temp 96  // vis range
	set tempc vrhi, sub tempc vrlo  // vr range, we could just take vrlo...

	set tempb vr, sub tempb vrlo  // vr-vrlo
	mul tempb temp, div tempb tempc  // ((vr-vrlo)*(hivis-lovis))/(vrhi-vrlo)
	add tempb 96

	setuserdef[].const_visibility tempb
	
	// getp[].ohoriz temp
	set temp ohoriz
	getp[].horiz tempb
	sub tempb temp
	ifn cameraoffset 0
	{
		ifl tempb 0
		add cameraoffset tempb
		ifl cameraoffset 0 set cameraoffset 0
	}
}
else
{
	
	ife player[].heat_on YES
	{
		set temp DEFAULTVISIBILITY
		div temp 2
		setuserdef[].const_visibility temp
	}
	else
	ife aimbot_on YES
	{
		set temp DEFAULTVISIBILITY
		div temp 2
		setuserdef[].const_visibility temp
	}
	else
	setuserdef[].const_visibility MAPVISIBILITY
	
	ifg vr 0 set vr vrhi else
	ife vr vrhi set vr -1
}

getplayer[].ang oang
getplayer[].horiz ohoriz

// ifvarand inven_upgrades 2 nullop else
ife player[].heat_on NO
ifl player[].heat_amount 180
ifand player[].player_par 4
{
	getp[].heat_amount temp
	add temp 1
	setp[].heat_amount temp
	ife player[].inven_icon 1 ife player[].firstaid_amount 0 setp[].inven_icon 5
}

// new inventory item hack
// 8 is the temporary cover item

ifg iframes 0 sub iframes 1
ifg iframehit 0 sub iframehit 1


// DAMAGE CODE
state predamage
geta[].htextra temp
ife pdown YES { set temp -1 seta[].htextra -1 }
ifg rage 0 { set temp -1 seta[].htextra -1 }
ifg temp 0
ifn sprite[].htpicnum SHRINKSPARK
{
	geta[].htowner spriteid
	
	set mykiller spriteid
	ife actorvar[spriteid].team team
	ifn spriteid THISACTOR
	{
		shiftr temp 1 
		ifl temp 1 set temp 1
		ife gametype DM set temp -1
		seta[].htextra temp
	}
	getav[spriteid].shrunken tempb
	ifg tempb 20 ifl tempb SHRUNKCOUNT
	{
		ifg temp 1 { set temp 1 seta[].htextra 1 }
	}
	
	ife PLAYERONTHEBIKE 1 
	ifg temp 0
	{
		shiftr temp 1
		ifl temp 1 set temp 1
		seta[].htextra temp
	}
	
	ifn es_type 0 ifg es_hp 0 set iframes 0 else
	ifg temp 0
	{
		ifg iframes 0
		{
			ifn sprite[].htpicnum BURNING
			ifn sprite[].htpicnum RADWOUND
			ife bleeding 0
			{
				set temp -1
				seta[].htextra -1
				soundonce IFRAMEHIT
				set iframehit 3
			}
		}
		else
		ifg iframes_max 0
		ifn sprite[].htpicnum BURNING
		ifn sprite[].htpicnum RADWOUND
			set iframes iframes_max

	}

	seta[].htextra temp
	ifg player[].shield_amount 0
	ifle es_hp 0
	{
		getp[].shield_amount tempb
		ifg sprite[].htextra 1
		{
			div temp 2
			sub tempb temp
			ifl tempb 0 set tempb 0
			ifl temp 1 set temp 1
			seta[].htextra temp
			setp[].shield_amount tempb
		}
		
	}
	
	ifg sprite[].htextra 0
	// ife radaron YES
	{
		set damagefade 1
		
		geta[spriteid].x x
		geta[spriteid].y y
		sub x sprite[].x
		sub y sprite[].y
		getangle angvar x y
		
		getincangle tempd player[].ang angvar
		
		ifg tempd 0 set damagesprite 18532 else set damagesprite 18531
		abs tempd
		ifg tempd 640 set damagesprite 18533 else
		ifl tempd 128 set damagesprite 18530
	}
}

ifn es_type 0
{
	ifg es_lasthit player[].player_par set es_pic -1
	ifge es_pic 18832
	{
		set temp player[].player_par
		sub temp es_lasthit
		ifg es_hp 0
		{
			ifge temp 4 set es_pic -1
		}
		else
		{
			modvar temp 6
			ife temp 0 add es_pic 1
			ifg es_pic 18836 set es_pic -1
		}
	}
	set es_batterymax es_hpmax[es_type]
	add es_batterymax 25
	set temp 10
	set tempb es_speed[es_type]
	div tempb 2
	add temp tempb
	mul es_batterymax temp
	set tempb es_delay[es_type]
	mul tempb 3
	sub es_batterymax tempb
	div es_batterymax 2
	ifg es_battery es_batterymax set es_battery es_batterymax
	
	ifn gametype 0 set es_battery es_batterymax
	ife es_battery -1 set es_battery es_batterymax

	ifvarand startmode 8 nullop else setp[].shield_amount 0
	ifg es_hp 0
	{
		ifg sprite[].htextra 0
		ifn sprite[].htpicnum SHRINKSPARK
		{
			set es_delaycount 0
			set es_speedcount 0
			
			setp[].pals_time sprite[].htextra
			ifg player[].pals_time 42 setp[].pals_time 42 else
			ifl player[].pals_time 16 setp[].pals_time 16
			sub es_hp sprite[].htextra
			ife sprite[].htpicnum SHOCKPROJ
			{
				sub es_hp sprite[].htextra
				ifl es_hp 0 set es_hp 0
			}
			set es_lasthit player[].player_par
			set es_pic 18832
			set es_alpha -1
			ifle es_hp 0 
			{
				stopactorsound THISACTOR HITSHIELD
				// palfrom 45 63 63 63
				set tempb es_hp abs tempb
				
				seta[].htextra tempb 
				ife gametype 0 { seta[].htextra -1 set iframes 6 }
				set es_hp 0
				set tempe player[].posz add tempe 1024
				set x player[].posx
				add x 384
				rotatepoint player[].posx player[].posy x player[].posy player[].ang savx savy
				
				espawn SPARKFALL setsprite RETURN savx savy tempe
				espawn SPARKFALL setsprite RETURN savx savy tempe
				espawn SPARKFALL setsprite RETURN savx savy tempe
				espawn SPARKFALL setsprite RETURN savx savy tempe
				espawn SPARKFALL setsprite RETURN savx savy tempe
				espawn SPARKFALL setsprite RETURN savx savy tempe
				
				ife novatype 0 screensound SHIELDBREAK
				else ife novareset NO screensound SHIELDBREAK
				else
				{
					
					screensound SHIELDNOVA
					
					set novareset NO
					
					headspritestat tempI 1
					whilevarn tempI -1
					{
						ife actorvar[tempI].monstatus 1
						ifn actorvar[tempI].team team
						{
							ife novatype 2 set xydist 4096 else set xydist 5120
							dist xydist2 THISACTOR tempI
							ifle xydist2 xydist
							{
								// apply effects
								switch novatype
								case 1 // electric
									espawn SHOCK_ACTOR
									setsprite RETURN sprite[tempI].x sprite[tempI].y sprite[tempI].z
									setav[RETURN].myspawner tempI
									seta[tempI].htowner player[].i
									set tempb es_hpmax[es_type]
									shiftl tempb 1
									setav[tempI].stun tempb
									shiftr tempb 1
									add tempb 10
									seta[tempI].htextra tempb
									seta[tempI].htpicnum RPG
									seta[tempI].htowner player[].i
								break
								
								case 2 // frost
									espawn TRANSPORTERSTAR
									
									set z sprite[tempI].z
									sub z 8192
									setsprite RETURN sprite[tempI].x sprite[tempI].y z
									setav[RETURN].mtype 2
									seta[RETURN].xrepeat 32
									seta[RETURN].yrepeat 32
									seta[RETURN].pal 1
									seta[RETURN].cstat 2
									set tempb es_hpmax[es_type]
									add tempb 10
									shiftl tempb 1
									
									seta[tempI].htextra tempb
									seta[tempI].htpicnum FREEZEBLAST
									seta[tempI].htowner player[].i
								break
								
								case 3 // burning
									ifrnd 128 espawn BURNING else espawn BURNING2
									setsprite RETURN sprite[tempI].x sprite[tempI].y sprite[tempI].z
									set tempb es_hpmax[es_type]
									shiftl tempb 2
									setav[tempI].burning tempb
									shiftr tempb 4
									add tempb 10
									seta[tempI].htextra tempb
									seta[tempI].htpicnum SHOTSPARK1
									seta[tempI].htowner player[].i
								break
								
								case 4 // explosive
								break
								
								case 5 // babifier
								break
								endswitch
								
							}
						}
						nextspritestat tempI tempI
					}
					
				}
			}
			else 
			{
				// palfrom 40 63 63 63
				ifactorsound THISACTOR HITSHIELD nullop else ifactorsound THISACTOR HITSHIELD2 nullop else
				{
					ifrnd 128
					sound HITSHIELD else
					sound HITSHIELD2
				}
				seta[].htpicnum HITSHIELD
				seta[].htextra -1
			}
		}
	}
	else
	ifg sprite[].htextra 0
	{
		set es_delaycount 0
		set es_speedcount 0
	}
	
	ifp palive
	ife pdown NO
	{
		add es_delaycount 1
		ifge es_hp es_hpmax[es_type] ifn novatype 0 set novareset YES
		set shield_delay es_delay[es_type]
		
		// ife gametype 0 shiftl shield_delay 1 // time penalty for singleplayer
		
		ifn novatype 0 { mul shield_delay 4 div shield_delay 3 }
		ifge es_delaycount shield_delay // es_delay[es_type]
		{
			add es_speedcount 1
			ifge es_speedcount es_speed[es_type]
			{
				ifl es_hp es_hpmax[es_type]
				ifg es_battery 0
				{
					add es_hp 1
					sub es_battery 1
					set es_chargepal player[].player_par
					set es_speedcount 0
				}
			}
		}
	}
	else
	{
		ife sprite[].htpicnum SHRINKSPARK
		ifg es_hp 0 add es_battery es_hp
		
		set es_hp 0
		// set es_battery 0
		set es_delaycount 0
		set es_speedcount 0
	}
}
else set es_pic -1

ifg sprite[].htextra 0
ife pdown NO
{
	set temp NO
	ife sprite[].htpicnum SHOCKPROJ set temp YES
	ifvarand actorvar[sprite[].htowner].monstflags 1048576 set temp YES
	ife temp YES
	{
		add pshocked sprite[].htextra
		sub pshocked plevel
		ifl pshocked 15 set pshocked 15
		ifg pshocked 120 set pshocked 120
		ifactorsound THISACTOR BOS4_ATTACK nullop else sound BOS4_ATTACK
	}
}

ifg pshocked 0
{
	sub pshocked 1
	ife pshocked 0 { ifactorsound THISACTOR BOS4_ATTACK stopactorsound THISACTOR BOS4_ATTACK }
	set slidekick 0
	set sidekick 0
	set jumpkick 0
	setp[].jumping_counter 0
	set x player[].posxv
	div x 2 
	setp[].posxv x
	set y player[].posyv
	div y 2 
	setp[].posyv y
	set saberpos 0
	
	ifvarand player[].player_par 1
	{
		add shockframe 1
		ifg shockframe 21169 set shockframe 21167
	}
}


ifl sprite[].extra player[].max_player_health
{
	// make threshold depend on life percentage??
	ifge leach 50
	{
		set leach_hudtime 60
		// set temp leach
		// div temp 50
		// ifg leach_hud 0 add temp 1
		// ifg temp leach_hud set leach_hud temp
		sub leach 50
		addphealth 1
		ifg o2damage 0 sub o2damage 1
		add leach_hud 1
		ifsound HEARTBEAT nullop else { screensound HEARTBEAT screensound HEARTBEAT screensound HEARTBEAT }
	}
}
else { set leach 0 set leach_hud 0 set leach_hudtime 0 }
ifg leach_hudtime 0 
{
	sub leach_hudtime 1
	ife leach_hudtime 0 set leach_hud 0
}

ifg regenmax 0
{
	ifp palive
	{
		ifg sprite[].htextra 0 set regendelay 0
		
		ifl sprite[].extra regenmax
		{
			add regendelay 1
			ifg regendelay 150
			{
				set temp player[].player_par
				modvar temp 8
				ife temp 0 
				{
					addphealth 1
					ifg o2damage 0 sub o2damage 1
				}
			}
		}
		else set regendelay 0
	}
	else set regendelay 0
}

  ifaction 0
  {
    ife pchar 1 action APSHELLYSTAND else
	ife pchar 2 action APWESSTAND else
	ife pchar 3 action APMANSTAND else
	ife pchar 4 action APDEASTAND else
	ifvarand altcostume 2 action ALTDUKESTAND else
    action PSTAND
  }
  
  ife pchar 0
  ifvarand altcostume 8
  ifn player[].quick_kick 0
  ife qk_proxy 0
  {
		set qk_proxy player[].quick_kick
		setp[].quick_kick 0
  }
  

  ifg sprite[].htextra 0
  {
	  geta[].htowner spriteid
	  
	  ifvarand shellyupgrades[RPG_WEAPON] 1 nullop else
	  ife spriteid THISACTOR
	  ife sprite[].htpicnum RPG
	  ife rpgtype 1
	  ife pchar 1
		seta[].htpicnum FREEZEBLAST
	  
	  ife sprite[].htpicnum RANGERPROJ
	  ifn spriteid -1
	  ife userdef[].god NO
	  {
		geta[].htextra temp
		dist xydist THISACTOR spriteid
		ifg xydist 10240 // damage reduction on long range
		{
			geta[].htextra temp
			mul temp 10240
			div temp xydist
			seta[].htextra temp
		}
	  }
	  ifg gametype 0
	  ife userdef[].god NO
	  ifge sprite[].htextra sprite[].extra
	  {
		ife bluecarrier THISACTOR set bluecarrier -1
		ife redcarrier THISACTOR set redcarrier -1
		set monstatus 2
	  }
  }
  
set oldbits bits
set oldextbits extbits
set lastframerate framerate
  
  // ifaction PFROZEN
   set temp NO
  ifaction PFROZEN set temp YES
  ifaction APSHELLYFROZEN set temp YES
  ifaction ALTDUKEFROZEN set temp YES
  ifaction APWESFROZEN set temp YES
  ifaction APDEAFROZEN set temp YES
  
  ife temp YES
  {
    cstat 257

    fall

    palfrom 20 0 0 24

    ifmove 0
    {
      ifhitweapon
      {
        ifwasweapon FREEZEBLAST
          break
        state standard_pjibs
        ifrnd 84
          spawn BLOODPOOL2

        sound GLASS_BREAKING
        spawn ATOMICHEALTH

        getlastpal

        move 1
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
        break
      }
    }
    else
    {
      cstat 32768
	  state resetplayerstuff
      break
    }

    ifactioncount THAWTIME
    {
      getlastpal
      strength 1
      move 0
	  ife pchar 4 action APDEASTAND else
	  ife pchar 3 action APMANSTAND else
	  ife pchar 2 action APWESSTAND else
	  ife pchar 1 action APSHELLYSTAND else
	  ifvarand altcostume 2 action ALTDUKESTAND else
      action PSTAND 
    }
    else
      ifactioncount FROZENDRIPTIME
    {
      ifrnd 32
      spawn WATERDRIP
    }

    ifp pfacing   // assumes another other player  (multiplayer)
      ifpdistl FROZENQUICKKICKDIST
        state pkick_check

    break
  }

  ifdead
  {
    set temp NO
	ifaction PGROWING set temp YES
	ifaction APSHELLYGROWING set temp YES
	ifaction APWESGROWING set temp YES
	ifaction APDEAGROWING set temp YES
	
    // ifaction PGROWING
	ife temp YES
    {
      ifmove PGROWINGPOP
      {
        state resetplayerstuff
        break
      }
      else
      {
        ifcount 32
        {
          sound SQUISHED
          palfrom 48 64

          state standard_pjibs

          guts JIBS4 20
          guts JIBS6 20
          move PGROWINGPOP
		  set deathtime totalclock
		    ifg gametype 0
			{
				ifn gametime -1
				{
					ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
					else
					{
					ife team 1 add redscore 5 else
					ife team 0 add bluescore 5
					}
				}
				state playerscorecheck
			}
          cstat 32768
          ifmultiplayer tossweapon

          hitradius 2048 60 70 80 90

        }
        else
          sizeto MAXXSTRETCH MAXYSTRETCH
      }
      break
    }

    ifsquished
      palfrom 32 63 63 63
    else
      fall

    ifactioncount 7
      move 0
    else
      ifactioncount 6
    {
      ifmultiplayer nullop
      else
      {
	    ife VOLUME 6 ifl LEVEL 11 rand temp 7 else rand temp 5
		// temp 0 and temp 1 no death sound
		ife temp 2 sound DUKE_KILLED5 else
		ife temp 3 sound DUKE_KILLED3 else
		ife temp 4 sound DUKE_KILLED1 else
		ife temp 5 sound DUKE_KILLED2 else
		ife temp 6 sound VACA_DIE1 else
		ife temp 7 sound VACA_DIE2

      }
    }

    ifaction PLYINGDEAD
    {
      ifactioncount 3
        move PSTOPED
	  state resetplayerstuff
      break
    }
	
	ifaction ALTDUKELYINGDEAD
	{
	  ifactioncount 3
        move PSTOPED
	  state resetplayerstuff
      break
	}

    ifaction PTHROWNBACK
    {
      ifactioncount 5
      {
        spawn BLOODPOOL2
        action PLYINGDEAD
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      else
        ifactioncount 1
          move 0
      break
    }
	
	ifaction ALTDUKETHROWNBACK
    {
      ifactioncount 5
      {
        spawn BLOODPOOL2
		// ifvarand altcostume 2 xorvar altcostume 2
        action ALTDUKELYINGDEAD
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      else
        ifactioncount 1
          move 0
      break
    }
	
	

    ifaction PEXPLODEAD
    {
	  state resetplayerstuff
      break
    }
    ifaction PEXPLODE
    {
      ifactioncount 5
      {
        action PEXPLODEAD
        spawn BLOODPOOL2
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      break
    }
	
	ifaction ALTDUKEEXPLODEAD
    {
	  state resetplayerstuff
      break
    }
    ifaction ALTDUKEEXPLODE
    {
      ifactioncount 5
      {
        action ALTDUKEEXPLODEAD
        spawn BLOODPOOL2
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      break
    }
	
	
	
	ifaction APSHELLYLYINGDEAD
    {
      ifactioncount 3
        move PSTOPED
	  state resetplayerstuff
      break
    }
	
	ifaction APWESLYINGDEAD
    {
      ifactioncount 3
        move PSTOPED
	  state resetplayerstuff
      break
    }
	
	ifaction APMANLYINGDEAD
    {
      ifactioncount 3
        move PSTOPED
	  state resetplayerstuff
      break
    }
	
	ifaction APDEALYINGDEAD
    {
      ifactioncount 3
        move PSTOPED
	  state resetplayerstuff
      break
    }

    ifaction APSHELLYTHROWNBACK
    {
      ifactioncount 5
      {
        spawn BLOODPOOL2
        action APSHELLYLYINGDEAD
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      else
        ifactioncount 1
          move 0
      break
    }
	
	ifaction APWESTHROWNBACK
    {
      ifactioncount 6
      {
        spawn BLOODPOOL2
        action APWESLYINGDEAD
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      else
        ifactioncount 1
          move 0
      break
    }
	
	ifaction APMANTHROWNBACK
    {
      ifactioncount 6
      {
        spawn BLOODPOOL2
        action APMANLYINGDEAD
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      else
        ifactioncount 1
          move 0
      break
    }
	
	ifaction APDEATHROWNBACK
    {
      ifactioncount 6
      {
        spawn BLOODPOOL2
        action APDEALYINGDEAD
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      else
        ifactioncount 1
          move 0
      break
    }

    ifaction APSHELLYEXPLODEAD
    {
	  state resetplayerstuff
      break
    }
    ifaction APSHELLYEXPLODE
    {
      ifactioncount 5
      {
        action APSHELLYEXPLODEAD
        spawn BLOODPOOL2
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      break
    }
	
	ifaction APWESEXPLODEAD
    {
	  state resetplayerstuff
      break
    }
    ifaction APWESEXPLODE
    {
      ifactioncount 6
      {
        action APWESEXPLODEAD
        spawn BLOODPOOL2
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      break
    }
	
	ifaction APMANEXPLODEAD
    {
	  state resetplayerstuff
      break
    }
    ifaction APMANEXPLODE
    {
      ifactioncount 6
      {
        action APMANEXPLODEAD
        spawn BLOODPOOL2
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      break
    }
	
	ifaction APDEAEXPLODEAD
    {
	  state resetplayerstuff
      break
    }
    ifaction APDEAEXPLODE
    {
      ifactioncount 6
      {
        action APDEAEXPLODEAD
        spawn BLOODPOOL2
		set deathtime totalclock
		ifg gametype 0
		{
			ifn gametime -1
			{
				ife gametype DM { ife team 1 add redscore 1 else ife team 0 add bluescore 1 }
				else
				{
				ife team 1 add redscore 5 else
				ife team 0 add bluescore 5
				}
			}
			state playerscorecheck
		}
      }
      break
    }

    ifp pshrunk
    {
      state standard_pjibs
      spawn BLOODPOOL2
	  // setp[].runspeed RUNNINGSPEED
      sound SQUISHED
      sound DUKE_DEAD

      cstat 32768         // Hide the sprite
	  ife pchar 4 action APDEALYINGDEAD else
	  ife pchar 3 action APMANLYINGDEAD else
	  ife pchar 2 action APWESLYINGDEAD else
	  ife pchar 1 action APSHELLYLYINGDEAD else
	  ifvarand altcostume 2 action ALTDUKELYINGDEAD else
      action PLYINGDEAD
    }
    else
    {
      ifinwater
      {
	    ife pchar 4 action APDEALYINGDEAD else
	    ife pchar 3 action APMANLYINGDEAD else
		ife pchar 2 action APWESLYINGDEAD else
	    ife pchar 1 action APSHELLYLYINGDEAD else
		ifvarand altcostume 2 action ALTDUKELYINGDEAD else
        action PLYINGDEAD
        spawn WATERBUBBLE
        spawn WATERBUBBLE
      }
      else
      {
	    
		ife pchar 4 action APDEAEXPLODE else
	    ife pchar 3 action APMANEXPLODE else
	    ife pchar 2 action APWESEXPLODE else
	    ife pchar 1 action APSHELLYEXPLODE 
		else
        { 
			action PEXPLODE 
			ifvarand altcostume 2 action ALTDUKEEXPLODE
		}
        state standard_pjibs
        cstat 32768
        sound SQUISHED
        sound DUKE_DEAD
      }
	  
    }

    ifmultiplayer tossweapon

    break
  }
  

  ifsquished
  {
    strength -1
    sound SQUISHED
    state random_ooz
	set falldeath YES
    break
  }
  
  ife pdown YES
  {
	state resetplayerstuff
	break
  }

  ifp ponsteroids
  {
    ifp pstanding nullop
    else
      spawn FRAMEEFFECT1
  }

ife pchar 2 set selfshrink YES else 
ife pchar 4 set selfshrink YES else set selfshrink NO
ife selfshrink YES
{
	ife PSHRINKING 0 
	ifp palive
	ife player[].inven_icon 6 // scuba
	ifvarand bits 1073741824
	ife sprite[].htextra -1
	ife shrinkcooldown 0
	ifp ponground
	{
		// self-shrinker
		seta[].htextra 0
		seta[].htpicnum SHRINKSPARK
		seta[].htowner THISACTOR
		
		set shrinkcooldown 900
	}
	ifinwater 
	{ 
		ife player[].scuba_amount 1 
		{
			getp[].inven_icon temp
			setp[].scuba_amount 0 
			setp[].inven_icon temp
		}
	} 
	else
	ife player[].scuba_amount 0 setp[].scuba_amount 1
}
  ife PSHRINKING 0 ifg shrinkcooldown 0 sub shrinkcooldown 1
  ifg PSHRINKING 0
  {
    add PSHRINKING 1
    ifg PSHRINKING 32
    {
	  ifl PSHRINKING 270
	  ife selfshrink YES
		ife player[].inven_icon 6 // scuba or self-shrink
		ifvarand bits 1073741824
		   set PSHRINKING 271
		   
		   
      ifg PSHRINKING 304 // SHRUNKDONECOUNT
      {
        move 0
		set PSHRINKING 0
		sizeat 42 36
        cstat 257
      }
      else
        ifg PSHRINKING 270 // SHRUNKCOUNT
      {
        sizeto 42 36
		seta[].htpicnum SHOTSPARK1 // to prevent re-shrinking from stored shrinker hit
        ifgapzl 24
        {
          strength 0
          sound SQUISHED
          palfrom 48 64
          break
        }

      }
      else
	  {
		setp[].falling_counter 0
        ifp ponsteroids
		  set PSHRINKING 270
          //count SHRUNKCOUNT
	  }
    }
    else
    {
      ifp ponsteroids
	    set PSHRINKING 270
      else
      {
        sizeto 8 9
        spawn FRAMEEFFECT1
      }
    }
  }
  else ifhitweapon
  {
	set idleanim 0
    ifdead
    {
	  ifactorsound THISACTOR LASERLOOP stopactorsound THISACTOR LASERLOOP 
		ifactorsound THISACTOR FREEZELOOP stopactorsound THISACTOR FREEZELOOP 
      ifmultiplayer
        sound DUKE_KILLED4

      ifwasweapon GROWSPARK
      {
        palfrom 48 48
		ife pchar 4 action APDEAGROWING else
		ife pchar 3 action APMANGROWING else
		ife pchar 2 action APWESGROWING else
		ife pchar 1 action APSHELLYGROWING else
		ifvarand altcostume 2 action ALTDUKEGROWING else
        action PGROWING
        count 0
        move 0
		sound SPARKLESOUND
        sound ACTOR_GROWING
        cstat 0
        break
      }
	  ifwasweapon FREEZEBLAST
	  {
		  palfrom 48 0 0 48
		  set burning 0
		  
			sound NEWFREEZE
			spritepal 1
			move 0
			ife pchar 4 action APDEAFROZEN else 
			ife pchar 3 action APMANFROZEN else
			ife pchar 2 action APWESFROZEN else
			ife pchar 1 action APSHELLYFROZEN else
			ifvarand altcostume 2 action ALTDUKEFROZEN else
			action PFROZEN
			state freezeme
			break
	  }
    }
    
	state playerpainsounds
   
   set temp player[].max_player_health
	div temp 2
	ifg temp 80 set temp 80
    //ifstrength TOUGH
	ifle sprite[].extra temp
    {
      // state headhitstate
	  // ife pchar 4 sound DEA_PAIN1 else 
	  // ife pchar 3 sound MANDO_PAIN1 else
	  // ife pchar 2 sound WESPAIN2 else
	  // ife pchar 1 sound B_GRUNT else
      // sound DUKE_GRUNT
      ifp pstanding
	  {
		ife pchar 4 action APDEAFLINTCH else
		ife pchar 3 action APMANFLINTCH else
	    ife pchar 2 action APWESFLINTCH else
	    ife pchar 1 action APSHELLYFLINTCH else
		ifvarand altcostume 2 action ALTDUKEFLINTCH else
        action PFLINTCHING
	  }
    }
    ifwasweapon RPG
    {
      ifrnd 32
        spawn BLOOD
	  palfrom 48 52
      ifdead
	  {
        state standard_pjibs
		break
	  }
    }
    ifwasweapon RADIUSEXPLOSION
    {
      ifrnd 32
        spawn BLOOD
	  palfrom 48 52
	  
      ifdead
	  {
        state standard_pjibs
        break
	  }
    }
    ifwasweapon FIREEXT
    {
	  palfrom 48 52
      ifrnd 32
        spawn BLOOD
      ifdead
	  {
        state standard_pjibs
        break
	  }
    }
    
    ifwasweapon SHRINKSPARK
    {
      palfrom 48 0 48
      move PSHRINK // used as a var only.
	  set PSHRINKING 1
      sound ACTOR_SHRINKING
      cstat 256 // 0
      break
    }
    
	switch sprite[].htpicnum
	
    case FREEZEBLAST
      palfrom 48 0 0 48
	  ifg burning 0 set burning 0
    break
	case GROWSPARK
    
      palfrom 48 52
      sound SPARKLESOUND
    break
	case SHOTSPARK1
      palfrom 24 48
	break
	case POMPROJ
	  palfrom 20 48
	  stopsound PISTOL_BODYHIT
	break
    case COOLEXPLOSION1
      palfrom 48 48 0 48
	break
    case KNEE case KICKPROJ
      palfrom 20 32
	break
	case FIRELASER case SCUBAPROJ
      palfrom 32 32
	break
	case MEGAPROJ
      palfrom 40 32 0 16
	break
	case SHOCKPROJ
      palfrom 20 63 63 63
	break
	case PLASMAPROJ case PLAYERPLASMA
	  palfrom 36 20 0 32
	break
	case SHOCKBALL
	  palfrom 48 16 16 60
	break
	case GREENLASER
	  palfrom 28 16 40 16
	break
	case MANDOLASER
	  palfrom 28 36 36 0 
	break
	case BIGBOIPROJ
	  palfrom 40 40 40 0
	break
	case FLAMEPROJ case FLAMEPROJ2
	  palfrom 48 24
	break
	case FTPROJ
	  palfrom 48 24 add burning 40
	break
	case RANGERPROJ
	  palfrom 52 40
	break
	case SPIKEPROJ
	  palfrom 32 8 40 0
	break
	
	case ARCBALLPROJ2
	  palfrom 40 63 0 63
	break
	case COMETPROJ
	  palfrom 42 32 8 8
	break
	case PURPPROJ
	  palfrom 32 48 0 48
	break
	case NEWPLASMA
	  palfrom 36 63 63 0
	break
	case EGGJIBPROJ
	  palfrom 24 8 63 12
	  stopsound PISTOL_BODYHIT
	break
	case TIDALPROJ
		palfrom  30 16 63 16
	break
	default
		palfrom 40 32
	break
	endswitch

    ifdead
    {
	  ife pchar 4 action APDEATHROWNBACK else
	  ife pchar 3 action APMANTHROWNBACK else
	  ife pchar 2 action APWESTHROWNBACK else
	  ife pchar 1 action APSHELLYTHROWNBACK else
	  ifvarand altcostume 2 action ALTDUKETHROWNBACK else
      action PTHROWNBACK
      ifmultiplayer tossweapon
    }
	else ifg player[].pals_time 0 { getp[].pals_time temp mul temp 2 div temp 3 setp[].pals_time temp }

    state random_wall_jibs

    break
  }

  ifaction PFLINTCHING
  {
    ifactioncount 2
      action PSTAND
    break
  }
  
  ifaction APSHELLYFLINTCH
  {
    ifactioncount 2
      action APSHELLYSTAND
    break
  }
  
  ifaction APWESFLINTCH
  {
    ifactioncount 2
      action APWESSTAND
    break
  }
  
   ifaction APMANFLINTCH
  {
    ifactioncount 2
      action APMANSTAND
    break
  }
  
   ifaction APDEAFLINTCH
  {
    ifactioncount 2
      action APDEASTAND
    break
  }
  
  ife pchar 4 
  {
	ifaction APDEASTAB break
	ifaction APDEACLAWING break
	ifaction APDEABLOCK break
	ifaction APDEASTUCK
	{
		ifn deaonwall -1 break
		else action APDEAFALLING
	}
  }
  
  ifinwater
  {
    ife pchar 4
	{
		ifaction APDEATREDWATER
		{
		  ifp pwalking prunning
			action APDEASWIMMINGGO
		}
		else
		  ifp pstanding pwalkingback prunningback
			action APDEATREDWATER
		else
		{
		  ifaction APDEASWIMMING
		  {
			ifrnd 4
			  spawn WATERBUBBLE
			ifactioncount 4
			  action APDEASWIMMINGWAIT
		  }
		  else
			ifaction APDEASWIMMINGWAIT
		  {
			ifactioncount 2
			  action APDEASWIMMINGGO
		  }
		  else
			ifaction APDEASWIMMINGGO
		  {
			ifactioncount 2
			  action APDEASWIMMING
		  }
		  else
			action APDEATREDWATER
		}
	}
	else
    ife pchar 3
	{
		ifaction APMANTREDWATER
		{
		  ifp pwalking prunning
			action APMANSWIMMINGGO
		}
		else
		  ifp pstanding pwalkingback prunningback
			action APMANTREDWATER
		else
		{
		  ifaction APMANSWIMMING
		  {
			ifrnd 4
			  spawn WATERBUBBLE
			ifactioncount 4
			  action APMANSWIMMINGWAIT
		  }
		  else
			ifaction APMANSWIMMINGWAIT
		  {
			ifactioncount 2
			  action APMANSWIMMINGGO
		  }
		  else
			ifaction APMANSWIMMINGGO
		  {
			ifactioncount 2
			  action APMANSWIMMING
		  }
		  else
			action APMANTREDWATER
		}
	}
	else
    ife pchar 2
	{
		ifaction APWESTREDWATER
		{
		  ifp pwalking prunning
			action APWESSWIMMINGGO
		}
		else
		  ifp pstanding pwalkingback prunningback
			action APWESTREDWATER
		else
		{
		  ifaction APWESSWIMMING
		  {
			ifrnd 4
			  spawn WATERBUBBLE
			ifactioncount 4
			  action APWESSWIMMINGWAIT
		  }
		  else
			ifaction APWESSWIMMINGWAIT
		  {
			ifactioncount 2
			  action APWESSWIMMINGGO
		  }
		  else
			ifaction APWESSWIMMINGGO
		  {
			ifactioncount 2
			  action APWESSWIMMING
		  }
		  else
			action APWESTREDWATER
		}
	}
	else
    ife pchar 1
	{
		ifaction APSHELLYTREDWATER
		{
		  ifp pwalking prunning
			action APSHELLYSWIMMINGGO
		}
		else
		  ifp pstanding pwalkingback prunningback
			action APSHELLYTREDWATER
		else
		{
		  ifaction APSHELLYSWIMMING
		  {
			ifrnd 4
			  spawn WATERBUBBLE
			ifactioncount 4
			  action APSHELLYSWIMMINGWAIT
		  }
		  else
			ifaction APSHELLYSWIMMINGWAIT
		  {
			ifactioncount 2
			  action APSHELLYSWIMMINGGO
		  }
		  else
			ifaction APSHELLYSWIMMINGGO
		  {
			ifactioncount 2
			  action APSHELLYSWIMMING
		  }
		  else
			action APSHELLYTREDWATER
		}
	}
	else ifvarand altcostume 2
	{
		ifaction ALTDUKETREDWATER
		{
		  ifp pwalking prunning
			action ALTDUKESWIMMINGGO
		}
		else
		  ifp pstanding pwalkingback prunningback
			action ALTDUKETREDWATER
		else
		{
		  ifaction ALTDUKESWIMMING
		  {
			ifrnd 4
			  spawn WATERBUBBLE
			ifactioncount 4
			  action ALTDUKESWIMMINGWAIT
		  }
		  else
			ifaction ALTDUKESWIMMINGWAIT
		  {
			ifactioncount 2
			  action ALTDUKESWIMMINGGO
		  }
		  else
			ifaction ALTDUKESWIMMINGGO
		  {
			ifactioncount 2
			  action ALTDUKESWIMMING
		  }
		  else
			action ALTDUKETREDWATER
		}
	}
	else
	{
		ifaction PTREDWATER
		{
		  ifp pwalking prunning
			action PSWIMMINGGO
		}
		else
		  ifp pstanding pwalkingback prunningback
			action PTREDWATER
		else
		{
		  ifaction PSWIMMING
		  {
			ifrnd 4
			  spawn WATERBUBBLE
			ifactioncount 4
			  action PSWIMMINGWAIT
		  }
		  else
			ifaction PSWIMMINGWAIT
		  {
			ifactioncount 2
			  action PSWIMMINGGO
		  }
		  else
			ifaction PSWIMMINGGO
		  {
			ifactioncount 2
			  action PSWIMMING
		  }
		  else
			action PTREDWATER
		}
	}

    ifrnd 4
      spawn WATERBUBBLE // For effect
	getp[].poszv oposzv
    break
  }
  else ifp pjetpack
  {
    ifaction PJPHOUVER
    {
      ifactioncount 4
        resetactioncount
    }
    else
      action PJPHOUVER
	// DEANOTE16# 
	ife pchar 1 state shellyactions
	else ife pchar 2 state wesactions
	else ife pchar 3 state manactions
	else ife pchar 4 state deaactions
	else ifvarand altcostume 2 state altdukeactions
	getp[].poszv oposzv
    break
  }
  else
  {
    ifaction PTREDWATER
      action PSTAND
    ifaction PSWIMMING
      action PSTAND
    ifaction PSWIMMINGWAIT
      action PSTAND
    ifaction PSWIMMINGGO
      action PSTAND
    ifaction PJPHOUVER
      action PFALLING
	  
	ifaction ALTDUKETREDWATER
      action ALTDUKESTAND
    ifaction ALTDUKESWIMMING
      action ALTDUKESTAND
    ifaction ALTDUKESWIMMINGWAIT
      action ALTDUKESTAND
    ifaction ALTDUKESWIMMINGGO
      action ALTDUKESTAND
    ifaction ALTDUKEJPHOUVER
      action ALTDUKEFALLING
	  
	ifaction APSHELLYTREDWATER
      action APSHELLYSTAND
    ifaction APSHELLYSWIMMING
      action APSHELLYSTAND
    ifaction APSHELLYSWIMMINGWAIT
      action APSHELLYSTAND
    ifaction APSHELLYSWIMMINGGO
      action APSHELLYSTAND
    ifaction APSHELLYHOUVER
      action APSHELLYFALLING
	  
    ifaction APWESTREDWATER
      action APWESSTAND
    ifaction APWESSWIMMING
      action APWESSTAND
    ifaction APWESSWIMMINGWAIT
      action APWESSTAND
    ifaction APWESSWIMMINGGO
      action APWESSTAND
    ifaction APWESHOUVER
      action APWESFALLING
	  
	ifaction APMANTREDWATER
      action APMANSTAND
    ifaction APMANSWIMMING
      action APMANSTAND
    ifaction APMANSWIMMINGWAIT
      action APMANSTAND
    ifaction APMANSWIMMINGGO
      action APMANSTAND
    ifaction APMANHOUVER
      action APMANFALLING
	  
	ife pchar 1 state shellyactions
	else ife pchar 2 state wesactions
	else ife pchar 3 state manactions
	else ife pchar 4 state deaactions
	else ifvarand altcostume 2 state altdukeactions
  }

  // set temp NO
  // ifaction PFALLING set temp YES
  // ifaction APSHELLYFALLING set temp YES
  // ifaction ALTDUKEFALLING set temp YES
  // ifaction APWESFALLING set temp YES
  // ifaction APMANFALLING set temp YES
  // ife temp YES
  
  
  ifge oposzv 384
  {
    set stepcount -32768
    ifp ponground
    {
		ifl PLAYERONTHEBIKE 1
		  // ifactioncount 1
		  ifle player[].poszv 0
	      state landsounds
		 ife pchar 4 action APDEASTAND else
		 ife pchar 3 action APMANSTAND else
		 ife pchar 2 action APWESSTAND else
		 ife pchar 1 action APSHELLYSTAND else
		 ifvarand altcostume 2 action ALTDUKESTAND else
	     action PSTAND 
		  
		  
	}
    else
    {
      ifp pfalling
	  {
	    getp[].poszv oposzv
        break
	  }
      else
        state check_pstandard
    }
  }
  ife pchar 4
  {
	  ifaction APDEADUCKING
	  {
		ifgapzl 48
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APDEACRAWLING
		}
		else ifp pducking
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APDEACRAWLING
		}
		else
		{
		  // ifp pstanding
			// action APDEASTAND
		  // else
			state check_pstandard
		}
	  }
	  else ifaction APDEACRAWLING
	  {
		ifgapzl 48
		{
		  ifp pstanding
			action APDEACRAWLING
		}
		else
		  ifp pducking
		{
		  ifp pstanding
			action APDEADUCKING
		}
		else
		{
		  // ifp pstanding
			// action APDEASTAND
		  // else
			state check_pstandard
		}
	  }
	  else
		ifgapzl 48
		  action APDEADUCKING
	  else
		ifaction APDEAJUMPING
	  {
		ifp ponground
		  action APDEASTAND
		else
		  ifactioncount 4
			ifp pfalling
			  action APDEAFALLING
			
	  }
  }
  else 
  ife pchar 3
  {
	  ifaction APMANDUCKING
	  {
		ifgapzl 48
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APMANCRAWLING
		}
		else ifp pducking
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APMANCRAWLING
		}
		else
		{
		  ifp pstanding
			action APMANSTAND
		  else
			state check_pstandard
		}
	  }
	  else ifaction APMANCRAWLING
	  {
		ifgapzl 48
		{
		  ifp pstanding
			action APMANCRAWLING
		}
		else
		  ifp pducking
		{
		  ifp pstanding
			action APMANDUCKING
		}
		else
		{
		  ifp pstanding
			action APMANSTAND
		  else
			state check_pstandard
		}
	  }
	  else
		ifgapzl 48
		  action APMANDUCKING
	  else
		ifaction APMANJUMPING
	  {
		ifp ponground
		  action APMANSTAND
		else
		  ifactioncount 4
			ifp pfalling
			  action APMANFALLING
			
	  }
  }
  else
  ife pchar 2
  {
	  ifaction APWESDUCKING
	  {
		ifgapzl 48
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APWESCRAWLING
		}
		else ifp pducking
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APWESCRAWLING
		}
		else
		{
		  ifp pstanding
			action APWESSTAND
		  else
			state check_pstandard
		}
	  }
	  else ifaction APWESCRAWLING
	  {
		ifgapzl 48
		{
		  ifp pstanding
			action APWESCRAWLING
		}
		else
		  ifp pducking
		{
		  ifp pstanding
			action APWESDUCKING
		}
		else
		{
		  ifp pstanding
			action APWESSTAND
		  else
			state check_pstandard
		}
	  }
	  else
		ifgapzl 48
		  action APWESDUCKING
	  else
		ifaction APWESJUMPING
	  {
		ifp ponground
		  action APWESSTAND
		else
		  ifactioncount 4
			ifp pfalling
			{
			  ifaction APWESGLIDING ifvarand bits 1 nullop else
			  action APWESFALLING
			}
	  }
  }
  else
  ife pchar 1
  {
	  ifaction APSHELLYDUCKING
	  {
		ifgapzl 48
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APSHELLYCRAWLING
		}
		else ifp pducking
		{
		  ifp pwalking pwalkingback prunning prunningback
			action APSHELLYCRAWLING
		}
		else
		{
		  ifp pstanding
			action APSHELLYSTAND
		  else
			state check_pstandard
		}
	  }
	  else ifaction APSHELLYCRAWLING
	  {
		ifgapzl 48
		{
		  ifp pstanding
			action APSHELLYCRAWLING
		}
		else
		  ifp pducking
		{
		  ifp pstanding
			action APSHELLYDUCKING
		}
		else
		{
		  ifp pstanding
			action APSHELLYSTAND
		  else
			state check_pstandard
		}
	  }
	  else
		ifgapzl 48
		  action APSHELLYDUCKING
	  else
		ifaction APSHELLYJUMPING
	  {
		ifp ponground
		  action APSHELLYSTAND
		else
		  ifactioncount 4
			ifp pfalling
			  action APSHELLYFALLING
	  }
  }
  else
  ifvarand altcostume 2
  {
	  ifaction ALTDUKEDUCKING
	  {
		ifgapzl 48
		{
		  ifp pwalking pwalkingback prunning prunningback
			action ALTDUKECRAWLING
		}
		else ifp pducking
		{
		  ifp pwalking pwalkingback prunning prunningback
			action ALTDUKECRAWLING
		}
		else
		{
		  ifp pstanding
			action ALTDUKESTAND
		  else
			state check_pstandard
		}
	  }
	  else ifaction ALTDUKECRAWLING
	  {
		ifgapzl 48
		{
		  ifp pstanding
			action ALTDUKECRAWLING
		}
		else
		  ifp pducking
		{
		  ifp pstanding
			action ALTDUKEDUCKING
		}
		else
		{
		  ifp pstanding
			action ALTDUKESTAND
		  else
			state check_pstandard
		}
	  }
	  else
		ifgapzl 48
		  action ALTDUKEDUCKING
	  else
		ifaction ALTDUKEJUMPING
	  {
		ifp ponground
		  action ALTDUKESTAND
		else
		  ifactioncount 4
			ifp pfalling
			  action ALTDUKEFALLING
	  }
  }
  else
  {
	  ifaction PDUCKING
	  {
		ifgapzl 48
		{
		  ifp pwalking pwalkingback prunning prunningback
			action PCRAWLING
		}
		else ifp pducking
		{
		  ifp pwalking pwalkingback prunning prunningback
			action PCRAWLING
		}
		else
		{
		  ifp pstanding
			action PSTAND
		  else
			state check_pstandard
		}
	  }
	  else ifaction PCRAWLING
	  {
		ifgapzl 48
		{
		  ifp pstanding
			action PCRAWLING
		}
		else
		  ifp pducking
		{
		  ifp pstanding
			action PDUCKING
		}
		else
		{
		  ifp pstanding
			action PSTAND
		  else
			state check_pstandard
		}
	  }
	  else
		ifgapzl 48
		  action PDUCKING
	  else
		ifaction PJUMPING
	  {
		ifp ponground
		  action PSTAND
		else
		  ifactioncount 4
			ifp pfalling
			  action PFALLING
	  }
  }
  ife pchar 4
  {
	  ifp pfalling
	  {
		action APDEAFALLING
	  }
	  else
		ifaction APDEASTAND
		  state check_pstandard
	  else
		ifaction APDEAKICKING
	  {
		ifactioncount 2
		  action APDEASTAND
		getp[].poszv oposzv
		break
	  }
	  else
		ifaction APDEAWALK
	  {
		ifp pfalling
		  action APDEAFALLING
		else
		  ifp pstanding
			action APDEASTAND
		else
		  ifp prunning
			action APDEARUN
		else
		  ifp pwalkingback
			action APDEAWALKBACK
		else
		  ifp prunningback
			action APDEARUNBACK
		else
		  ifp pjumping
			action APDEAJUMPING
		else
		  ifp pducking
			action APDEADUCKING
	  }
	  else
		ifaction APDEARUN
	  {
		ifp pstanding
		  action APDEASTAND
		else
		  ifp pwalking
			action APDEAWALK
		else
		  ifp pwalkingback
			action APDEAWALKBACK
		else
		  ifp prunningback
			action APDEARUNBACK
		else
		  ifp pjumping
			action APDEAJUMPING
		else
		  ifp pducking
			action APDEADUCKING
	  }

	  else
		ifaction APDEAWALKBACK
	  {
		ifp pstanding
		  action APDEASTAND
		else
		  ifp pwalking
			action APDEAWALK
		else
		  ifp prunning
			action APDEARUN
		else
		  ifp prunningback
			action APDEARUNBACK
		else
		  ifp pjumping
			action APDEAJUMPING
		else
		  ifp pducking
			action APDEADUCKING
	  }

	  else
		ifaction APDEARUNBACK
	  {
		ifp pstanding
		  action APDEASTAND
		else
		  ifp pwalking
			action APDEAWALK
		else
		  ifp prunning
			action APDEARUN
		else
		  ifp pwalkingback
			action APDEAWALKBACK
		else
		  ifp pjumping
			action APDEAJUMPING
		else
		  ifp pducking
			action APDEADUCKING
	  }
  }
  else
  ife pchar 3
  {
	  ifp pfalling
	  {
		action APMANFALLING
	  }
	  else
		ifaction APMANSTAND
		  state check_pstandard
	  else
	    ifaction APMANGUNDOWN
		  state check_pstandard
	  else
		ifaction APMANKICKING
	  {
		ifactioncount 2
		  action APMANSTAND
		getp[].poszv oposzv
		break
	  }
	  else
		ifaction APMANWALK
	  {
		ifp pfalling
		  action APMANFALLING
		else
		  ifp pstanding
			action APMANSTAND
		else
		  ifp prunning
			action APMANRUN
		else
		  ifp pwalkingback
			action APMANWALKBACK
		else
		  ifp prunningback
			action APMANRUNBACK
		else
		  ifp pjumping
			action APMANJUMPING
		else
		  ifp pducking
			action APMANDUCKING
	  }
	  else
		ifaction APMANRUN
	  {
		ifp pstanding
		  action APMANSTAND
		else
		  ifp pwalking
			action APMANWALK
		else
		  ifp pwalkingback
			action APMANWALKBACK
		else
		  ifp prunningback
			action APMANRUNBACK
		else
		  ifp pjumping
			action APMANJUMPING
		else
		  ifp pducking
			action APMANDUCKING
	  }

	  else
		ifaction APMANWALKBACK
	  {
		ifp pstanding
		  action APMANSTAND
		else
		  ifp pwalking
			action APMANWALK
		else
		  ifp prunning
			action APMANRUN
		else
		  ifp prunningback
			action APMANRUNBACK
		else
		  ifp pjumping
			action APMANJUMPING
		else
		  ifp pducking
			action APMANDUCKING
	  }

	  else
		ifaction APMANRUNBACK
	  {
		ifp pstanding
		  action APMANSTAND
		else
		  ifp pwalking
			action APMANWALK
		else
		  ifp prunning
			action APMANRUN
		else
		  ifp pwalkingback
			action APMANWALKBACK
		else
		  ifp pjumping
			action APMANJUMPING
		else
		  ifp pducking
			action APMANDUCKING
	  }
  }
  else
  ife pchar 2
  {
	  ifp pfalling
	  {
	    ifaction APWESGLIDING ifvarand bits 1 nullop else
		action APWESFALLING
	  }
	  else
		ifaction APWESSTAND
		  state check_pstandard
	  else
	    ifaction APWESGUNDOWN
		  state check_pstandard
	  else
		ifaction APWESKICKING
	  {
		ifactioncount 5
		  action APWESSTAND
		getp[].poszv oposzv
		break
	  }
	  else
		ifaction APWESWALK
	  {
		ifp pfalling
		  action APWESFALLING
		else
		  ifp pstanding
			action APWESSTAND
		else
		  ifp prunning
			action APWESRUN
		else
		  ifp pwalkingback
			action APWESWALKBACK
		else
		  ifp prunningback
			action APWESRUNBACK
		else
		  ifp pjumping
			action APWESJUMPING
		else
		  ifp pducking
			action APWESDUCKING
	  }
	  else
		ifaction APWESRUN
	  {
		ifp pstanding
		  action APWESSTAND
		else
		  ifp pwalking
			action APWESWALK
		else
		  ifp pwalkingback
			action APWESWALKBACK
		else
		  ifp prunningback
			action APWESRUNBACK
		else
		  ifp pjumping
			action APWESJUMPING
		else
		  ifp pducking
			action APWESDUCKING
	  }

	  else
		ifaction APWESWALKBACK
	  {
		ifp pstanding
		  action APWESSTAND
		else
		  ifp pwalking
			action APWESWALK
		else
		  ifp prunning
			action APWESRUN
		else
		  ifp prunningback
			action APWESRUNBACK
		else
		  ifp pjumping
			action APWESJUMPING
		else
		  ifp pducking
			action APWESDUCKING
	  }

	  else
		ifaction APWESRUNBACK
	  {
		ifp pstanding
		  action APWESSTAND
		else
		  ifp pwalking
			action APWESWALK
		else
		  ifp prunning
			action APWESRUN
		else
		  ifp pwalkingback
			action APWESWALKBACK
		else
		  ifp pjumping
			action APWESJUMPING
		else
		  ifp pducking
			action APWESDUCKING
	  }
  }
  else
  ife pchar 1
  {
	  ifp pfalling
		action APSHELLYFALLING
	  else
		ifaction APSHELLYSTAND
		  state check_pstandard
	  else
		ifaction APSHELLYKICKING
	  {
		ifactioncount 2
		  action APSHELLYSTAND
		getp[].poszv oposzv
		break
	  }
	  else
		ifaction APSHELLYWALK
	  {
		ifp pfalling
		  action APSHELLYFALLING
		else
		  ifp pstanding
			action APSHELLYSTAND
		else
		  ifp prunning
			action APSHELLYRUN
		else
		  ifp pwalkingback
			action APSHELLYWALKBACK
		else
		  ifp prunningback
			action APSHELLYRUNBACK
		else
		  ifp pjumping
			action APSHELLYJUMPING
		else
		  ifp pducking
			action APSHELLYDUCKING
	  }
	  else
		ifaction APSHELLYRUN
	  {
		ifp pstanding
		  action APSHELLYSTAND
		else
		  ifp pwalking
			action APSHELLYWALK
		else
		  ifp pwalkingback
			action APSHELLYWALKBACK
		else
		  ifp prunningback
			action APSHELLYRUNBACK
		else
		  ifp pjumping
			action APSHELLYJUMPING
		else
		  ifp pducking
			action APSHELLYDUCKING
	  }

	  else
		ifaction APSHELLYWALKBACK
	  {
		ifp pstanding
		  action APSHELLYSTAND
		else
		  ifp pwalking
			action APSHELLYWALK
		else
		  ifp prunning
			action APSHELLYRUN
		else
		  ifp prunningback
			action APSHELLYRUNBACK
		else
		  ifp pjumping
			action APSHELLYJUMPING
		else
		  ifp pducking
			action APSHELLYDUCKING
	  }

	  else
		ifaction APSHELLYRUNBACK
	  {
		ifp pstanding
		  action APSHELLYSTAND
		else
		  ifp pwalking
			action APSHELLYWALK
		else
		  ifp prunning
			action APSHELLYRUN
		else
		  ifp pwalkingback
			action APSHELLYWALKBACK
		else
		  ifp pjumping
			action APSHELLYJUMPING
		else
		  ifp pducking
			action APSHELLYDUCKING
	  }
  }
  else
  ifvarand altcostume 2
  {
	  ifp pfalling
		action ALTDUKEFALLING
	  else
		ifaction ALTDUKESTAND
		  state check_pstandard
	  else
		ifaction ALTDUKEKICKING
	  {
		ifactioncount 2
		  action ALTDUKESTAND
		  
		getp[].poszv oposzv
		break
	  }
	  else
		ifaction ALTDUKEWALK
	  {
		ifp pfalling
		  action ALTDUKEFALLING
		else
		  ifp pstanding
			action ALTDUKESTAND
		else
		  ifp prunning
			action ALTDUKERUN
		else
		  ifp pwalkingback
			action ALTDUKEWALKBACK
		else
		  ifp prunningback
			action ALTDUKERUNBACK
		else
		  ifp pjumping
			action ALTDUKEJUMPING
		else
		  ifp pducking
			action ALTDUKEDUCKING
	  }
	  else
		ifaction ALTDUKERUN
	  {
		ifp pstanding
		  action ALTDUKESTAND
		else
		  ifp pwalking
			action ALTDUKEWALK
		else
		  ifp pwalkingback
			action ALTDUKEWALKBACK
		else
		  ifp prunningback
			action ALTDUKERUNBACK
		else
		  ifp pjumping
			action ALTDUKEJUMPING
		else
		  ifp pducking
			action ALTDUKEDUCKING
	  }

	  else
		ifaction ALTDUKEWALKBACK
	  {
		ifp pstanding
		  action ALTDUKESTAND
		else
		  ifp pwalking
			action ALTDUKEWALK
		else
		  ifp prunning
			action ALTDUKERUN
		else
		  ifp prunningback
			action ALTDUKERUNBACK
		else
		  ifp pjumping
			action ALTDUKEJUMPING
		else
		  ifp pducking
			action ALTDUKEDUCKING
	  }

	  else
		ifaction ALTDUKERUNBACK
	  {
		ifp pstanding
		  action ALTDUKESTAND
		else
		  ifp pwalking
			action ALTDUKEWALK
		else
		  ifp prunning
			action ALTDUKERUN
		else
		  ifp pwalkingback
			action ALTDUKEWALKBACK
		else
		  ifp pjumping
			action ALTDUKEJUMPING
		else
		  ifp pducking
			action ALTDUKEDUCKING
	  }
  }
  else
  {
	  ifp pfalling
		action PFALLING
	  else
		ifaction PSTAND
		  state check_pstandard
	  else
		ifaction PAKICKING
	  {
		ifactioncount 2
		  action PSTAND
		
		getp[].poszv oposzv
		break
	  }
	  else
		ifaction PWALK
	  {
		ifp pfalling
		  action PFALLING
		else
		  ifp pstanding
			action PSTAND
		else
		  ifp prunning
			action PRUN
		else
		  ifp pwalkingback
			action PWALKBACK
		else
		  ifp prunningback
			action PRUNBACK
		else
		  ifp pjumping
			action PJUMPING
		else
		  ifp pducking
			action PDUCKING
	  }
	  else
		ifaction PRUN
	  {
		ifp pstanding
		  action PSTAND
		else
		  ifp pwalking
			action PWALK
		else
		  ifp pwalkingback
			action PWALKBACK
		else
		  ifp prunningback
			action PRUNBACK
		else
		  ifp pjumping
			action PJUMPING
		else
		  ifp pducking
			action PDUCKING
	  }

	  else
		ifaction PWALKBACK
	  {
		ifp pstanding
		  action PSTAND
		else
		  ifp pwalking
			action PWALK
		else
		  ifp prunning
			action PRUN
		else
		  ifp prunningback
			action PRUNBACK
		else
		  ifp pjumping
			action PJUMPING
		else
		  ifp pducking
			action PDUCKING
	  }

	  else
		ifaction PRUNBACK
	  {
		ifp pstanding
		  action PSTAND
		else
		  ifp pwalking
			action PWALK
		else
		  ifp prunning
			action PRUN
		else
		  ifp pwalkingback
			action PWALKBACK
		else
		  ifp pjumping
			action PJUMPING
		else
		  ifp pducking
			action PDUCKING
	  }
  }
  ife attmode YES
  ifn attmusic -1
	{
		ife userdef[].music_episode 0
		ife userdef[].music_level attmusic
		nullop
		else starttrackslot 0 attmusic
	}
	getp[].poszv oposzv
enda

appendevent EVENT_FIRE

ife startmode -1 { set RETURN -1 break }
ifn vendor_screen 0 { set RETURN -1 break }
ifvarn transition 0 { setvar RETURN -1 break }
ifvare PLAYERONTHEBIKE 1 { setvar RETURN -1 break }
ifn heldobject -1 { set RETURN -1 break }
ife pchar 4 ifn deaonwall -1 { set RETURN -1 break }

ifn zoomcount 0 ifl zoomcount 7 { set RETURN -1 break }

ife player[].curr_weapon KNEE_WEAPON
{
	ifn gotsaber 0
		state startsaber
	else ife gotsaw NO ifn qk_proxy 0 { set RETURN -1 break }
}

ifvare player[].curr_weapon PISTOL_WEAPON 
{
	ifg LASERFIRE 0 { set RETURN -1 break }
	
	ifg LASERAMMO 0 
	ife LASERMODE YES
	{
		set LASERFIRE 1 
		set RETURN -1 
		break
	}
	
	ife pchar 3 
	{
		ifn wristready 0
		ife LASERMODE 0 { set RETURN -1 break }
		
		ife wristmode 0
		ife LASERMODE 0
		ifl player[].ammo_amount PISTOL_WEAPON 2 { set RETURN -1 break }
		
		ife wristmode 1 ifl wristammo 1 { set RETURN -1 break }
	}
	
	
	
	ifg COMMAMMO 0
	ife LASERMODE 3
	{
		set LASERFIRE 1 
		set RETURN -1 
		break
	}
	
}

ife player[].curr_weapon SHOTGUN_WEAPON
{
	switch pchar
	case 0
	case 3
	case 4
		ifvarand gotDB 2
		{
			ife pchar 0 
			ifl dbammo 2 set RETURN -1
			ifge pchar 3
			ifl dbammo 1 set RETURN -1
		} 
		else ifl player[].ammo_amount SHOTGUN_WEAPON 2 set RETURN -1
	break
	
	case 1
	case 2
		ifvarand gotbow 2 { ifl arrows 1 set RETURN -1 }
		else
		ifl player[].ammo_amount SHOTGUN_WEAPON 2 set RETURN -1
	break
	endswitch
	
	ife RETURN -1 break
}

ife player[].curr_weapon CHAINGUN_WEAPON
{
	ifvarand gotshock 2
	set RETURN -1
	else ifl overheat 0
	set RETURN -1
}

endevent

appendevent EVENT_QUICKKICK

ifp ponground nullop else
ife jumpkick 0
// ifvarand bits 4194304
ifvarand extbits 1 
ifp palive 
ifn sector[].lotag 2
ife saberdash 0
ife qk_proxy 0
{
	set jumpkick 1
	setp[].quick_kick 0
	set RETURN -1
}

ifg jumpkick 0 { set RETURN -1 break }
ifn slidekick 0 { set RETURN -1 break }
ifg sidekick 0 { set RETURN -1 break }
ifl sidekick -3 { set RETURN -1 break }

// check for initiating SIDEKICK **NOT SLIDEKICK**

set temp NO

ifp palive ifp ponground
ife player[].knee_incs 0
ife qk_proxy 0
ife slidekick 0
ife sidekick 0
ife jumpkick 0
ife saberdash 0
ife pdown NO
ifl PLAYERONTHEBIKE 1
ife deaonwall -1
{
	ifvarand extbits 1 // pressing forward
	set temp YES
	else
	ifvarand extbits 2 // pressing backward
	set temp YES
	
	ifn player[].kickback_pic 0
	ife temp YES
	{
		switch player[].curr_weapon
		case KNEE_WEAPON ife WEAPON0_SHOOTS KNEE set temp NO break
		case PISTOL_WEAPON ifl player[].kickback_pic 3 set temp NO break
		case SHOTGUN_WEAPON ifl player[].kickback_pic 5 set temp NO break
		case CHAINGUN_WEAPON ifl player[].kickback_pic 4 set temp NO else setp[].kickback_pic 0 break
		case RPG_WEAPON ifl player[].kickback_pic 5 set temp NO break
		// case HANDBOMB_WEAPON ifl player[].kickback_pic 7 set temp NO break
		case SHRINKER_WEAPON ifl player[].kickback_pic 11 set temp NO break
		case DEVISTATOR_WEAPON ifl player[].kickback_pic 4 set temp NO break
		case TRIPBOMB_WEAPON set temp NO break
		case FREEZE_WEAPON ifl player[].kickback_pic 4 set temp NO break
		case GROW_WEAPON ifl player[].kickback_pic 4 set temp NO else setp[].kickback_pic 0 break
		endswitch
	}
	ife temp YES
	{
		ifvarand extbits 2 { set sidekick 100 getp[].ang kickang set initkickang kickang }
		else
		{
			ifrnd 160 set sidekick 1 else 
			set sidekick 51
		}
		set slidehit NO
		ife player[].curr_weapon KNEE_WEAPON
		ifg gotsaber 0 nullop else
		setp[].weapon_pos -8
		// setp[].weapon_pos -1
		set RETURN -1
		break
	}
}

set RETURN -1
ifg sprite[player[].i].extra 0
ife qk_proxy 0
set qk_proxy 15

/*
ife pchar 1
{
	switch player[].curr_weapon
	case SHRINKER_WEAPON
	case GROW_WEAPON
		set RETURN -1
		ife qk_proxy 0
		set qk_proxy 15
	break
	endswitch
}
ife pchar 0
// ifvarand altcostume 8
{
	set RETURN -1
	ife qk_proxy 0
	set qk_proxy 15
}
*/
endevent

gamevar BULLETSPREADX 46 0
// gamevar BULLETSPREADY 382 0
var VAR1 0 0
var VAR2 0 0


onevent EVENT_GETSHOTRANGE

rand ANGRANGE BULLETSPREADX
add ANGRANGE 2
set VAR1 ANGRANGE
mul VAR1 VAR1
set VAR2 BULLETSPREADX
mul VAR2 VAR2
sub VAR1 VAR2
mul VAR1 -64
sqrt VAR1 VAR2
set ZRANGE VAR2

// ifp pstanding { div ANGRANGE 2 div ZRANGE 2 } else
// ifp pwalking { div ANGRANGE 2 div ZRANGE 2 } else
// ifp pwalkingback { div ANGRANGE 2 div ZRANGE 2 }

ife player[].curr_weapon KNEE_WEAPON
{
	ife gotsaw YES
	ifg sawammo 0
	ifn pchar 2 ifn pchar 4
	{
		mul ANGRANGE 2
		mul ZRANGE 2
	}
	else
	ifg gotsaber 0
	{
		set ANGRANGE 1
		set ZRANGE 1
	}
}

ife player[].curr_weapon PISTOL_WEAPON
{	
	ifn WEAPON1_SHOOTS SHOTSPARK1
	{
		div ANGRANGE 2
		div ZRANGE 2
	}
	else ife pchar 4
	{
		div ANGRANGE 2
		div ZRANGE 2
	}
}

ife pchar 0
ife player[].curr_weapon SHOTGUN_WEAPON
ifvarand gotDB 2
{
	mul ANGRANGE 2
	mul ZRANGE 2
}

ife pchar 2
ife player[].curr_weapon GROW_WEAPON
{
	shiftr ANGRANGE 2
	shiftr ZRANGE 2
}

ife zoomin YES
{
	ife player[].curr_weapon CHAINGUN_WEAPON
	{
		div ANGRANGE 3
		div ZRANGE 3
	}
	ife player[].curr_weapon SHOTGUN_WEAPON
	{
		shiftr ANGRANGE 1
		shiftr ZRANGE 1
	}
}

endevent

onevent EVENT_GETAUTOAIMANGLE

	ifn zoomin NO set AUTOAIMANGLE 0 else
	set AUTOAIMANGLE 24

endevent



appendevent EVENT_CHEATGETJETPACK

	// set LASERAMMO 100
	// setp[].ammo_amount PISTOL_WEAPON LASERAMMO
	// set LASERMODE YES
	// ife pchar 0
	// set pistolammo MAXPISTOLAMMO
	// else
	// set pistolammo MAXDEAGLEAMMO
	
	ife gotsaber NO
	ifn pchar 2 ifn pchar 4
	{
		set gotsaw YES
		set sawammo 300
		state sawon
	}
	set wristammo player[].max_ammo_amount PISTOL_WEAPON
	set stakes 50
	setarray weap_owned[203] YES // Wes dual pistol
	setarray wesupgrades[PISTOL_WEAPON] 4
	setarray weap_owned[221] YES // Wes dual uzi
	setarray wesupgrades[CHAINGUN_WEAPON] 1
	set railgunammo MAXRAILAMOUNT
	ife gotrailgun 0 set gotrailgun 1
	ife gotplasma 0 set gotplasma 1
	set plasmammo MAXFREEZEAMMO
	set weap4ammo MAXRPGAMMO
	set cover_amount 1800
	set credits 99999
	set lastcredits 99999
	set totalcredits 99999
	set arrows 60
	set dbammo 60
	set cloak cloakmax
	set vendor_used 2
	ifn mynaamah -1 seta[mynaamah].extra player[].holoduke_amount

endevent

onevent EVENT_DOFIRE

ifvarand comboperk 1 ife pchar 0 set combotime -10
ifvarand comboperk 2 ife pchar 1 set combotime -10
ifvarand comboperk 4 ife pchar 2 set combotime -10
ifvarand comboperk 8 ife pchar 3 set combotime -10
ifvarand comboperk 16 ife pchar 4 set combotime -10

ifl cloak 0
{
	mul cloak -1
	set switchboost 15
	sound CLOAKOFF
}

ife player[].curr_weapon PISTOL_WEAPON
{
	ifn LASERMODE YES
	{
		ife pchar 0 ifvarand dukeupgrades[PISTOL_WEAPON] 8 nullop else
		ife pchar 1 ifvarand shellyupgrades[PISTOL_WEAPON] 8 nullop else
		ifn pchar 3 ifn pchar 4
		sound PISTOLFIRE3
		
		ife pchar 4 randvar flashang 2047
		
		ife pchar 0 ifvarand dukeupgrades[PISTOL_WEAPON] 1 sound DPCHAINGUN
		
		ife pchar 3 
		{
			
			ife wristmode 1 
			{
				sub wristammo 1 
				set tempb player[].ammo_amount PISTOL_WEAPON
				add tempb 1
				setp[].ammo_amount PISTOL_WEAPON tempb
			}
		} else sub THISCLIP 1
		ife pistolammo 1 set pistolammo 0
		ifvarand shellyupgrades[PISTOL_WEAPON] 8 nullop else
		ife pchar 1
		{
			getp[].ammo_amount PISTOL_WEAPON temp
			sub temp 1 ifl temp 1 set temp 1 
			setp[].ammo_amount PISTOL_WEAPON temp
		}
		ife player[].ammo_amount PISTOL_WEAPON 1
		ifg LASERAMMO 0
		{
			setp[].weapon_pos -1
			set LASERMODE -1
			set WEAPON1_SELECTSOUND SWITCHTOLASER 
		}
	}
}

ife player[].curr_weapon SHOTGUN_WEAPON
{
	set temp NO
	ife pchar 3 ifvarand gotDB 2 set temp YES
	ife pchar 4 ifvarand gotDB 2 set temp YES
	ife pchar 0 
	{
		ife shotexpduke YES set temp YES
		ifvarand gotDB 2 set temp YES
	}
	ife pchar 1 
	{
		ife shotexpshelly YES set temp YES
		ifvarand shellyupgrades[SHOTGUN_WEAPON] 4 // using bow
		ifvarand gotbow 2 set temp NO
	}
	ife pchar 2
	{
		ife stakefire YES
		{
			getp[].ammo_amount SHOTGUN_WEAPON B
			add B 1
			setp[].ammo_amount SHOTGUN_WEAPON B
		}
		else
		{
			ifvarand wesupgrades[SHOTGUN_WEAPON] 4 // using bow
			ifvarand gotbow 2 set temp NO
		}
	}
	ife temp YES
	{
		getp[].ammo_amount SHOTGUN_WEAPON temp
		
		ifn pchar 1 ifn pchar 2 ifvarand gotDB 2 
		{
			ife pchar 0
			{
			ife shotexpduke YES sub dbammo 2
			sub dbammo 2
			}
			else ife pchar 3
			sub dbammo 1
			else ife pchar 4
			sub dbammo 2
			
			ifl dbammo 0 set dbammo 0
			
			add temp 1
			setp[].ammo_amount SHOTGUN_WEAPON temp
			break
		}
		sub temp 1
		ifl temp 1 set temp 1
		setp[].ammo_amount SHOTGUN_WEAPON temp
	}
	ifge pchar 1 ifle pchar 2
	// ifvarand shellyupgrades[SHOTGUN_WEAPON] 4 // using bow
	ifvarand gotbow 2
	{
		// 0 = regular uses 1 ammo
		// 1 = burning; 4 = freeze; 5 = spy; 6 = electric; 8 = nuclear use 2 ammo
		// 2 = explosive; 3 = multi; use 3 ammo
		// 7 = blood; 0 = regular use 1 ammo
		// getp[].ammo_amount SHOTGUN_WEAPON temp
		
		switch arrowtype
		case 1 case 4 case 5 case 6
		case 8
			sub arrows 2
		break
		case 2 case 3
			sub arrows 3
		break
		default
			ife pchar 2 sub arrows 2 else
			sub arrows 1
		break
		endswitch
		ifl arrows 0 set arrows 0
		
		getp[].ammo_amount SHOTGUN_WEAPON temp
		add temp 1
		setp[].ammo_amount SHOTGUN_WEAPON temp
	}
}

ife player[].curr_weapon RPG_WEAPON
ifn nukeselect YES
{
	ife pchar 4
	{
		ife WEAPON4_SHOOTS SMARTBOMB
		{
			getp[].ammo_amount RPG_WEAPON temp
			sub temp 4, ifl temp 1 set temp 1
			setp[].ammo_amount RPG_WEAPON temp
		}
		else ife burstfired 0 set burstfired 3
	}	
		
	ife pchar 3
	{
		set loadrox 3
		randvar flashang 2047
	}
	else
	ife pchar 2
	ife zoomin NO
	{
		getp[].ammo_amount RPG_WEAPON temp
		sub temp 4, ifl temp 1 set temp 1
		setp[].ammo_amount RPG_WEAPON temp
	}
}


ife player[].curr_weapon SHRINKER_WEAPON
{
	getp[].ammo_amount SHRINKER_WEAPON temp
	ifn pchar 2
	{
		// ife pchar 3 ifvarand mandoupgrades[SHRINKER_WEAPON]1 1
		// {
			// sub temp 4 
			// ifvarand mandoupgrades[SHRINKER_WEAPON] 2 ife bmfgaltfire YES 
			// {
				// setprojectile[BMFGPROJ].pal 22
				// setprojectile[BMFGPROJ].hitradius 0
			// }
		// }
		// else
		// ife pchar 1 ifvarand shellyupgrades[SHRINKER_WEAPON] 1 
		// {
			// sub temp 4 
			// ifvarand shellyupgrades[SHRINKER_WEAPON] 2 ife bmfgaltfire YES 
			// {
				// setprojectile[BMFGPROJ].pal 22
				// setprojectile[BMFGPROJ].hitradius 0
			// }
		// }
		// else
		// ife pchar 0 
		ife pchar 4
		ifvarand novaupgrades[SHRINKER_WEAPON] 2
			sub temp 1
		else
		ifvarand dukeupgrades[SHRINKER_WEAPON] 1 
		{
			sub temp 4
			ifvarand dukeupgrades[SHRINKER_WEAPON] 2 ife bmfgaltfire YES
			{
				setprojectile[BMFGPROJ].pal 22
				setprojectile[BMFGPROJ].hitradius 0
			}
		}
		
	}
	
	ifl temp 1 set temp 1
	setp[].ammo_amount SHRINKER_WEAPON temp
	ife pchar 2
	ife WEAPON6_SHOOTS BLOODBULLET
	{
		eshoot BLOODBULLET
		getp[].ang angvar
		sub angvar 32
		seta[RETURN].ang angvar
		eshoot BLOODBULLET
		getp[].ang angvar
		add angvar 32
		seta[RETURN].ang angvar
		set RETURN 0
	}
}

ife player[].curr_weapon DEVISTATOR_WEAPON
{
	ifvarand gotrailgun 2 nullop else
	ife pchar 1
	{
		ifvarand shellyupgrades[DEVISTATOR_WEAPON] 1 
		{
			getp[].ammo_amount DEVISTATOR_WEAPON temp
			add temp 1 
			setp[].ammo_amount DEVISTATOR_WEAPON temp 
		}
		else
		{
			getp[].ammo_amount DEVISTATOR_WEAPON temp
			sub temp 1 ifl temp 1 set temp 1 
			setp[].ammo_amount DEVISTATOR_WEAPON temp
		}
	}
	else
	ife pchar 2
	{
		getp[].ammo_amount DEVISTATOR_WEAPON temp
		sub temp 1
		ifl temp 1 set temp 1 
		setp[].ammo_amount DEVISTATOR_WEAPON temp
	}
	else
	// ife pchar 3
	ifge pchar 3
	ifvarand mandoupgrades[DEVISTATOR_WEAPON] 2
	{
		getp[].posz savz
		sub savz 4096
		setp[].posz savz
		shoot BLASTBALL
		shoot BLASTBALL
		add savz 4096
		setp[].posz savz
	}
}

ife player[].curr_weapon GROW_WEAPON
{
	ife WEAPON11_SHOOTS LOVEBOMB
	{
		getp[].ammo_amount GROW_WEAPON temp
		sub temp 14
		ifl temp 1 set temp 1
		setp[].ammo_amount GROW_WEAPON temp
	}
	else
	ife WEAPON11_SHOOTS PLASDISKPROJ
	{
		getp[].ammo_amount GROW_WEAPON temp
		sub temp 4
		ifl temp 1 set temp 1
		setp[].ammo_amount GROW_WEAPON temp
	}
}

ifvarand gotshock 2 nullop else
ife player[].curr_weapon CHAINGUN_WEAPON
{
	ife pchar 4
	{
		stopactorsound THISACTOR WEAPON3_FIRESOUND
		espawn SOUNDPLATE
		setav[RETURN].SPRITELOTAG WEAPON3_FIRESOUND
		setav[RETURN].mtype 1
		set RETURN 0
	}
	ife pchar 2
	{
		sub uziclip 1
		ifvarand wesupgrades[CHAINGUN_WEAPON] 2 sound DPCHAINGUN
		ifvarand wesupgrades[CHAINGUN_WEAPON] 1
		{
			espawn SHELL
			set angvar sprite[RETURN].ang
			add angvar 1024
			seta[RETURN].ang angvar
			set xvel sprite[RETURN].xvel
			mul xvel -1
			seta[RETURN].xvel xvel
			set RETURN 0
		}
	}
	ifn pchar 0 ifn pchar 2
	ifn pchar 4
	{
		sub m4clip 1
		ife pchar 3 
		{
			ifvarand mandoupgrades[CHAINGUN_WEAPON] 2 sound DPCHAINGUN
			ifvarand mandoupgrades[CHAINGUN_WEAPON] 1
			{
				espawn SHELL
				set angvar sprite[RETURN].ang
				add angvar 1024
				seta[RETURN].ang angvar
				set xvel sprite[RETURN].xvel
				mul xvel -1
				seta[RETURN].xvel xvel
				set RETURN 0
			}
		}
		else
		{
			ifvarand shellyupgrades[CHAINGUN_WEAPON] 1 sound M4FIRE
			ifvarand shellyupgrades[CHAINGUN_WEAPON] 2 sound DPCHAINGUN
		}
	}
	ife pchar 0 
	{
		ifvarand dukeupgrades[CHAINGUN_WEAPON] 2 sound DPCHAINGUN
		ifvarand dukeupgrades[CHAINGUN_WEAPON] 1
		{
			set temp NO
			ife player[].kickback_pic 5 set temp YES
			ife player[].kickback_pic 9 set temp YES
			ife temp YES
			{
				getp[].ammo_amount CHAINGUN_WEAPON B
				add B 1
				setp[].ammo_amount CHAINGUN_WEAPON B
			}
		}
	}
	
}

ife pchar 2
{
	ife player[].curr_weapon GROW_WEAPON
	{
		ife WEAPON11_SHOOTS GRENADEPROJ // WESGRENADE
		{
			getp[].ammo_amount GROW_WEAPON B
			sub B 4, ifl B 1 set B 1
			setp[].ammo_amount GROW_WEAPON B
		}
		else
		sub skarclip 1
	}
	
	ife player[].curr_weapon SHRINKER_WEAPON
	{
		ife WEAPON6_SHOOTS BLOODBOMB
		{
			getp[].ammo_amount SHRINKER_WEAPON B
			sub B 7, ifl B 1 set B 1
			setp[].ammo_amount SHRINKER_WEAPON B
		}
		else
		sub skarclipB 1
	}
	
	ifvarand gotplasma 2 nullop else
	ife player[].curr_weapon FREEZE_WEAPON
	{
		getp[].ammo_amount FREEZE_WEAPON B
		sub B 1, ifl B 1 set B 1
		setp[].ammo_amount FREEZE_WEAPON B
	}
}

ifvarand gotplasma 2 nullop else
ife player[].curr_weapon FREEZE_WEAPON
{
	ife pchar 2
	{
		ifg sawspeed 26 setprojectile[BLADEPROJ].extra 60 else setprojectile[BLADEPROJ].extra 40
	}
	else
	ife pchar 3
	{
		getp[].ammo_amount FREEZE_WEAPON temp
		sub temp 3, ifl temp 1 set temp 1
		setp[].ammo_amount FREEZE_WEAPON temp
	}
	else
	ife pchar 4 
	{
		randvar flashang 2047
		getp[].ammo_amount FREEZE_WEAPON temp
		sub temp 1, ifl temp 1 set temp 1
		setp[].ammo_amount FREEZE_WEAPON temp
		ifg gooclip 0 sub gooclip 1
	}
}


ifvarand gotbow 2 nullop else
ifn pchar 0 ifn pchar 3
ife player[].curr_weapon SHOTGUN_WEAPON
{
	ife pchar 1 ifvarand shellyupgrades[SHOTGUN_WEAPON] 128
	sub spasclip 1
	else
	ife pchar 2 ifvarand wesupgrades[SHOTGUN_WEAPON] 128
	sub spasclip 1
	else
	ife pchar 4
	sub novamag 1
	
}
endevent

appendevent EVENT_INCURDAMAGE

ifg player[].extra_extra8 0
ife sector[player[].cursectnum].lotag 2
ife player[].airleft 0
ife sprite[player[].i].htextra -1
{
	getp[].extra_extra8 temp
	shiftr temp 8
	add o2damage temp
}

endevent

onevent EVENT_CHECKTOUCHDAMAGE

ifge RETURN 49152 // sprite collision
{
	sub RETURN 49152
	
	ife pchar 3
	ifge jumpjet 35
	{
		seta[RETURN].htpicnum RPG
		seta[RETURN].htowner player[].i
		seta[RETURN].htang player[].ang
		seta[RETURN].htextra 200
		// setp[].over_shoulder_on NO
		ifg sprite[RETURN].extra 200
		set jumpjet -30
		// add sound and also add wall collision code
		break
	}
	switch sprite[RETURN].picnum
	case LASERWALL
		ife actorvar[RETURN].countvar 0
			setav[RETURN].countvar 1
	break
	case LIZMANGUARD
	case LIZRANGERGUARD
	case SPACEBULLGUARD
	case NEWTROOPGUARD
		ife sprite[RETURN].htextra -1
		seta[RETURN].htextra 1
	break
	endswitch
	
	add RETURN 49152
}

endevent

appendevent EVENT_RESETINVENTORY

	set LASERAMMO 0
	set pistolammo 0
	set wristammo 0
	set LASERMODE NO
	set gotsaber 0
	// set gotsaw NO
	// set sawammo 0
	// state sawoff
	ife gameover YES
	{
		setuserdef[].display_bonus_screen 0 // resetplayer
		al gameover
		// set gameover NO
		ife challenge YES
		ife attmode YES
			state writehighscores
		else
		endofgame 2
		
	}
	

endevent

appendevent EVENT_RESETPLAYER

	ifn secretexit YES
	{
		state resetplayeramounts
		ifn startguns_perma 0
		{
			ife startguns -1 set startguns 0
			orvarvar startguns startguns_perma
		}
		ifn startguns -1
		{
			ife gametype 0 ifn attmode 1
			{
				set temp YES
				ife VOLUME 4
				{
					ife LEVEL 1 set temp NO
					ifge LEVEL 10 ifle LEVEL 12 { set temp NO strength 100 setp[].last_extra 100 setp[].boot_amount 200 }
					else ifg LEVEL 13 orvar startguns_perma 1
				}
				ife temp YES ife startguns_perma 0 set startguns -1
			}
			ifn startguns -1 state applystartguns
		}
	}
	set secretexit NO
	
	// player has died in a match
	ife VOLUME 6 ifg LEVEL 10 ifl LEVEL 38
	{
		// must set wave first to prevent some bad stuff
		ife LEVEL 13 
			set wave 1
				
		ife LEVEL 16 
			set wave 7
			
		ife LEVEL 18
			set wave 11
			
		ife LEVEL 21
			set wave 16
			
		ife LEVEL 25
			set wave 20
			
		ife LEVEL 26
			set wave 21
			
		ife LEVEL 37
			set gametype 0
		
		state wavesettings
		set survivor_winner NO
		setp[].timebeforeexit 0
	}

endevent

onevent EVENT_PROCESSINPUT

getinput[].bits bits
getinput[].extbits extbits

ifp pducking nullop else // to prevent slidekick from crouch
ifvarand extbits 1 { add forwinput 2 set backinput 0 }
ifvarand extbits 2 { add backinput 2 set forwinput 0 }
ifg forwinput 20 set forwinput 20
ifg backinput 20 set backinput 20

ifvarand bits 536870912 { ifl holdinteract 0 set holdinteract 0 add holdinteract 1 } else 
{
	ifg holdinteract 0 set holdinteract -1
	else ifl holdinteract 0
	{
		sub holdinteract 1
		ifl holdinteract -5
		set holdinteract 0
	}
}

set tempb bits
set xydist scandist
abs xydist
ifl xydist 1561
{
	ifn scannedsprite -1
	{
		switch sprite[scannedsprite].picnum
		case DIPSWITCH case 163
		case DIPSWITCH2 case 165
		case DIPSWITCH3 case 169
		// case HANDSWITCH case 1112
		// case ALIENSWITCH case 1143
		ifvarand bits 536870912 // player pressing space
		{
			xorvar bits 536870912
			setinput[].bits bits
			ifvarand lastinput 536870912 set shootswitch 0 else
			set shootswitch 1
		}
		break
		endswitch
	}
}
set lastinput tempb

ifn player[].movement_lock 0
{
	setinput[].fvel 0
	setinput[].svel 0
}

ifvarand inven_upgrades 8 // ifg player[].boot_amount 0
ife disable_doubletap NO
{
	ifg ltap 0 sub ltap 1
	ifg rtap 0 sub rtap 1
	ifg ftap 0 sub ftap 1
	ifg btap 0 sub btap 1
	
	ife dashing 0
	ife saberdash 0
	ife slidekick 0
	ife sidekick 0
	ife padmove 0
	ife cutcam -1
	ife thiscam -1
	ife movecam -1
	ifp palive
	ifn player[].i redcarrier
	ife player[].movement_lock 0
	{
		// extbits:
		// 1 forward, 2 back, 4 strafe L, 8 strafe R
		getp[].ang dashang
		ifvarand extbits 4 
		{
			sub dashang 512
			ifvarand oldextbits 4 nullop else 
			{
				ifg ltap 0 ifl ltap 6 set dashing 3
				set ltap 6
			}
		}
		
		ifvarand extbits 8 
		{
			add dashang 512
			ifvarand oldextbits 8 nullop else
			{
				ifg rtap 0 ifl rtap 6 set dashing 3
				set rtap 6
			}
		}
		
		ifvarand extbits 2 
		{
			add dashang 1024
			ifvarand oldextbits 2 nullop else 
			{
				ifg btap 0 ifl btap 6 set dashing 3
				set btap 6
			}
		}
		
		ifvarand extbits 1
		{
			ifvarand oldextbits 1 nullop else 
			{
				ifg ftap 0 ifl ftap 6 set dashing 3
				set ftap 6
			}
		}

		
		ife dashing 3
		{
			// getp[].boot_amount temp, sub temp 1, setp[].boot_amount temp
			screensound DASHSOUND
		}
		
	
	}
}

endevent

onevent EVENT_PREUPDATEANGLES

ife zoomin YES
{
	getinput[].q16avel temp
	shiftr temp 1
	setinput[].q16avel temp
	
	getinput[].q16horz temp
	shiftr temp 1
	setinput[].q16horz temp
}

ifn deaonwall -1
{
	// deawallang
	getinput[].q16avel temp
	ifn temp 0
	{
		shiftr temp 14 
		getp[].look_ang tempb
		add tempb temp
		clamp tempb -512 512
		setp[].look_ang tempb
		set last_look_ang tempb
		set look_ang_wait 30
	}
}

endevent

appendevent EVENT_JUMP

ifn deaonwall -1 { setvar RETURN -1 break }
ifvarn transition 0 { setvar RETURN -1 break }
ifn cutcam -1 { setvar RETURN -1 break }

endevent

appendevent EVENT_WEAPKEY2
ifp palive
ife player[].weapon_pos 0
{
	ife player[].curr_weapon PISTOL_WEAPON
	{
		ife LASERMODE 1 // CURRENTLY USING LASER PISTOL
		{
			ife LASERFIRE 0
			{
				ifg COMMAMMO 0
				{
					set LASERMODE -4 // transferring to comm gun
					setp[].weapon_pos -1
					set gun_name LASERPISTOL
					ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
				}
				else
				// ifg LASERAMMO 0
				ifg pistolammo 0 
				{
					set LASERMODE 2 // transferring to regular pistol
					setp[].weapon_pos -1
					// set WEAPON1_SELECTSOUND INSERT_CLIP
					set gun_name FIRSTGUNSPRITE
					ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
				}
			}
		}
		else
		ife LASERMODE NO
		{
			ife player[].kickback_pic 0
			{
				// ife pchar 2
				// {
					// ife weap_owned[203] YES // Wes dual pistol
					// {
						// set B wesupgrades[PISTOL_WEAPON]
						// ifvarand B 4 xorvar B 4 else orvar B 4
						// setarray wesupgrades[PISTOL_WEAPON] B
					// }
				// }
				// else
				// {
					ifg LASERAMMO 0
					{
						set LASERMODE -1 // transferring to laser pistol
						setp[].weapon_pos -1
						set WEAPON1_SELECTSOUND SWITCHTOLASER 
						set gun_name LASERPISTOL
						ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
					}
					else
					ifg COMMAMMO 0
					{
						set LASERMODE -2 // transferring to COMM gun
						setp[].weapon_pos -1
						set WEAPON1_SELECTSOUND SELECT7 
						set gun_name LASERPISTOL
						ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
					}
				// }
			}
		}
		else
		ife LASERMODE 3 // comm gun
		{
			ifg pistolammo 0 
			{
				set LASERMODE 4 // transferring to regular pistol
				setp[].weapon_pos -1
				// set WEAPON1_SELECTSOUND INSERT_CLIP
				set gun_name FIRSTGUNSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
			else
			ifg LASERAMMO 0
			{
				set LASERMODE -1 // transferring to laser pistol
				setp[].weapon_pos -1
				set WEAPON1_SELECTSOUND SWITCHTOLASER 
				set gun_name LASERPISTOL
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
	else
	{
		ife pistolammo 0
		ife player[].kickback_pic 0
		{
			ifg LASERAMMO 0
			{
				set LASERMODE -1 // transferring to laser pistol
				setp[].weapon_pos -1
				set WEAPON1_SELECTSOUND SWITCHTOLASER 
				set gun_name LASERPISTOL
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
			else
			ifg COMMAMMO 0
			{
				set LASERMODE -2 // transferring to COMM gun
				setp[].weapon_pos -1
				set WEAPON1_SELECTSOUND SELECT7 
				set gun_name LASERPISTOL
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
}
endevent

appendevent EVENT_WEAPKEY3

ifge pchar 1 ifle pchar 2
ife player[].weapon_pos 0
ife player[].curr_weapon SHOTGUN_WEAPON
ifp palive
{
	ifvarand gotbow 1 ife player[].gotweapon SHOTGUN_WEAPON YES 
	{
		ife player[].curr_weapon SHOTGUN_WEAPON
		ife player[].kickback_pic 0
		ife player[].weapon_pos 0
		{
			setp[].weapon_pos -1
			ifvarand gotbow 2 
			{
				orvar gotbow 8 // shotgun
				set gun_name SHOTGUNSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
			else 
			{
				orvar gotbow 4 // switching to bow
				set gun_name BOWSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
	
}

set temp NO
ife pchar 0 set temp YES
ife pchar 3 set temp YES
ife pchar 4 set temp YES

ife temp YES
ife player[].weapon_pos 0
ife player[].curr_weapon SHOTGUN_WEAPON
ifp palive
{
	ifvarand gotDB 1 ife player[].gotweapon SHOTGUN_WEAPON YES 
	{
		ife player[].curr_weapon SHOTGUN_WEAPON
		ife player[].kickback_pic 0
		ife player[].weapon_pos 0
		{
			setp[].weapon_pos -1
			ifvarand gotDB 2 
			{
				orvar gotDB 8 // switching to regular shotgun
				set gun_name SHOTGUNSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
			else 
			{
				orvar gotDB 4 // switching to DB shotgun
				set gun_name DBSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
	
}
endevent

appendevent EVENT_WEAPKEY4

// set temp NO
ifvarand gotshock 1
ifvarand dukeupgrades[CHAINGUN_WEAPON] 8
// ife pchar 0 set temp YES

// ifvarand gotshock 1
// ifvarand shellyupgrades[CHAINGUN_WEAPON] 8
// ife pchar 1 set temp YES

// ifvarand gotshock 1
// ifvarand wesupgrades[CHAINGUN_WEAPON] 8
// ife pchar 2 set temp YES

// ifvarand gotshock 1
// ifvarand mandoupgrades[CHAINGUN_WEAPON] 8
// ife pchar 3 set temp YES

// ifvarand gotshock 1
// ifvarand novaupgrades[CHAINGUN_WEAPON] 8
// ife pchar 4 set temp YES

// ife temp YES
ife player[].weapon_pos 0
ife player[].curr_weapon CHAINGUN_WEAPON
ifp palive
{
	ife player[].gotweapon CHAINGUN_WEAPON YES 
	{
		ife player[].curr_weapon CHAINGUN_WEAPON
		ife player[].kickback_pic 0
		ife player[].weapon_pos 0
		{
			setp[].weapon_pos -1
			ifvarand gotshock 2 
			{
				orvar gotshock 8 // switching to CHAINGUN
				set gun_name CHAINGUNSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
			else 
			{
				orvar gotshock 4 // switching to executioner
				set gun_name CHAINGUNSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
	
}

ife pchar 2
ife player[].weapon_pos 0
ife player[].curr_weapon CHAINGUN_WEAPON
ife player[].kickback_pic 0
ifp palive
	ife weap_owned[221] YES // Wes dual uzi
	{
		set B wesupgrades[CHAINGUN_WEAPON]
		ifvarand B 1 xorvar B 1 else orvar B 1
		setarray wesupgrades[CHAINGUN_WEAPON] B
		state wesweapons
	}

endevent

appendevent EVENT_WEAPKEY5

ifg nukeamount 0 ife player[].gotweapon RPG_WEAPON YES 
{
	ife player[].curr_weapon RPG_WEAPON
	ife player[].kickback_pic 0
	ife player[].weapon_pos 0
	{
		setp[].weapon_pos -1
		ife nukeselect YES 
		{
			set nukeselect -2 // switching to regular RPG 
			set gun_name RPGSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
		else 
		{
			set nukeselect -1 // switching to NUKE
			set gun_name NUKESPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
	}
}

endevent


appendevent EVENT_WEAPKEY7

ife player[].curr_weapon SHRINKER_WEAPON
ife player[].gotweapon GROW_WEAPON YES
ife player[].weapon_pos 0
{
	set gun_name GROWSPRITEICON
	ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
	break
} 


ife player[].curr_weapon GROW_WEAPON
ife player[].gotweapon SHRINKER_WEAPON YES
ife player[].weapon_pos 0
{
	set gun_name SHRINKERSPRITE
	ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
	break
}

endevent

appendevent EVENT_WEAPKEY8

ifvarand gotrailgun 1 ife player[].gotweapon DEVISTATOR_WEAPON YES 
{
	ife player[].curr_weapon DEVISTATOR_WEAPON
	ife player[].kickback_pic 0
	ife player[].weapon_pos 0
	{
		setp[].weapon_pos -1
		ifvarand gotrailgun 2 
		{
			orvar gotrailgun 8 // switching to devistator 
			set gun_name DEVISTATORSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
		else 
		{
			orvar gotrailgun 4 // switching to railgun
			set gun_name RAILGUNSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
	}
}

endevent

appendevent EVENT_WEAPKEY10

ife player[].weapon_pos 0
ife player[].curr_weapon FREEZE_WEAPON
ifp palive
{
	ifvarand gotplasma 1 ife player[].gotweapon FREEZE_WEAPON YES 
	{
		ife player[].curr_weapon FREEZE_WEAPON
		ife player[].kickback_pic 0
		ife player[].weapon_pos 0
		{
			setp[].weapon_pos -1
			ifvarand gotplasma 2 
			{
				orvar gotplasma 8 // switching to freezer or incinerator 
				set gun_name FREEZESPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
			else 
			{
				orvar gotplasma 4 // switching to plasma
				set gun_name PLASMASPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
	
}
endevent

definegamefuncname 39 ZOOM_OUT_MAP
definegamefuncname 40 ZOOM_IN_MAP

definegamefuncname 42 DASH
onevent EVENT_HOLSTER // used for dash
	set RETURN -1
	
	ifvarand inven_upgrades 8 // ifg player[].boot_amount 0
	{
		ife dashing 0
		ife saberdash 0
		ife slidekick 0
		ife sidekick 0
		ife padmove 0
		ife cutcam -1
		ife thiscam -1
		ife movecam -1
		ifp palive
		ifn player[].i redcarrier
		ife player[].movement_lock 0
		{
			// extbits:
			// 1 forward, 2 back, 4 strafe L, 8 strafe R
			getp[].ang dashang
			ifvarand extbits 4 
			{
				ifvarand extbits 1
					sub dashang 256
				else
				ifvarand extbits 2
					sub dashang 768
				else
					sub dashang 512
			}
			else
			ifvarand extbits 8 
			{ 
				ifvarand extbits 1
					add dashang 256
				else
				ifvarand extbits 2
					add dashang 768
				else
					add dashang 512
			}
			else
			ifvarand extbits 2 
				add dashang 1024 

			
			set dashing 3
			// getp[].boot_amount temp, sub temp 1, setp[].boot_amount temp
			screensound DASHSOUND
			
		
		}
	}
	else
		ife player[].fta 0 quote 1184

endevent

definegamefuncname 17 WEAPON_WHEEL
onevent EVENT_AIMUP

set RETURN -1
ifp palive
ife player[].reloading 0
ife player[].kickback_pic 0
ife vendor_screen 0
ife award_time 0
{
	set press_wheel 3
	set vendor_screen 8
	set cursorx 160
	set cursory 100
	set q16_cursorx 10485760
	set q16_cursory 6553600
	set cmode 0
}
else ife vendor_screen 8 set press_wheel 3
endevent


definegamefuncname 18 RELOAD_WEAPON
onevent EVENT_AIMDOWN

// same as bits 16
set RETURN -1

ifn pchar 0
{
	set B player[].ammo_amount SHOTGUN_WEAPON
	sub B 1
	
	ife player[].weapon_pos 0
	ife player[].kickback_pic 0
	{
		ifn pchar 2
		ifn pchar 4
		ife m4reload 0
		ifl m4clip 30
		ife player[].curr_weapon CHAINGUN_WEAPON
		ifg player[].ammo_amount CHAINGUN_WEAPON m4clip
		{
			set m4reload 1
		}
		
		ife player[].curr_weapon SHOTGUN_WEAPON
		ife player[].reloading NO
		ifn pchar 3
		{
			ife pchar 4
			{
				ifg B 0
				ifl novamag 9
				ifg B novamag
				{
					setp[].reloading YES
					setp[].kickback_pic 16
					ifl B 8
					set novamag B else
					set novamag 9
				}
			}
			else
			{
				set TMP_A NO
				ife pchar 1 ifvarand shellyupgrades[SHOTGUN_WEAPON] 128 set TMP_A YES
				ife pchar 2 ifvarand wesupgrades[SHOTGUN_WEAPON] 128 set TMP_A YES
			
			
				ife TMP_A YES
				ifg B 0
				ifl spasclip 8
				ifg B spasclip
				{
					setp[].reloading YES
					setp[].kickback_pic 11
					ifl B 8
					set spasclip B else
					set spasclip 8
				}	
			}
		}
	}
}

ife pchar 2
{
	ife player[].weapon_pos 0
	ife player[].kickback_pic 0
	{
	
		ife player[].curr_weapon CHAINGUN_WEAPON
		ife uzireload 0
		ifl uziclip 32
		ifg player[].ammo_amount CHAINGUN_WEAPON uziclip
		{
			set uzireload 1
		}
		
		ife player[].curr_weapon GROW_WEAPON
		ifl skarclip 20
		ifg player[].ammo_amount GROW_WEAPON skarclip
		{
			setp[].reloading YES
			setp[].kickback_pic 5
		}
		
		ife player[].curr_weapon SHRINKER_WEAPON
		ifl skarclipB 10
		ifg player[].ammo_amount SHRINKER_WEAPON skarclipB
		{
			setp[].reloading YES
			setp[].kickback_pic 5
		}
	}
}

// RELOAD WHEN USING PISTOL	
ife LASERMODE NO
ife player[].curr_weapon PISTOL_WEAPON
ife player[].kickback_pic 0
ife player[].weapon_pos 0
ifl pchar 3
{
	ifn THISCLIP PISTOLCLIP
	ifg player[].ammo_amount PISTOL_WEAPON THISCLIP
	{
		setp[].reloading YES
		
		ife pchar 2 setp[].kickback_pic 9
		else
		ife pchar 1 setp[].kickback_pic 10
		else
		setp[].kickback_pic 7
		
		
		ife pchar 0 
		{
			ifvarand dukeupgrades[PISTOL_WEAPON] 8 sound GLOCKMAGOUT else
			sound EJECT_CLIP
		}
		else
		ife pchar 1 
		{ 
			ifvarand shellyupgrades[PISTOL_WEAPON] 8 
			{ sound GLOCKMAGOUT setplayer[THISACTOR].kickback_pic 7 } 
			else
			sound DEAGLE_CLIPOUT 
		}
	}
}

ife pchar 4
ife player[].kickback_pic 0
ife player[].weapon_pos 0
ife player[].reloading NO
{
	ife player[].curr_weapon PISTOL_WEAPON
	{
		ife LASERMODE 0
		{
			setp[].reloading YES
			setp[].kickback_pic 7
		}
	}
	else
	ifvarand gotplasma 2 nullop else
	{
		ife player[].curr_weapon FREEZE_WEAPON
		ifg player[].ammo_amount FREEZE_WEAPON 0
		ifl gooclip 10
		ifl gooclip player[].ammo_amount FREEZE_WEAPON
		{
			setp[].reloading YES
			setp[].kickback_pic 11
			screensound CLIPOUT2
		}
	}
}
endevent


onevent EVENT_ALTWEAPON

ifvarand gotrailgun 1 ife player[].gotweapon DEVISTATOR_WEAPON YES 
{
	ife player[].curr_weapon DEVISTATOR_WEAPON
	ife player[].kickback_pic 0
	ife player[].weapon_pos 0
	{
		setp[].weapon_pos -1
		ifvarand gotrailgun 2
		{
			orvar gotrailgun 8 // switching to devistator 
			set gun_name DEVISTATORSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
		else 
		{
			orvar gotrailgun 4 // switching to railgun
			set gun_name RAILGUNSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
	}
}

ifvarand gotplasma 1 ife player[].gotweapon FREEZE_WEAPON YES 
{
	ife player[].curr_weapon FREEZE_WEAPON
	ife player[].kickback_pic 0
	ife player[].weapon_pos 0
	{
		setp[].weapon_pos -1
		ifvarand gotplasma 2 
		{
			orvar gotplasma 8 // switching to freezer or incinerator 
			set gun_name FREEZESPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
		else 
		{
			orvar gotplasma 4 // switching to plasma
			set gun_name PLASMASPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
	}
}

ife player[].curr_weapon SHRINKER_WEAPON
{
	set gun_name GROWSPRITEICON
	ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
} 
else
ife player[].curr_weapon GROW_WEAPON
{
	set gun_name SHRINKERSPRITE
	ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
}

ife player[].curr_weapon RPG_WEAPON
ife player[].weapon_pos 0
ife player[].kickback_pic 0
ife player[].gotweapon RPG_WEAPON YES 
{
	ifg nukeamount 0 
	{
		setp[].weapon_pos -1
		ife nukeselect YES 
		{
			set nukeselect -2 // switching to regular RPG 
			set gun_name RPGSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
		else 
		{
			set nukeselect -1 // switching to NUKE
			set gun_name NUKESPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
		}
	}
	else
	// CHANGE AMMO TYPE WHEN USING RPG
	ife pchar 1
	ifg player[].ammo_amount RPG_WEAPON 0
	{
		ifvarand shellyupgrades[RPG_WEAPON] 1 nullop else
		{
			ife rpgtype 0 set rpgtype 1 else
			ife rpgtype 1 set rpgtype 0
			setp[].kickback_pic 10
			set rpgchange YES
			ifvarand gametips 8 { xorvar gametips 8 savegamevar gametips }
		}
	}
}

ifn pchar 0
ifn pchar 4
{
	ife player[].weapon_pos 0
	ife player[].kickback_pic 0
	{
		ifn pchar 2
		ife m4reload 0
		ifl m4clip 30
		ife player[].curr_weapon CHAINGUN_WEAPON
		ifg player[].ammo_amount CHAINGUN_WEAPON m4clip
		{
			set m4reload 1
		}
		else
		ifn pchar 3
		ife player[].curr_weapon SHOTGUN_WEAPON
		ifvarand gotbow 1 ife player[].gotweapon SHOTGUN_WEAPON YES
		{
			ife player[].curr_weapon SHOTGUN_WEAPON
			ife player[].kickback_pic 0
			ife player[].weapon_pos 0
			{
				setp[].weapon_pos -1
				ifvarand gotbow 2 
				{
					orvar gotbow 8 // switching to shotgun
					set gun_name SHOTGUNSPRITE
					ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
				}
				else 
				{
					orvar gotbow 4 // switching to bow
					set gun_name BOWSPRITE
					ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
				}
			}
		}
	}
}

ife pchar 2
{
	ife player[].weapon_pos 0
	ife player[].kickback_pic 0
	{
		ife uzireload 0
		ifl uziclip 32
		ife player[].curr_weapon CHAINGUN_WEAPON
		ifg player[].ammo_amount CHAINGUN_WEAPON uziclip
		{
			set uzireload 1
		}
	}
}

ifvarand gotDB 2 nullop else
ife pchar 0
ife player[].curr_weapon SHOTGUN_WEAPON
ife player[].weapon_pos 0
ife player[].kickback_pic 0
ifvarand dukeupgrades[SHOTGUN_WEAPON] 4
ife weap_owned[13] YES
{
	setp[].kickback_pic 9
	set B dukeupgrades[SHOTGUN_WEAPON]
	ifvarand B 2 
	{
		xorvar B 2
		quote 364
	}
	else 
	{
		orvar B 2
		quote 365
	}
	setarray dukeupgrades[SHOTGUN_WEAPON] B
}

ifp palive
ife player[].weapon_pos 0
{
	ife player[].curr_weapon PISTOL_WEAPON
	{
		ife LASERMODE YES
		{
			ifg LASERAMMO 0
			ife LASERFIRE 0
			ifg pistolammo 0 
			{
				set LASERMODE 2 // transferring to regular pistol
				setp[].weapon_pos -1
				// set WEAPON1_SELECTSOUND INSERT_CLIP
				set gun_name FIRSTGUNSPRITE
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
		else
		ife LASERMODE NO
		{
			ifg LASERAMMO 0
			ife player[].kickback_pic 0
			{
				set LASERMODE -1 // transferring to laser pistol
				setp[].weapon_pos -1
				set WEAPON1_SELECTSOUND SWITCHTOLASER 
				set gun_name LASERPISTOL
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
		else
		{
			ife pistolammo 0
			ifg LASERAMMO 0
			ife player[].kickback_pic 0
			{
				set LASERMODE -1 // transferring to laser pistol
				setp[].weapon_pos -1
				set WEAPON1_SELECTSOUND SWITCHTOLASER 
				set gun_name LASERPISTOL
				ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			}
		}
	}
	
	set temp NO
	ife pchar 0 set temp YES
	ife pchar 3 set temp YES
	ife pchar 4 set temp YES
	
	ife temp YES
	ife player[].curr_weapon SHOTGUN_WEAPON
	{
		ifvarand gotDB 1 ife player[].gotweapon SHOTGUN_WEAPON YES 
		{
			ife player[].curr_weapon SHOTGUN_WEAPON
			ife player[].kickback_pic 0
			{
				setp[].weapon_pos -1
				ifvarand gotDB 2 
				{
					orvar gotDB 8 // switching to regular shotgun
					set gun_name SHOTGUNSPRITE
					ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
				}
				else 
				{
					orvar gotDB 4 // switching to DB shotgun
					set gun_name DBSPRITE
					ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
				}
			}
		}
		
	}
	
}

endevent

onevent EVENT_HOLODUKEOFF
	
	stopsound HOLOTAUNT1
	stopsound HOLOTAUNT2
	stopsound HOLOTAUNT3
	stopsound HOLOTAUNT4
	stopsound HOLOTAUNT5
	ifn mynaamah -1 setav[mynaamah].monstatus 2
	ife pchar 3 screensound M_STAY
	
endevent

onevent EVENT_HOLODUKEON
	
	ife pchar 2
	{
		ife mynaamah -1
		{
			ifg player[].holoduke_amount 0
			{
				espawn NAAMAH
				set mynaamah RETURN
			}
		}
		else setav[mynaamah].monstatus 2
		set RETURN -1
		break
	}
	
	ifg player[].holoduke_amount 0
	{
		ife pchar 3 
		{
			ifrnd 64 screensound L_GROW else
			{
			screensound M_GETEM screensound M_GETEM screensound M_GETEM
			}
		}
		else ifl pchar 3
		state holotaunts
	}
		
endevent

onevent EVENT_USENIGHTVISION

	ife player[].heat_on NO
	{
		ife aimbot_on YES
		{
			sound NITEVISION_ONOFF
			set aimbot_on NO
			quote 710
			set RETURN -1
		}
		else
		{
			
			ifvarand inven_upgrades 2
			ifg player[].heat_amount 0
			{
				sound AIMBOT_ON
				set RETURN -1
				set aimbot_on YES
				quote 709
			}
		}
	}

endevent


definegamefuncname 11 SWAP_CHARACTERS
onevent EVENT_LOOKUP

	set RETURN -1
	ifvarand bits 8192 ifvarand oldbits 8192 break
	ife vendor_screen 8 break
	
	ifn myshelly -1
	ife actorvar[myshelly].monstatus 70 // waiting
	{
		setav[myshelly].monstatus 30
		seta[myshelly].htactorstayput -1
		ife sprite[myshelly].picnum SHELLY quote 147
		ife sprite[myshelly].picnum SHELLYCROUCH quote 147
		ife sprite[myshelly].picnum DUKEBOT quote 148
		ife sprite[myshelly].picnum DUKEBOTCROUCH quote 148
		ife sprite[myshelly].picnum WESBOT quote 1196
		ife sprite[myshelly].picnum WESBOTCROUCH quote 1196
		ife sprite[myshelly].picnum MANDOFETT quote 147
		ife sprite[myshelly].picnum MANDOCROUCH quote 147
		ife sprite[myshelly].picnum DEABOT quote 147
		ife sprite[myshelly].picnum DEABOTCROUCH quote 147
		// break
	}
	
	set temp YES
	ife switchmode NO 
	{
		ife player[].cursectnum -1 set temp NO
		ifn myshelly -1
		{
			ife sprite[myshelly].sectnum -1 set temp NO
			ife shellysquish YES set temp NO
		}
	}
	ife movecam -1
	ifn myshelly -1
	ife pdown NO
	ife actorvar[myshelly].monstatus 30
	// ifl actorvar[myshelly].FEMFALLDMG 60
	ifp palive
	ifg sprite[myshelly].xrepeat 18
	ifg sprite[player[].i].xrepeat 32
	ife player[].on_crane -1
	ife player[].reloading NO
	ifl switchboost 60
	ife temp YES
	{
		ifl pipemode 0 { set pipemode 1 set PIPEBOMB_CONTROL 1 }
		set x sprite[myshelly].x
		set y sprite[myshelly].y
		set z sprite[myshelly].z
		set angvar sprite[myshelly].ang
		set mysector sprite[myshelly].sectnum
		
		setav[myshelly].monstatus 60 // trigger to switch characters
		
		ife switchmode 0
		ife vendor_screen 0
		{
			getp[].posz zdist add zdist 8192
			setsprite myshelly player[].posx player[].posy zdist
			changespritesect myshelly player[].cursectnum
			setsprite player[].i x y z
			changespritesect player[].i mysector
			setp[].cursectnum mysector
			setp[].posx x
			setp[].posy y
			sub z 8192
			setp[].posz z
			setp[].ang angvar
			
			ifn sector[sprite[myshelly].sectnum].lotag 2 
			{
				setgamepalette 0
				setp[].heat_on NO
			}
		}
		ifge sprite[myshelly].picnum SHELLY ifle sprite[myshelly].picnum SHELLYCROUCH
		{ 
			globalsound SHELLYREADY { set pchar 1 state shellyweapons }
			set temp FULLBOTCHARGE
			ifge shellycharge temp
			{
				set shellycharge 0
				set switchboost SWITCHBOOSTTIME
				set damagecount 0
				ifvarand gametips 1024 { xorvar gametips 1024 savegamevar gametips }
			}
		} 
		else
		ifge sprite[myshelly].picnum DUKEBOT ifle sprite[myshelly].picnum DUKEBOTCROUCH
		{
			globalsound ROCKIN { set pchar 0 state dukeweapons }
			set temp FULLBOTCHARGE
			ifge dukecharge temp
			{
				set dukecharge 0
				set switchboost SWITCHBOOSTTIME
				set damagecount 0
				ifvarand gametips 1024 { xorvar gametips 1024 savegamevar gametips }
			}
		}
		else
		ifge sprite[myshelly].picnum MANDOFETT ifle sprite[myshelly].picnum MANDOCROUCH
		{
			al mandocharge
			globalsound M_IFYOUSAYSO { set pchar 3 state mandoweapons }
			set temp FULLBOTCHARGE
			ifge mandocharge temp
			{
				set mandocharge 0
				set switchboost SWITCHBOOSTTIME
				set damagecount 0
				ifvarand gametips 1024 { xorvar gametips 1024 savegamevar gametips }
			}
		}
		else
		ifge sprite[myshelly].picnum DEABOT ifle sprite[myshelly].picnum DEABOTCROUCH
		{
			globalsound DEA_EXCELLENT { set pchar 4 state novaweapons }
			set temp FULLBOTCHARGE
			ifge deacharge temp
			{
				set deacharge 0
				set switchboost SWITCHBOOSTTIME
				set damagecount 0
				ifvarand gametips 1024 { xorvar gametips 1024 savegamevar gametips }
			}
		}
		else
		{
			globalsound WESIMONIT { set pchar 2 state wesweapons }
			set temp FULLBOTCHARGE
			ifge wescharge temp
			{
				set wescharge 0
				set switchboost SWITCHBOOSTTIME
				set damagecount 0
				ifvarand gametips 1024 { xorvar gametips 1024 savegamevar gametips }
			}
		}
		setav[myshelly].navpoint -1
		ife redcarrier player[].i set redcarrier myshelly else
		ife bluecarrier player[].i set bluecarrier myshelly else
		ife redcarrier myshelly set redcarrier player[].i else
		ife bluecarrier myshelly set bluecarrier player[].i
	}
	else
	{
		ife myshelly -1 quote 1132 else
		ife pdown NO
		{
			ifn switchboost 0 { ifg rage 0 quote 1437 else quote 1129 } else
			ife shellysquish YES quote 1130 else
			ife actorvar[myshelly].monstatus 2 quote 1131 else
			ifge actorvar[myshelly].FEMFALLDMG 60 quote 1133 else
			ifl sprite[myshelly].xrepeat 18 quote 1134 else
			quote 1209
		}
	}

endevent

definegamefuncname 6 INTERACT
definegamefuncname 29 USE_INVENTORY
definegamefuncname 48 ADRENALIN
definegamefuncname 49 KICK
definegamefuncname 60 SUBWEAPON
definegamefuncname 36 VENDOR_MENU
onevent EVENT_TURNAROUND

	set RETURN -1
	ifn thiscam -1 break
	ifn cutcam -1 break
	ifn vrscreen_time 0 break
	ife epselect -1 break
	ife vendor_screen 8 break
	ifn award_time 0 break
	
	
	// ife vendorupgrade NO { quote 742 break }
	
	ife vendor_screen 0
	{
		set vendor_screen -20
		set cmode 0
	}
	else
	ifg vendor_screen 9 set vendor_screen 1 // -10
	else
	ifg vendor_screen 0 
	{
		ife pchar 4 set vendor_screen 50 else
		ife pchar 3 set vendor_screen 40 else
		ife pchar 2 set vendor_screen 30 else
		ife pchar 0 set vendor_screen 10 else
		set vendor_screen 20
	}
	
	
endevent

onevent EVENT_ALTFIRE

set RETURN -1
ifp palive nullop else break
ifn player[].weapon_pos 0 break
ifn vendor_screen 0 break
ife startmode -1 break

// CHANGE AMMO TYPE WHEN USING RPG
ifvarand shellyupgrades[RPG_WEAPON] 1 nullop else
ife pchar 1
ife player[].curr_weapon RPG_WEAPON
ife player[].kickback_pic 0
ife nukeselect NO
ifg player[].ammo_amount RPG_WEAPON 0
{
	ife rpgtype 0 set rpgtype 1 else
	ife rpgtype 1 set rpgtype 0
	setp[].kickback_pic 10
	set rpgchange YES
	ifvarand gametips 8 { xorvar gametips 8 savegamevar gametips }
}

ife pchar 2
ife player[].curr_weapon HANDBOMB_WEAPON
ife player[].kickback_pic 0
ifg player[].ammo_amount HANDBOMB_WEAPON 0
{
	set burstfired 3
	setp[].kickback_pic 1
}
// RELOAD WHEN USING PISTOL	
ife LASERMODE NO
ife player[].curr_weapon PISTOL_WEAPON
ife player[].kickback_pic 0
ifn pchar 3
{
	ife pchar 4
	{
		setp[].kickback_pic 7
		set burstfired GREENBULLET
		setp[].reloading YES
		ifvarand gametips 32768 xorvar gametips 32768
	}
	else
	ifn THISCLIP PISTOLCLIP
	ifg player[].ammo_amount PISTOL_WEAPON THISCLIP
	{
		ife pchar 2 setp[].kickback_pic 9
		else
		ife pchar 1 setp[].kickback_pic 10
		else
			setp[].kickback_pic 7

		setp[].reloading YES
		ife pchar 0
		{
			ifvarand dukeupgrades[PISTOL_WEAPON] 8 sound GLOCKMAGOUT else
			ife pchar 0 sound EJECT_CLIP
		}
		else
		ife pchar 1 
		{ 
			ifvarand shellyupgrades[PISTOL_WEAPON] 8 { sound GLOCKMAGOUT setplayer[THISACTOR].kickback_pic 7 } else
			sound DEAGLE_CLIPOUT 
		}
	}
}
// CHANGE AMMO TYPE ON SHOTGUN
// or START STAKE-FIRE FOR WES
// or start PLASGOOPROJ FOR MANDO
// or alt shotty fire for DEA

ife player[].curr_weapon SHOTGUN_WEAPON
ife player[].kickback_pic 0
{
	
	set temp NO
	ifvarand shellyupgrades[SHOTGUN_WEAPON] 1 ife pchar 1 set temp YES
	ifvarand dukeupgrades[SHOTGUN_WEAPON] 1 ife pchar 0 set temp YES
	
	ifvarand gotbow 2 ifge pchar 1 ifle pchar 2 set temp NO // holding bow
	
	ife temp YES
	{
		ife pchar 0 ifvarand dukeupgrades[SHOTGUN_WEAPON] 4 ifl holdaltfire 10 nullop else
		{
			ife pchar 0 ifvarand gotDB 2 
			{ 
				ifvarand dukeupgrades[SHOTGUN_WEAPON] 32 setp[].kickback_pic 17
				else setp[].kickback_pic 23 
				screensound DBOPEN 
			} 
			else
			setp[].kickback_pic 5
			ife pchar 1 ifvarand shellyupgrades[SHOTGUN_WEAPON] 128 set WEAPON2_TOTALTIME 24
			ife pchar 0 set burstfired 2 else
			set burstfired YES
			set holdaltfire 0
			ife pchar 0
			{
				ife shotexpduke 0 { quote 210 set shotexpduke 1 }
				else { quote 211 set shotexpduke 0 }
			}
			ife pchar 1 
			{
				ife shotexpshelly 0 { quote 210 set shotexpshelly 1 }
				else { quote 211 set shotexpshelly 0 }
			}
		}
	}
	
	ifvarand gotbow 2 nullop else
	ife pchar 2 ifg stakes 0
	{
		set stakefire YES
		setp[].kickback_pic 1
		sub stakes 1
		set WEAPON2_FIRESOUND SHOOTSTAKE
		set WEAPON2_SHOOTS STAKEPROJ
		set WEAPON2_SHOTSPERBURST 0
	}
	
	ifvarand gotDB 2 nullop else
	ife pchar 3 ifg player[].ammo_amount SHOTGUN_WEAPON 1
	ifvarand mandoupgrades[SHOTGUN_WEAPON] 128
	{
		set stakefire YES
		set WEAPON2_SHOOTS PLASGOOPROJ
		set WEAPON2_SHOTSPERBURST 0
		set WEAPON2_FIRESOUND PLASBALLSHOOT
		setp[].kickback_pic 1
	}
	
	
	ifg player[].ammo_amount SHOTGUN_WEAPON 1
	ife WEAPON2_SHOOTS NOVAPLASBOLT
	{
		set stakefire YES
		setprojectile[NOVAPLASBOLT].pal 3
		setprojectile[NOVAPLASBOLT].extra 5
		set WEAPON2_FIRESOUND DEASHOTRIGHT
		setp[].kickback_pic 1
	}
}

// DEANOVA RPG SMARTBOMB

ife pchar 4
ifvarand novaupgrades[RPG_WEAPON] 1
ife player[].kickback_pic 0
ife player[].weapon_pos 0
ifg player[].ammo_amount RPG_WEAPON 4
ife player[].curr_weapon RPG_WEAPON
{
	setp[].kickback_pic 1
	set WEAPON4_SHOOTS SMARTBOMB
	set WEAPON4_SHOTSPERBURST 0
	set WEAPON4_TOTALTIME 30
}


// DEANOVA LASER MINIGUN ALTFIRE
ifvarand gotshock 2 nullop else
ife pchar 4
ifvarand novaupgrades[CHAINGUN_WEAPON] 1
ife player[].curr_weapon CHAINGUN_WEAPON
ife player[].kickback_pic 0
ife player[].weapon_pos 0
ifge player[].ammo_amount CHAINGUN_WEAPON 10
ifge overheat 0
ife WEAPON3_SHOTSPERBURST 0
{
	setp[].kickback_pic 2
	set spinup 12
	set WEAPON3_SHOTSPERBURST 3
	orvar WEAPON3_FLAGS 8 // FIRE EVERY OTHER
	ifl cloak 0
	{
		mul cloak -1
		set switchboost 15
		sound CLOAKOFF
	}
}

ife player[].curr_weapon TRIPBOMB_WEAPON
ife player[].kickback_pic 0
{
	set temp NO
	ife pchar 0 ife weap_owned[80] YES ife weap_owned[81] YES set temp YES
	ife pchar 1 ife weap_owned[180] YES ife weap_owned[181] YES set temp YES
	ife pchar 2 ife weap_owned[280] YES ife weap_owned[281] YES set temp YES
	ife pchar 3 ife weap_owned[380] YES ife weap_owned[381] YES set temp YES
	ife pchar 4 ife weap_owned[480] YES ife weap_owned[481] YES set temp YES
	ife temp YES
	{
		setp[].weapon_pos -1
		ife WEAPON8_SHOOTS HANDHOLDINGLASER orvar gotspider 4 else
		ife WEAPON8_SHOOTS SPIDERMINEFALLING orvar gotspider 8 
		
		ifvarand gametips 2048 { xorvar gametips 2048 savegamevar gametips }
	}
}

// FIRE SHOCKBALL WHEN USING UPGRADED PLASMA RIFLE
ifvarand gotplasma 1 ifvarand gotplasma 2
ife player[].curr_weapon FREEZE_WEAPON
ife player[].kickback_pic 0
ifg player[].ammo_amount FREEZE_WEAPON 3
{
	setplayer[THISACTOR].kickback_pic 1
	set WEAPON9_SHOOTS SHOCKBALL2
	set WEAPON9_FIRESOUND SHOCKBALLFIRE
	set WEAPON9_TOTALTIME 20
	getp[].ammo_amount 9 temp
	sub temp 3
	setp[].ammo_amount 9 temp
}

ifvarand gotplasma 2 nullop else
{
	ife player[].curr_weapon FREEZE_WEAPON
	ife player[].kickback_pic 0
	ife player[].weapon_pos 0
	ifg player[].ammo_amount FREEZE_WEAPON 0
	{
		ife pchar 3
		ifvarand mandoupgrades[FREEZE_WEAPON] 1
		{
			setplayer[THISACTOR].kickback_pic 8
			set WEAPON9_SHOOTS FLAMEPROJ2
			set WEAPON9_FIRESOUND STEAMHISS
			setprojectile[FLAMEPROJ2].pal 27
			setprojectile[FLAMEPROJ2].extra 8
		}
		// else
		// ife pchar 4
		// ife player[].reloading NO
		// ifl gooclip 10
		// ifl gooclip player[].ammo_amount FREEZE_WEAPON
		// {
			// setp[].reloading YES
			// setp[].kickback_pic 11
		// }
	}
}



endevent

defstate next_full_weapon

	set B RETURN
	add B 1
	whilevarvarn B RETURN
	{
		ife player[].gotweapon B YES ifg player[].ammo_amount B 0 set RETURN B
		else
		{
			add B 1
			ife B HANDREMOTE_WEAPON set B GROW_WEAPON
			else
			ife B 12 { set RETURN KNEE_WEAPON set B KNEE_WEAPON }
		}
	}

ends

defstate prev_full_weapon

	set B RETURN
	sub B 1
	ifl B PISTOL_WEAPON set B GROW_WEAPON
	whilevarvarn B RETURN
	{
		ife player[].gotweapon B YES ifg player[].ammo_amount B 0 set RETURN B
		else
		{
			sub B 1
			ife B HANDREMOTE_WEAPON set B FREEZE_WEAPON
			else
			ife B KNEE_WEAPON set RETURN KNEE_WEAPON
		}
	}

ends

onevent EVENT_PREVIOUSWEAPON

ifvarand gotbow 2
ife player[].kickback_pic 14
	setp[].kickback_pic 0

ife vendor_screen 7
{
	sub currentoption 1 ifl currentoption FIRSTOPTION set currentoption FIRSTOPTION
	ifl currentoption optionstart set optionstart currentoption
	break
}
		
ifl combotime 0
ifn player[].kickback_pic 0
{
	setp[].kickback_pic 0
	setp[].reloading 0
	set m4reload 0
	set uzireload 0
}

 // make sure that comm gun is selected before laser pistol or regular pistol when switching down
 // make sure that laser pistol is selected before regular pistol when moving down weapons
 ifn player[].curr_weapon PISTOL_WEAPON
 {
	ifg COMMAMMO 0
	{
		ifn LASERMODE 3
		{
			setp[].ammo_amount PISTOL_WEAPON COMMAMMO
			set LASERMODE 3
			set WEAPON1_SELECTSOUND SELECT7
		}
	}
	else
	ifg LASERAMMO 0
	{
		ifn LASERMODE YES
		{
			set LASERMODE YES
			setp[].ammo_amount PISTOL_WEAPON LASERAMMO
			set WEAPON1_SELECTSOUND SWITCHTOLASER
		}
	}
 }
 else
 ife LASERMODE 3
 ifg LASERAMMO 0
 {
	set LASERMODE -3
	setp[].weapon_pos -1
	break
 }
 
 // make sure that bow is selected before shotgun when moving down weapons
 ifge pchar 1 ifle pchar 2
 {
	 ifvarand gotbow 2 nullop else
	 ifn player[].curr_weapon SHOTGUN_WEAPON
	 ifvarand gotbow 1
	 ifg arrows 0
	 {
		orvar gotbow 2
		ife pchar 2 state wesweapons else
		state shellyweapons
	 }
 }
 
  // make sure that DB shotty is selected before reg shotgun when moving down weapons

 ifn pchar 1 ifn pchar 2
 {
	 ifvarand gotDB 2 nullop else
	 ifn player[].curr_weapon SHOTGUN_WEAPON
	 ifvarand gotDB 1
	 ifg dbammo 0
	 {
		orvar gotDB 2
		set gun_name DBSPRITE
		ife pchar 0 state dukeweapons else
		ife pchar 3 state mandoweapons else
		ife pchar 4 state mandoweapons
	 }
 }
 
  // make sure that shock is selected before chaingun when moving down weapons
 ifvarand gotshock 2 nullop else
 ifn player[].curr_weapon CHAINGUN_WEAPON
 {
	// set temp NO
	// ife pchar 0 ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 1 ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 2 ifvarand wesupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 3 ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 4 ifvarand novaupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife temp YES
	ifvarand dukeupgrades[CHAINGUN_WEAPON] 8
	{
		orvar gotshock 2	
		ife pchar 0 state dukeweapons else ife pchar 1 state shellyweapons
		else ife pchar 2 state wesweapons
		else ife pchar 3 state mandoweapons
		else ife pchar 4 state novaweapons
	}
 }
 
 // make sure that railgun is selected before devastator when moving down weapons
 ifvarand gotrailgun 2 nullop else
 ifn player[].curr_weapon DEVISTATOR_WEAPON
 ifg railgunammo 0
 ifvarand gotrailgun 1
 {
	orvar gotrailgun 2	
	getp[].ammo_amount DEVISTATOR_WEAPON temp
	setp[].ammo_amount DEVISTATOR_WEAPON railgunammo
	set railgunammo temp
	state switchrailgun
 }
 
  // make sure that NUKE is selected before RPG when moving down weapons
 ife nukeselect YES nullop else
 ifn player[].curr_weapon RPG_WEAPON
 ifg nukeamount 0
 {
	set nukeselect YES
	getp[].ammo_amount RPG_WEAPON temp
	setp[].ammo_amount RPG_WEAPON nukeamount
	set weap4ammo temp
	state switchnuke
 }
 
 // make sure that plasma gun is selected before freezer/incinerator when moving down weapons
 ifvarand gotplasma 2 nullop else
 ifn player[].curr_weapon FREEZE_WEAPON
 ifg plasmammo 0
 ifvarand gotplasma 1
 {
	orvar gotplasma 2	
	getp[].ammo_amount FREEZE_WEAPON temp
	setp[].ammo_amount FREEZE_WEAPON plasmammo
	set plasmammo temp
	state switchplasma
 }
	
 set chwep 1

endevent

onevent EVENT_NEXTWEAPON

ifvarand gotbow 2
ife player[].kickback_pic 14
	setp[].kickback_pic 0
	


ife vendor_screen 7
{
	set B optionstart
	add B 7
	ifl currentoption LASTOPTION
	{
		add currentoption 1 ifg currentoption B ifl B LASTOPTION add optionstart 1
	}
	break
}

ifl combotime 0
ifn player[].kickback_pic 0
{
	setp[].kickback_pic 0
	setp[].reloading 0
	set m4reload 0
	set uzireload 0
}
 
 ife player[].curr_weapon KNEE_WEAPON
 ife player[].gotweapon PISTOL_WEAPON YES
 ife player[].ammo_amount PISTOL_WEAPON 0
 ifg LASERAMMO 0
 {
	set LASERMODE -1
	set RETURN PISTOL_WEAPON
	set WEAPON1_SELECTSOUND SWITCHTOLASER
 }
 // make sure that regular pistol is selected before laser pistol when moving up weapons
 ifn LASERMODE 0
 ifn player[].curr_weapon PISTOL_WEAPON
 ife player[].gotweapon PISTOL_WEAPON YES
 ifg player[].ammo_amount PISTOL_WEAPON 0
 {
	set LASERMODE NO
	ife pchar 0
	{
		ifvarand dukeupgrades[PISTOL_WEAPON] 8 set WEAPON1_SELECTSOUND GLOCKMAGIN else
		set WEAPON1_SELECTSOUND INSERT_CLIP
	}
	ife pchar 2 set WEAPON1_SELECTSOUND GLOCKMAGIN
	else set WEAPON1_SELECTSOUND DEAGLE_SLIDE
	setp[].ammo_amount PISTOL_WEAPON pistolammo
 }
 
 // make sure that chaingun is selected before shock when moving up weapons
 ifvarand gotshock 2
 ifn player[].curr_weapon CHAINGUN_WEAPON
 {
    // set temp NO
	// ife pchar 0 ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 1 ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 2 ifvarand wesupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 3 ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife pchar 4 ifvarand novaupgrades[CHAINGUN_WEAPON] 8 set temp YES
	// ife temp YES
	// {
		xorvar gotshock 2	
		getp[].ammo_amount CHAINGUN_WEAPON temp
		ife pchar 0 state dukeweapons else ife pchar 1 state shellyweapons
		else ife pchar 2 state wesweapons
		else ife pchar 3 state mandoweapons
		else ife pchar 4 state novaweapons
	// }
 }
 
  // make sure that RPG is selected before NUKE when moving up weapons
 ife nukeselect YES
 ifn player[].curr_weapon RPG_WEAPON
 ifg weap4ammo 0
 {
    set nukeselect NO
	setp[].ammo_amount RPG_WEAPON weap4ammo
	state switchnuke
 }

 // make sure that devastator is selected before railgun when moving up weapons
 ifvarand gotrailgun 2
 ifn player[].curr_weapon DEVISTATOR_WEAPON
 ifg railgunammo 0
 {
    xorvar gotrailgun 2	
	getp[].ammo_amount DEVISTATOR_WEAPON temp
	setp[].ammo_amount DEVISTATOR_WEAPON railgunammo
	set railgunammo temp
	state switchrailgun
 }
 
  // make sure that freezer/incinerator is selected before plasma when moving up weapons
 ifvarand gotplasma 2
 ifn player[].curr_weapon FREEZE_WEAPON
 ifg plasmammo 0
 {
    xorvar gotplasma 2	
	getp[].ammo_amount FREEZE_WEAPON temp
	setp[].ammo_amount FREEZE_WEAPON plasmammo
	set plasmammo temp
	state switchplasma
 }
 
 // make sure that shotgun is selected before bow when moving up weapons
 ifge pchar 1 ifle pchar 2
 {
	 ifvarand gotbow 2
	 ifn player[].curr_weapon SHOTGUN_WEAPON
	 {
		xorvar gotbow 2	
		ife pchar 2 state wesweapons else
		state shellyweapons
	 }
 }
 
  // make sure that shotgun is selected before DB shotty when moving up weapons

 ifn pchar 1 ifn pchar 2
 {
	 ifvarand gotDB 2
	 ifn player[].curr_weapon SHOTGUN_WEAPON
	 {
		xorvar gotDB 2
		ife pchar 0 state dukeweapons else
		ife pchar 3 state mandoweapons else
		ife pchar 4 state novaweapons
	 }
 }

 set chwep 2

endevent

state find_gun_name
	switch RETURN
	case 0 ifn pchar 2 ifn pchar 4 ife gotsaw YES ifg sawammo 0 set gun_name SAWSPRITE else 
		   ifg gotsaber 0 set gun_name SABERSPRITE else
		   set gun_name KNEE break
	case 1 ife LASERMODE 2 set gun_name FIRSTGUNSPRITE else ifn LASERMODE NO set gun_name LASERPISTOL else set gun_name FIRSTGUNSPRITE break
	
	case 2 
		ifn pchar 0 ifn pchar 3 ifn pchar 4 ifvarand gotbow 2 set gun_name BOWSPRITE else
		ifn pchar 1 ifn pchar 2 ifvarand gotDB 2 set gun_name DBSPRITE else 
		set gun_name SHOTGUNSPRITE 
	
	break
	case 3 set gun_name CHAINGUNSPRITE break
	case 4 
		// ifg nukeamount 0 set gun_name NUKESPRITE else
		set gun_name RPGSPRITE break
	case 5 set gun_name HEAVYHBOMB break
	case 6 set gun_name SHRINKERSPRITE break
	case 7 
		ifvarand gotrailgun 8 set gun_name DEVISTATORSPRITE else
		ifvarand gotrailgun 4 set gun_name RAILGUNSPRITE else
		ifvarand gotrailgun 2 set gun_name RAILGUNSPRITE else
		set gun_name DEVISTATORSPRITE
	break
	case 8 set gun_name TRIPBOMBSPRITE break
	case 9  
		ifvarand gotplasma 8 set gun_name FREEZESPRITE else
		ifvarand gotplasma 4 set gun_name PLASMASPRITE else
		ifvarand gotplasma 2 set gun_name PLASMASPRITE else
		set gun_name FREEZESPRITE
	break
	case 11 set gun_name GROWSPRITEICON break
	endswitch
	ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
	
	ife pchar 0 state dukeweapons else
	ife pchar 1 state shellyweapons else
	ife pchar 2 state wesweapons else
	ife pchar 3 state mandoweapons else
	ife pchar 4 state novaweapons
	
ends

onevent EVENT_SELECTWEAPON

	ife LASERMODE -3 { set RETURN PISTOL_WEAPON break }

	set idleanim 0
	setp[].crack_time 0
	set B NO
	ifn pchar 2 ifn pchar 4
	ife gotsaw YES ifg sawammo 0 set B YES
	ifg gotsaber 0 set B YES

	ife B YES
	ifn RETURN 0
	ifn chwep 0
	ife player[].curr_weapon RETURN
	{
		set TMP_A NO
		ifvarand gotbow 2 nullop else
		ife chwep 2
		ifge pchar 1 ifle pchar 2 ifvarand gotbow 1 ifg arrows 0 set TMP_A YES
		
		ifvarand gotbow 2
		ife chwep 1
		ifge pchar 1 ifle pchar 2 ifg player[].ammo_amount SHOTGUN_WEAPON 1 set TMP_A YES
		
		ifvarand gotDB 2 nullop else
		ife chwep 2
		ifn pchar 0 ifn pchar 3 ifn pchar 4 ifvarand gotDB 1 ifg dbammo 0 set TMP_A YES
		
		ifvarand gotDB 2
		ife chwep 1
		ifn pchar 1 ifn pchar 2 ifg player[].ammo_amount SHOTGUN_WEAPON 1 set TMP_A YES
		
		
		ife RETURN PISTOL_WEAPON ife chwep 2 ifg LASERAMMO 0
		ife LASERMODE NO nullop else
		ife RETURN PISTOL_WEAPON ife chwep 1 ifg pistolammo 0
		ife LASERMODE YES nullop else
		ife RETURN SHOTGUN_WEAPON ife player[].curr_weapon SHOTGUN_WEAPON
		ife TMP_A YES nullop else
		{
			set RETURN 0
			set chwep 0
			ifg gotsaber 0 set gun_name SABERSPRITE else
			set gun_name SAWSPRITE
			ife gun_nametime 0 set gun_nametime 70 else set gun_nametime 50
			break
		}
	}
	ife chwep 1 // previous weapon
	{
		ife B YES
		ifg RETURN player[].curr_weapon
		ifn player[].curr_weapon KNEE_WEAPON
		{
			ife RETURN GROW_WEAPON
			{
				ifl player[].curr_weapon DEVISTATOR_WEAPON 
				set RETURN KNEE_WEAPON
			}
			else
			   ifn player[].curr_weapon KNEE_WEAPON
			   set RETURN KNEE_WEAPON	
		}
		
		ifn pchar 1 ifn pchar 2
		{
			ifvarand gotDB 2	
			ife player[].curr_weapon SHOTGUN_WEAPON
			ifg player[].weapon_pos -1
			ifg player[].ammo_amount SHOTGUN_WEAPON 1
			{
				orvar gotDB 8 // switching to shotgun
				setp[].weapon_pos -1
				set RETURN SHOTGUN_WEAPON
			}
		}
		
		ifge pchar 1 ifle pchar 2
		{
			ifvarand gotbow 2	
			ife player[].curr_weapon SHOTGUN_WEAPON
			ifg player[].weapon_pos -1
			ifg player[].ammo_amount SHOTGUN_WEAPON 1
			{
				orvar gotbow 8 // switching to shotgun
				setp[].weapon_pos -1
				set RETURN SHOTGUN_WEAPON
			}
		}
		
		ifvarand gotbow 4 nullop else
		ifvarand gotDB 4 nullop else
		ifn player[].curr_weapon SHOTGUN_WEAPON
		ife RETURN SHOTGUN_WEAPON
		ife player[].ammo_amount SHOTGUN_WEAPON 1
		{
			set temp YES
			ife pchar 0 ifvarand gotDB 1 ifg dbammo 0 set temp NO
			ife pchar 3 ifvarand gotDB 1 ifg dbammo 0 set temp NO
			ife pchar 4 ifvarand gotDB 1 ifg dbammo 0 set temp NO
			ifge pchar 1 ifle pchar 2 ifvarand gotbow 1 ifg arrows 0 set temp NO
			ife temp YES
			state prev_full_weapon
		}
		
		ife player[].curr_weapon RPG_WEAPON
		ife nukeselect YES
		ifg player[].weapon_pos -1
		ifg weap4ammo 0
		{
			set nukeselect -2
			setp[].weapon_pos -1
			set RETURN RPG_WEAPON
		}
		
		ifvarand gotshock 2	
		ife player[].curr_weapon CHAINGUN_WEAPON
		ifg player[].weapon_pos -1
		{
			orvar gotshock 8 // switching to CHAINGUN
			setp[].weapon_pos -1
			set RETURN CHAINGUN_WEAPON
		}
		
		ifvarand gotrailgun 2	
		ife player[].curr_weapon DEVISTATOR_WEAPON
		ifg railgunammo 0
		ifg player[].weapon_pos -1
		{
			orvar gotrailgun 8 // switching to regular devastator
			setp[].weapon_pos -1
			set RETURN DEVISTATOR_WEAPON
		}
		
		ifvarand gotplasma 2	
		ife player[].curr_weapon FREEZE_WEAPON
		ifg plasmammo 0
		ifg player[].weapon_pos -1
		{
			orvar gotplasma 8 // switching to regular freezer/incinerator
			setp[].weapon_pos -1
			set RETURN FREEZE_WEAPON
		}
		
		ife player[].curr_weapon PISTOL_WEAPON
		ifg pistolammo 0
		ifg player[].weapon_pos -1
		{
			ife LASERMODE 3 // comm gun
			{
				ifg LASERAMMO 0
				set LASERMODE -3
				else set LASERMODE 4
				setp[].weapon_pos -1
				set RETURN PISTOL_WEAPON
			}
			else
			ife LASERMODE YES
			{
				set LASERMODE 2
				setp[].weapon_pos -1
				// set WEAPON1_SELECTSOUND INSERT_CLIP
				set RETURN PISTOL_WEAPON
			}
			
			ife LASERMODE NO
			ife RETURN PISTOL_WEAPON
			{
				ifg COMMAMMO 0
				{
					set LASERMODE -2
					setp[].weapon_pos -1
					set WEAPON1_SELECTSOUND SELECT7 
					set RETURN PISTOL_WEAPON
				}
				else
				ifg LASERAMMO 0
				{
					set LASERMODE -1
					setp[].weapon_pos -1
					set WEAPON1_SELECTSOUND SWITCHTOLASER 
					set RETURN PISTOL_WEAPON
				}
			}
		}
	}
	else
	ife chwep 2 // next weapon
	{
		ife B YES
		ifl RETURN player[].curr_weapon
		{
			ife player[].curr_weapon GROW_WEAPON
			{
				ife player[].gotweapon DEVISTATOR_WEAPON YES
					ifg player[].ammo_amount DEVISTATOR_WEAPON 0
				{ set chwep 0 state find_gun_name break }
				
				ife player[].gotweapon TRIPBOMB_WEAPON YES
					ifg player[].ammo_amount TRIPBOMB_WEAPON 0
				{ set chwep 0 state find_gun_name break }
				
				ife player[].gotweapon FREEZE_WEAPON YES
					ifg player[].ammo_amount FREEZE_WEAPON 0
				{ set chwep 0 state find_gun_name break }
				
				set RETURN KNEE_WEAPON
			}
			else
			set RETURN KNEE_WEAPON
		}
		
		ife player[].curr_weapon PISTOL_WEAPON
		ifg player[].weapon_pos -1
		{
			ifg LASERAMMO 0
			{
				ife LASERMODE NO
				{
					set LASERMODE -1
					setp[].weapon_pos -1
					set WEAPON1_SELECTSOUND SWITCHTOLASER 
					set RETURN PISTOL_WEAPON
				}
				else
				ife LASERMODE YES
				{
					ifg COMMAMMO 0
					{
						set LASERMODE -4
						setp[].weapon_pos -1
						set WEAPON1_SELECTSOUND SELECT7 
						set RETURN PISTOL_WEAPON
					}
					else
					ife RETURN PISTOL_WEAPON
					ifg pistolammo 0
					{
						set LASERMODE 2
						setp[].weapon_pos -1
						set RETURN PISTOL_WEAPON
					}
				}
				else
				ife LASERMODE 3
				{
					ife RETURN PISTOL_WEAPON
					ifg pistolammo 0
					{
						set LASERMODE 2
						setp[].weapon_pos -1
						set RETURN PISTOL_WEAPON
					}
				}
			}
			else
			{
				ifg COMMAMMO 0
				{
					ife LASERMODE NO
					{
						set LASERMODE -2
						setp[].weapon_pos -1
						set WEAPON1_SELECTSOUND SELECT7 
						set RETURN PISTOL_WEAPON
					}
					else
					ife LASERMODE 3
					ife RETURN PISTOL_WEAPON
					ifg pistolammo 0
					{
						set LASERMODE 2
						setp[].weapon_pos -1
						set RETURN PISTOL_WEAPON
					}
				}
			}
		}
		
		ifn pchar 1 ifn pchar 2
		{	
			ife RETURN SHOTGUN_WEAPON
			ifn player[].curr_weapon SHOTGUN_WEAPON
			ifvarand gotDB 1
			ife player[].ammo_amount SHOTGUN_WEAPON 1
			ifg dbammo 0
			{
				orvar gotDB 2
				ife pchar 0 state dukeweapons else
				ife pchar 3 state mandoweapons else
				ife pchar 4 state novaweapons
				set gun_name DBSPRITE
			}
			
			ifvarand gotDB 2 nullop else
			ife player[].curr_weapon SHOTGUN_WEAPON
			ifvarand gotDB 1
			ifg player[].weapon_pos -1
			ifg dbammo 0
			{
				orvar gotDB 4 // DB shotty
				setp[].weapon_pos -1
				set RETURN SHOTGUN_WEAPON
			}
		}
		
		ifge pchar 1 ifle pchar 2
		{
			ife RETURN SHOTGUN_WEAPON
			ife player[].ammo_amount SHOTGUN_WEAPON 1
			ifn player[].curr_weapon SHOTGUN_WEAPON
			{
				ifvarand gotbow 1
				ifg arrows 0 
				{
					orvar gotbow 2
					set gun_name BOWSPRITE
					ife pchar 2 state wesweapons else
					state shellyweapons
				}
				else state next_full_weapon
			}
			
			ifvarand gotbow 2 nullop else
			ife player[].curr_weapon SHOTGUN_WEAPON
			ifvarand gotbow 1
			ifg player[].weapon_pos -1
			ifg arrows 0
			{
				orvar gotbow 4 // bow
				setp[].weapon_pos -1
				set RETURN SHOTGUN_WEAPON
			}
		}
		
		ifvarand gotbow 4 nullop else
		ifvarand gotDB 4 nullop else
		ifn player[].curr_weapon SHOTGUN_WEAPON
		ife RETURN SHOTGUN_WEAPON
		ife player[].ammo_amount SHOTGUN_WEAPON 1
		{
			set temp YES
			ifn pchar 1 ifn pchar 2 ifvarand gotDB 1 ifg dbammo 0 set temp NO
			ifge pchar 1 ifle pchar 2 ifvarand gotbow 1 ifg arrows 0 set temp NO
			ife temp YES
			state next_full_weapon
		}
		
		ifvarand gotshock 2 nullop else
		ife player[].curr_weapon CHAINGUN_WEAPON
		ifvarand gotshock 1
		{
			// set temp NO
			// ife pchar 0 
			ifvarand dukeupgrades[CHAINGUN_WEAPON] 8 
			// set temp YES
			// ife pchar 1 ifvarand shellyupgrades[CHAINGUN_WEAPON] 8 set temp YES
			// ife pchar 2 ifvarand wesupgrades[CHAINGUN_WEAPON] 8 set temp YES
			// ife pchar 3 ifvarand mandoupgrades[CHAINGUN_WEAPON] 8 set temp YES
			// ife pchar 4 ifvarand novaupgrades[CHAINGUN_WEAPON] 8 set temp YES
			// ife temp YES
			ifg player[].weapon_pos -1
			{
				orvar gotshock 4 // switching to shock
				setp[].weapon_pos -1
				set RETURN CHAINGUN_WEAPON
			}
		}
		
		ifg nukeamount 0
		ife player[].curr_weapon RPG_WEAPON
		ife nukeselect NO
		ifg player[].weapon_pos -1
		{
			set nukeselect -1
			setp[].weapon_pos -1
			set RETURN RPG_WEAPON
		}
		
		ifvarand gotrailgun 2 nullop else
		ife player[].curr_weapon DEVISTATOR_WEAPON
		ifg railgunammo 0
		ifvarand gotrailgun 1
		ifg player[].weapon_pos -1
		{
			orvar gotrailgun 4 // switching to railgun
			setp[].weapon_pos -1
			set RETURN DEVISTATOR_WEAPON
		}
		
		ifvarand gotplasma 2 nullop else
		ife player[].curr_weapon FREEZE_WEAPON
		ifg plasmammo 0
		ifvarand gotplasma 1
		ifg player[].weapon_pos -1
		{
			orvar gotplasma 4 // plasma rifle
			setp[].weapon_pos -1
			set RETURN FREEZE_WEAPON
		}
	}
	set chwep 0
	
	state find_gun_name
	
	
endevent

onevent EVENT_INVENTORY

ife player[].inven_icon 8
ifg cover_amount 0
{
	ife player[].cursectnum -1 quote 1147 else
	{
		screensound TELEPORTER
		set x2 player[].posx
		add x2 1024
		set savz player[].posz
		ifn sector[player[].cursectnum].lotag 1
		add savz 4096
		rotatepoint player[].posx player[].posy x2 player[].posy player[].ang savx savy
		set temp player[].cursectnum
		updatesectorz savx savy savz temp 
		ife temp -1 
		{
			set x2 player[].posx
			add x2 512
			rotatepoint player[].posx player[].posy x2 player[].posy player[].ang savx savy
			set temp player[].cursectnum
			updatesectorz savx savy savz temp 
			ife temp -1 
			quote 1147 
			else
			{
				sub cover_amount 300
				ifl cover_amount 0 set cover_amount 0
				espawn COVERBLOCK
				setsprite RETURN savx savy savz
			}
		}
		else
		{
			sub cover_amount 300
			ifl cover_amount 0 set cover_amount 0
			espawn COVERBLOCK
			setsprite RETURN savx savy sprite[player[].i].z
		}
	}
}

endevent

defstate inven_checkamount

	switch temp
	case 1 ifg player[].firstaid_amount 0 { set TMP_A 1 set RETURN 1 } break
	case 2 ifg player[].steroids_amount 0 { set TMP_A 1 set RETURN 2 } break
	case 3 ifg player[].holoduke_amount 0 { set TMP_A 1 set RETURN 3 } break
	case 4 ifg player[].jetpack_amount 0 { set TMP_A 1 set RETURN 4 } break
	case 5 ifg player[].heat_amount 0 { set TMP_A 1 set RETURN 5 } break
	case 6 ifg player[].scuba_amount 0 { set TMP_A 1 set RETURN 6 } break
	case 7 ifg player[].boot_amount 0 { set TMP_A 1 set RETURN 7 } break
	case 8 ifg cover_amount 0 { set TMP_A 1 set RETURN 8 } break
	endswitch

ends

onevent EVENT_INVENTORYLEFT

getp[].inven_icon temp
set TMP_A 0
set TMP_B 0
whilevarn TMP_A 1
{
	sub temp 1
	ife temp 0 set temp 8 
	ife temp 7 set temp 6 // don't bother with boots
	ifn pchar 2 ifn pchar 4 ife temp 6 set temp 5 // skip scuba unless it is self-shrink
	add TMP_B 1
	state inven_checkamount
	
	ifge TMP_B 8 { set TMP_A 1 setp[].inven_icon 0 } // would go to 9 if all checked
}
endevent

onevent EVENT_INVENTORYRIGHT

getp[].inven_icon temp
set TMP_A 0
set TMP_B 0
whilevarn TMP_A 1
{
	add temp 1
	ifn pchar 2 ifn pchar 4 ife temp 6 set temp 8 // skip scuba unless it is self-shrink
	ife temp 7 set temp 8 // don't bother with boots
	ife temp 9 set temp 1
	add TMP_B 1
	state inven_checkamount
	
	ifge TMP_B 8 { set TMP_A 1 setp[].inven_icon 0 } // would go to 9 if all checked
}

endevent
