
// Based on the electric bike from SkyTown TC by Lezing Entertainment

gamevar e1 0 0
gamevar e2 0 0
gamevar e3 0 0
gamevar e4 0 0
gamevar e6 0 0
gamevar e7 0 0
gamevar e9 0 0
gamevar ea 0 0
gamevar eb 0 0

gamevar ohudx 160 0
gamevar y1 0 0


action DA 0 1 1 0 1

gamevar CMD_THRUST 0 1
gamevar CMD_BACK 0 1
gamevar CMD_LEFT 0 1
gamevar CMD_RIGHT 0 1
gamevar CMD_BRAKE 0 1
gamevar CMD_FORCE 0 1
gamevar PLAYERONTHEBIKE 0 1
gamevar CURRENTBIKECHARGE 0 1
gamevar CURRENTBIKEVELOCITY 0 1
gamevar CURRENTBIKEACCELERATION 0 1
gamevar CURRENTBIKEINTEGRITY 0 1
gamevar BIKEID 0 1

// lastangvel is BIKEVEL
// angvel is BIKEANGVEL
// lastang is BIKEANG
// initsprite is BIKESTATE
// countvar is INTCOUNTER

gamevar paoposx 0 1
gamevar paoposy 0 1
gamevar paoposz 0 1
gamevar paooposx 0 1
gamevar paooposy 0 1
gamevar paooposz 0 1

state regactorposition
setvarvar paooposx paoposx
getactor[THISACTOR].x paoposx
setvarvar paooposy paoposy
getactor[THISACTOR].y paoposy
setvarvar paooposz paoposz
getactor[THISACTOR].z paoposz
ends


/*
definesound 418                  sounds/EBIKERUN.VOC    -2048     -2048     255 0   12288
definesound 419                  sounds/EBIKERUN.VOC    -1874     -1874     255 0   11776
definesound 420                  sounds/EBIKERUN.VOC    -1719     -1719     255 0   11264
definesound 421                  sounds/EBIKERUN.VOC    -1578     -1578     255 0   10752
definesound 422                  sounds/EBIKERUN.VOC    -1449     -1449     255 0   10240
definesound 423                  sounds/EBIKERUN.VOC    -1331     -1331     255 0   9728
definesound 424                  sounds/EBIKERUN.VOC    -1222     -1222     255 0   9216
definesound 425                  sounds/EBIKERUN.VOC    -1120     -1120     255 0   8704
definesound 426                  sounds/EBIKERUN.VOC    -1024     -1024     255 0   8192
definesound 427                  sounds/EBIKERUN.VOC    -935     -935     255 0   7680
definesound 428                  sounds/EBIKERUN.VOC    -850     -850     255 0   7168
definesound 429                  sounds/EBIKERUN.VOC    -771     -771     255 0   6656
definesound 430                  sounds/EBIKERUN.VOC    -695     -695     255 0   6144
definesound 431                  sounds/EBIKERUN.VOC    -623     -623     255 0   5632
definesound 432                  sounds/EBIKERUN.VOC    -554     -554     255 0   5120
definesound 433                  sounds/EBIKERUN.VOC    -488     -488     255 0   4608
definesound 434                  sounds/EBIKERUN.VOC    -425     -425     255 0   4096
definesound 435                  sounds/EBIKERUN.VOC    -365     -365     255 0   3584
definesound 436                  sounds/EBIKERUN.VOC    -307     -307     255 0   3072
definesound 437                  sounds/EBIKERUN.VOC    -251     -251     255 0   2560
definesound 438                  sounds/EBIKERUN.VOC    -198     -198     255 0   2048
definesound 439                  sounds/EBIKERUN.VOC    -146     -146     255 0   1536
definesound 440                  sounds/EBIKERUN.VOC    -96     -96     255 0   1024
definesound 441                  sounds/EBIKERUN.VOC    -47     -47     255 0   512
definesound 442                  sounds/EBIKERUN.VOC    0     0     255 0   0
definesound 443                  sounds/EBIKERUN.VOC    45     45     255 0   0
definesound 444                  sounds/EBIKERUN.VOC    89     89     255 0   0
definesound 445                  sounds/EBIKERUN.VOC    132     132     255 0   0
definesound 446                  sounds/EBIKERUN.VOC    174     174     255 0   0
definesound 447                  sounds/EBIKERUN.VOC    214     214     255 0   0
definesound 448                  sounds/EBIKERUN.VOC    253     253     255 0   0
definesound 449                  sounds/EBIKERUN.VOC    292     292     255 0   0
definesound 450                  sounds/EBIKERUN.VOC    329     329     255 0   0
definesound 451                  sounds/EBIKERUN.VOC    366     366     255 0   0
definesound 452                  sounds/EBIKERUN.VOC    401     401     255 0   0
definesound 453                  sounds/EBIKERUN.VOC    436     436     255 0   0
definesound 454                  sounds/EBIKERUN.VOC    470     470     255 0   0
definesound 455                  sounds/EBIKERUN.VOC    503     503     255 0   0
definesound 456                  sounds/EBIKERUN.VOC    536     536     255 0   0
definesound 457                  sounds/EBIKERUN.VOC    567     567     255 0   0
definesound 458                  sounds/EBIKERUN.VOC    599     599     255 0   0
definesound 459                  sounds/EBIKERUN.VOC    629     629     255 0   0
definesound 460                  sounds/EBIKERUN.VOC    659     659     255 0   0
definesound 461                  sounds/EBIKERUN.VOC    688     688     255 0   0
definesound 462                  sounds/EBIKERUN.VOC    717     717     255 0   0
definesound 463                  sounds/EBIKERUN.VOC    745     745     255 0   0
definesound 464                  sounds/EBIKERUN.VOC    773     773     255 0   0
definesound 465                  sounds/EBIKERUN.VOC    800     800     255 0   0
definesound 466                  sounds/EBIKERUN.VOC    826     826     255 0   0
definesound 467                  sounds/EBIKERUN.VOC    852     852     255 0   0
definesound 468                  sounds/EBIKERUN.VOC    878     878     255 0   0
definesound 469                  sounds/EBIKERUN.VOC    903     903     255 0   0
definesound 470                  sounds/EBIKERUN.VOC    928     928     255 0   0
definesound 471                  sounds/EBIKERUN.VOC    953     953     255 0   0
definesound 472                  sounds/EBIKERUN.VOC    977     977     255 0   0
definesound 473                  sounds/EBIKERUN.VOC    1000     1000     255 0   0
definesound 474                  sounds/EBIKERUN.VOC    1024     1024     255 0   0
definesound 475                  sounds/EBIKERUN.VOC    1046     1046     255 0   0
definesound 476                  sounds/EBIKERUN.VOC    1069     1069     255 0   0
definesound 477                  sounds/EBIKERUN.VOC    1091     1091     255 0   0
definesound 478                  sounds/EBIKERUN.VOC    1113     1113     255 0   0
definesound 479                  sounds/EBIKERUN.VOC    1135     1135     255 0   0
definesound 480                  sounds/EBIKERUN.VOC    1156     1156     255 0   0
definesound 481                  sounds/EBIKERUN.VOC    1177     1177     255 0   0
definesound 482                  sounds/EBIKERUN.VOC    1198     1198     255 0   0
definesound 483                  sounds/EBIKERUN.VOC    1218     1218     255 0   0
definesound 484                  sounds/EBIKERUN.VOC    1238     1238     255 0   0
definesound 485                  sounds/EBIKERUN.VOC    1258     1258     255 0   0
definesound 486                  sounds/EBIKERUN.VOC    1277     1277     255 0   0
definesound 487                  sounds/EBIKERUN.VOC    1297     1297     255 0   0



*/


define BIKESTART 1963
define BIKEIDLE 1964
define BIKEOFF 1965
definesound BIKESTART	sounds/ebike/START.VOC		 0	0  0  0  -4096
definesound BIKEIDLE    sounds/ebike/LOOP.VOC         0  0  0  0  -4096
definesound BIKEOFF	    sounds/ebike/STOP.VOC		 0	0  0  0	 -4096
define EBIKE_BOUNCE 1966
definesound EBIKE_BOUNCE         sounds/ebike/EBIKEBNC.VOC    -256   256    255 0   0
define EBIKE_DESTROYED 1967
definesound EBIKE_DESTROYED      sounds/ebike/EBIKEDST.VOC    -256   256    255 0   0
define EBIKE_SKIDDING 1968
definesound EBIKE_SKIDDING       sounds/ebike/EBIKESKD.VOC      0     0     255 0   0
define EBIKE_COLLIDE1 1969
definesound EBIKE_COLLIDE1       sounds/ebike/EBIKECLW.VOC    -256   256    255 0   0
define EBIKE_COLLIDE2 1970
definesound EBIKE_COLLIDE2       sounds/ebike/EBIKECLS.VOC    -256   256    255 0   0
define EBIKE_ACTIVE 1971
definesound EBIKE_ACTIVE         sounds/ebike/ELECTRIC.VOC     0     0     255 0   0
define EBIKE_RUN 1972
definesound EBIKE_RUN            sounds/ebike/EBIKERUN.VOC    0     0     255 0   0

define THEEBIKE 18730

appendevent EVENT_MOVEFORWARD
ifvare PLAYERONTHEBIKE 1 
{
	ifsound BIKESTART nullop else
	setvar CMD_THRUST 1
}
endevent

// appendevent EVENT_MOVEBACKWARD

// ifvarand extbits 2
// ifvarg BIKEID -1 
// {
  // set e1 lastangvel
  // al e1
  // ifvarg e1 0 setvar CMD_BRAKE 4 else setvar CMD_BACK 1
  // ifsound BIKESTART setvar CMD_BACK 0
  
// }
// endevent
appendevent EVENT_STRAFELEFT

ifvarg PLAYERONTHEBIKE 0 
{
	setvar CMD_LEFT 1
}
endevent
appendevent EVENT_STRAFERIGHT

ifvarg PLAYERONTHEBIKE 0 
{
	setvar CMD_RIGHT 1
}
endevent
appendevent EVENT_TURNLEFT
ifvarg PLAYERONTHEBIKE 0 
{
	setvar CMD_LEFT 1
}
endevent

appendevent EVENT_TURNRIGHT
ifvarg PLAYERONTHEBIKE 0 
{
	setvar CMD_RIGHT 1
}
endevent

move EBIKEVELS 1

define EBIKE_ENGINEPOWERF 120
gamevar powerf 144 0 // 120
define EBIKE_ENGINEPOWERB -4 // -2
define EBIKE_COLLISIONDAMAGEDIV 1024 // 512
define EBIKE_COLLISIONDOFFSET 3072
define EBIKE_COLLISIONSTART 256
define EBIKE_STEERINGMULL -9 // -8
define EBIKE_STEERINGMULR 9 // 8
define EBIKE_MAXBATTERYCHARGE 115200

state destroybike
  sound EBIKE_DESTROYED
  hitradius 1536 16 32 64 128
  spawn EXPLOSION2
  addphealth -999
  setvar e1 -8192
  move EBIKEVELS getv
  setactor[THISACTOR].zvel e1
  spritepal 4
  setvar initsprite 2
  setvar PLAYERONTHEBIKE 0
  set BIKEID -1
  cstat 0
  sizeat 24 19
  resetactioncount
  setvar e1 0
ends

defstate updatesprisect

	getactor[THISACTOR].x e1
	getactor[THISACTOR].y e6
	getactor[THISACTOR].z e3
	set e7 sprite[].sectnum
	ife e7 -1 set e7 player[].cursectnum
	
	updatesectorz e1 e6 e3 e7
	// updatesector e1 e6 e7
	ifvarn e7 -1
	{
		changespritesect THISACTOR e7
		ifvare PLAYERONTHEBIKE 1 ifvarvare BIKEID THISACTOR setplayer[THISACTOR].cursectnum e7
	}
	
	
	// getflorzofslope e7 e1 e6 e2
	// getceilzofslope e7 e1 e6 e3
	// setactor[THISACTOR].htfloorz e2
	// setactor[THISACTOR].htceilingz e3
	// setactor[THISACTOR].z e3
  ifnotmoving
  {
	geta[].htmovflag temp
	// al temp
	addvar temp 16384
	ifvarl temp 16384 ifvarg temp -1 
	{
		geta[temp].cstat B
		ifvarand B 32 seta[].htmovflag 0
		// al B
	}
	else 
	{
		geta[].htmovflag temp
		andvar temp 49152
		ifvare temp 32768
		{
			// hit a wall
			setvarvar hitwall sprite[].htmovflag
			andvar hitwall 16383
			// al hitwall
			// getw[hitwall].x x al x
			// getw[hitwall].y y al y
			getw[hitwall].picnum picnum 
			// al picnum
		}
	}
  }
	
ends

useractor notenemy THEEBIKE 200
ifaction 0
{
  sizeat 24 19
  cstat 1
  set countvarb 100
  set bikehudyoffset 100
  // clipdist 112
  clipdist 60 //48
  action DA
	setvar countvar EBIKE_MAXBATTERYCHARGE
  getactor[THISACTOR].ang lastang
	mulvar lastang 256
  spritepal 0
  getactor[THISACTOR].htflags temp
  orvar temp 8192
  setactor[THISACTOR].htflags temp
  set startx 100

}
fall
sleeptime 100
/*
getactor[THISACTOR].ang e1
addvar e1 32
modvar e1 2048
setactor[THISACTOR].ang e1
*/
ifvare initsprite 0
{
	ifactorsound THISACTOR BIKEIDLE stopactorsound THISACTOR BIKEIDLE
	

  state updatesprisect
  ifp palive ifcansee
  {
    ifp pshrunk nullop else
    {
        ifpdistl 1480
		{
		  ifl PLAYERONTHEBIKE 1 state regactorposition
		  ifp pfacing
		  ifpdistl 1100
          ifhitspace ifactioncount 32
          {
            setvar initsprite 1
            setvar CMD_THRUST 0
            setvar CMD_BACK 0
            setvar CMD_LEFT 0
            setvar CMD_RIGHT 0
            setvar CMD_BRAKE 0
            setvar CMD_FORCE 0
			
			set e1 0
			set e2 0
			set e3 0
			set e4 0
			set e6 0
			set e7 0
			set e9 0
			set ea 0
			set eb 0
			set ocameraang sprite[].ang
            setvar CURRENTBIKEACCELERATION 0
            cstat 32768
            sizeat 18 255
            move EBIKEVELS geth
            resetactioncount
            globalsound BIKESTART
          }
		}
    }
  }
  // state createbikeskin
  /*
  setvar e1 192 // Width/2
  setvar e2 480 // Depth/2
  setvar e3 6144 // Height
  state makedummybox
  */
}
else ifvare initsprite 1
{
	setplayer[THISACTOR].falling_counter 0
	setp[].movement_lock 15
	setp[].crack_time 777
	state updatesprisect
	
	ifvare CMD_THRUST 0 
	{
		ifactorsound THISACTOR BIKESTART nullop else
		ifvarl CURRENTBIKEVELOCITY 15 soundonce BIKEIDLE
	}
	else ifactorsound THISACTOR BIKEIDLE stopactorsound THISACTOR BIKEIDLE
  setvarvar e1 lastangvel
  ifvarl e1 0 mulvar e1 -1
  divvar e1 16 // 14
  // ifvarg e1 77 setvar e1 77
  ifvarg e1 8
  {
    // addvar e1 410
	
    // soundoncevar e1
	espawn SOUNDPLATE
	setav[RETURN].SPRITELOTAG EBIKE_RUN
	setav[RETURN].mtype 1
	setav[RETURN].initsprite e1
	// sound EBIKE_RUN
	// setactorsoundpitch THISACTOR EBIKE_RUN e1
  }
  setvar PLAYERONTHEBIKE 1
  setvarvar BIKEID THISACTOR
	setvarvar CURRENTBIKECHARGE countvar
  setvarvar e2 lastangvel
  ifvarl e2 0 mulvar e2 -1
  
  ifhitspace ifvarg e1 0 ifactioncount 32 setvar CMD_BRAKE 4
  
  ifhitspace 
  ifactioncount 32 ifvarl e2 4096 // 2048
  {
	sound BIKEOFF
    setvar initsprite 0
    setvar lastangvel 0
	setvar PLAYERONTHEBIKE 0
	set BIKEID -1
	setp[].movement_lock 0
	stopsound EBIKE_RUN
    cstat 1
    sizeat 24 19
    setvar e1 0 // setplayer[THISACTOR].holster_weapon e1
    setvar e1 9 setplayer[THISACTOR].weapon_pos e1
    resetactioncount
  }
  else {
    setvar e1 1 // setplayer[THISACTOR].holster_weapon e1
    setvar e1 -9 setplayer[THISACTOR].weapon_pos e1
  }
  ifp pshrunk
  {
    setvar initsprite 0
	set BIKEID -1
	setp[].movement_lock 0
	stopsound EBIKE_RUN
	setvar PLAYERONTHEBIKE 0
    cstat 0
    sizeat 24 19
    resetactioncount
  }
  ifp pdead
  {
    setvar initsprite 0
	stopsound EBIKE_RUN
	setvar PLAYERONTHEBIKE 0
	set BIKEID -1
	setp[].movement_lock 0
    cstat 0
    sizeat 24 19
    resetactioncount
  }
  setvar e1 0 
  setplayer[THISACTOR].on_ground e1
  setplayer[THISACTOR].pyoff e1
  getactor[THISACTOR].x e1
  setplayer[THISACTOR].posx e1
  getactor[THISACTOR].y e1
  setplayer[THISACTOR].posy e1
  getactor[THISACTOR].z e1
  addvar e1 -6144
  setplayer[THISACTOR].posz e1
  set bikez e1
  getactor[THISACTOR].ang e1
  
  setvarvar e2 angvel
  // divvar e2 2
  addvarvar e1 e2
  ifvare CMD_THRUST 1
  {
    setvarvar e3 lastangvel
    ifvarl e3 0 divvar e3 -8192 else divvar e3 8192
  }
  else
    setvar e3 0
  addvarvar e1 e3
  andvar e1 2047
  setplayer[THISACTOR].ang e1
  getplayer[THISACTOR].oang e1
  subvarvar e1 e3
  andvar e1 2047
  setplayer[THISACTOR].oang e1
	
	/*
	getactor[THISACTOR].x e1
	ifvarg e1 680000
	{
	  setvar e1 3072
		setactor[THISACTOR].x e1
		state regactorposition
	}
	*/
	
	getactor[THISACTOR].zvel e1
	ifge e1 0
	{
		getactor[THISACTOR].z e3
		subvarvar e3 paoposz

		ifvarl e3 -1024 // -256
		{
          sound EBIKE_BOUNCE
		  mulvarvar e3 lastangvel
			// divvar e3 16384
			div e3 15360
		  addvarvar e1 e3
		  setactor[THISACTOR].zvel e1
		}
	}
	else ifl e1 0
	{
		ife sprite[].sectnum -1 nullop else
		ifvarand sector[].ceilingstat 1 nullop else
		{
			// ceiling protection
			getceilzofslope sprite[].sectnum sprite[].x sprite[].y z
			geta[].z zdist
			sub zdist z
			ifl zdist 6144 { seta[].zvel 1024 al zdist }
		}
	}
  /*
  sin e3 e1
  mulvarvar e3 lastangvel
  divvar e3 16384
  setactor[THISACTOR].yvel e3
  cos e3 e1
  mulvarvar e3 lastangvel
  divvar e3 16384
  setactor[THISACTOR].xvel e3
  */
  setvarvar e3 lastangvel
  divvar e3 16
  setactor[THISACTOR].xvel e3
 
  
  iffloordistl 1 
  {
    ifvarn lastangvel 0
	{
		getactor[THISACTOR].z e1
		subvarvar e1 paoposz
		ifl e1 0 { set float e1 div float 6 }
		else set float 0
		mulvar e1 2048
		
		divvarvar e1 lastangvel
		
		addvarvar lastangvel e1
	}
	else set float 0
	
	ifg FEMFALLDMG 0
	{
		shiftr FEMFALLDMG 6
		sub countvarb FEMFALLDMG
		ifl countvarb -30 set countvarb -30
		set FEMFALLDMG 0
	}
  }
  else
  {
	  ifn float 0
	  {
		geta[].zvel z
		add z float
		seta[].zvel z
		add float 16, ifg float 0 set float 0
	  }
	  geta[].zvel FEMFALLDMG
  }
  
	getactor[THISACTOR].x e1
	subvarvar e1 paoposx
	getactor[THISACTOR].y e3
	subvarvar e3 paoposy
	getactor[THISACTOR].z e6
	subvarvar e6 paoposz
	divvar e6 64
	mulvarvar e1 e1
	mulvarvar e3 e3
	mulvarvar e6 e6
	addvarvar e1 e3
	addvarvar e1 e6
	sqrt e1 e1
	
	setvarvar e2 e1
	divvar e2 4
    
  
  setvarvar e2 e1
  mulvar e2 80
  setvarvar e3 lastangvel
  ifvarl e3 0 mulvar e3 -1
  subvarvar e2 e3
  ifvarl e2 0 mulvar e2 -1
  ifvarg e2 256
  {
    ifsound EBIKE_SKIDDING nullop else sound EBIKE_SKIDDING
  }
  else
    stopsound EBIKE_SKIDDING
	
	setvarvar e7 paoposx
	subvarvar e7 paooposx
	setvarvar e3 paoposy
	subvarvar e3 paooposy
	setvarvar e6 paoposz
	subvarvar e6 paooposz

	divvar e6 64
	mulvarvar e7 e7
	mulvarvar e3 e3
	mulvarvar e6 e6
	
	addvarvar e7 e3
	addvarvar e7 e6
    sqrt e7 e7
	subvarvar e1 e7
  
  setvarvar e3 CURRENTBIKEACCELERATION
  setvarvar e2 e1
  ifvarl lastangvel 0 mulvar e2 -1
  mulvar e2 32
  subvarvar e2 e3
  divvar e2 16
  addvarvar e3 e2
  setvarvar CURRENTBIKEACCELERATION e3
  // setvarvar CURRENTBIKEACCELERATION e1
  
  setvarvar e3 e1
  /*
	ifvarl e3 0
	  mulvar e3 -1
  */
  mulvarvar e3 e3
 
  ifnotmoving
  {
    mulvar lastangvel 10
    divvar lastangvel 11
	// geta[].htmovflag temp
	// addvar temp 16384
	// ifvarl temp 16384 ifvarg temp -1 
	// {
		// geta[temp].picnum picnum al picnum
		// geta[temp].z z al z
		// geta[].z z2 al z2
		// geta[temp].cstat B
		// al B
	// }
  }
 
	ifvarg e3 EBIKE_COLLISIONDOFFSET
	{
	  ifn sprite[].htmovflag 0
	  {
		sound EBIKE_COLLIDE2
		getactor[THISACTOR].extra e1
		setvarvar e6 e3
		subvar e6 EBIKE_COLLISIONDOFFSET
		
		getactor[THISACTOR].htmovflag mtype
		addvar mtype 16384
		ifvarl mtype 16384 ifvarg mtype -1 // hit a sprite
		ifge e6 16
		{
			setvarvar tempb e6
			divvar tempb 16
			setactor[mtype].htextra tempb
			setactor[mtype].htpicnum KNEE
			setactor[mtype].htowner player[THISACTOR].i
			ifvarvarg tempb sprite[mtype].extra // enemy should die
			ife actorvar[mtype].monstatus 1
			{
				getactor[mtype].cstat tempd
				ifvarand tempd 1 xorvar tempd 1
				setactor[mtype].cstat tempd
				divvar e6 8	
			}
			geta[mtype].picnum picnum
			al picnum
			switch sprite[mtype].picnum
			case GLASS
				ifn actorvar[mtype].mtype 0
					set e6 0
			break
			case CANWITHSOMETHING case CANWITHSOMETHING2 case CANWITHSOMETHING3 case CANWITHSOMETHING4
			case NUKEBARREL case FIREBARREL
				set e6 0
				al e6
			break
			endswitch
		}
		
		ifge e6 EBIKE_COLLISIONDAMAGEDIV // 15
		{
			divvar e6 EBIKE_COLLISIONDAMAGEDIV
			subvarvar e1 e6
			// setvar e1 200
			ifvarl e1 0
				state destroybike
			else
			ifg e6 0
			{
				getplayer[THISACTOR].i temp
				geta[temp].htextra tempb
				ife tempb -1 set tempb e6 else add tempb e6
				setactor[temp].htextra tempb
				al tempb
				setactor[temp].htpicnum RPG
				setactor[temp].htowner temp
			}
		}
	  }
		// setactor[THISACTOR].extra e1
	  // soundonce 409
	}
    else ifvarg e3 EBIKE_COLLISIONSTART sound EBIKE_COLLIDE1
	
  getplayer[THISACTOR].i e1
  getactor[e1].extra e3
  getplayer[THISACTOR].last_extra e1
  subvarvar e1 e3
//  ifvarg e1 0
//  {
//    mulvar e1 32
//    randvarvar e2 e1
//    divvar e1 2
//    subvarvar e2 e1
//    divvar e1 16
//    addvarvar angvel e2
//    
//    getactor[THISACTOR].extra e3
//		subvarvar e3 e1
//		ifvarl e3 0
//		{
//      state destroybike
//		}
//    setactor[THISACTOR].extra e3
//  }
	setvarvar e3 lastangvel
	


  // Air resistance
  mulscale e7 lastangvel lastangvel 24
  ifvarl lastangvel 0 mulvar e7 -1
  subvarvar lastangvel e7
  
    ifvarand extbits 2
	ifvarg BIKEID -1 
	{
	  set e1 lastangvel
	  ifvarg e1 0 iffloordistl 1 setvar CMD_BRAKE 4 else setvar CMD_BACK 1
	  ifsound BIKESTART setvar CMD_BACK 0
	  
	}
  

	ifvare CMD_BRAKE 0
	{
		stopsound EBIKE_SKIDDING
		/*
		setvarvar e7 angvel
		divvar e7 2
		ifvarg e7 0
		  mulvar e7 -1
		mulvarvar lastangvel e7
		addvar e7 1
		ifvarn e7 0 divvarvar lastangvel e7
		*/
		mulscale e1 angvel lastangvel 16
		mulscale e1 e1 angvel 10
		
		addvar e1 8
	}
	else
	{

		// subvar countvar 128
		
		ifvarg lastangvel 512
		{
		  ifsound EBIKE_SKIDDING nullop else sound EBIKE_SKIDDING
		}
		else { ifvarl lastangvel -512
		{
		  ifsound EBIKE_SKIDDING nullop else sound EBIKE_SKIDDING
		}
		else
		  stopsound EBIKE_SKIDDING }
		
		  setvarvar e7 angvel
			divvar e7 2
			ifvarg e7 0
			  mulvar e7 -1
		  addvar e7 320 // 320
		  mulvarvar lastangvel e7

			addvar e7 2 // 1
			ifvarn e7 0 divvarvar lastangvel e7

		  setvar e1 256
			subvar CMD_BRAKE 1
	}

  ifvarvarg lastangvel e1
    subvarvar lastangvel e1
  else {
    mulvar e1 -1
    ifvarvarl lastangvel e1 subvarvar lastangvel e1 else setvar lastangvel 0
  }

  setvar e1 0
	// ifvare LEC_currweapon 9 { setvar CMD_THRUST 1 setvar lastang 0 }
  ifvare CMD_FORCE 1
  {
    iffloordistl 1
		ifvarg countvar 31
		{
		  getactor[THISACTOR].zvel e1
			addvar e1 -4096
		  setactor[THISACTOR].zvel e1
				subvar countvar 32
		}
    setvar CMD_FORCE 0
  }
  ifvare CMD_THRUST 1
  {
    iffloordistl 1
		ifvarg countvar 0
	{
		 
		  setvarvar e2 countvar
		  subvar e2 EBIKE_MAXBATTERYCHARGE
		  mulvar e2 8
		  divvar e2 EBIKE_MAXBATTERYCHARGE
		  // addvar e2 EBIKE_ENGINEPOWERF
		  addvarvar e2 powerf
		  setvarvar e4 lastangvel ifvarl e4 0 mulvar e4 -1
		  ifvarl e4 8192 setvar e4 8192
		  shiftvarl e2 15 divvarvar e2 e4
	      addvarvar lastangvel e2
          setvar e1 1
		  subvar countvar 1
	}
    setvar CMD_THRUST 0
  }
  else
  {
    ifvare CMD_BACK 1
    {
      iffloordistl 1
  		ifvarg countvar 0
  		{
		    
			setvarvar e2 countvar
			subvar e2 EBIKE_MAXBATTERYCHARGE
			mulvar e2 -8
			divvar e2 EBIKE_MAXBATTERYCHARGE
			addvar e2 EBIKE_ENGINEPOWERB
			setvarvar e4 lastangvel ifvarl e4 0 mulvar e4 -1
			ifvarl e4 512 setvar e4 512
			shiftvarl e2 15 divvarvar e2 e4
				addvarvar lastangvel e2
			setvar e1 1
				subvar countvar 1
  		}
  		setvar CMD_BACK 0
    }
	else // no command
	{
	
		iffloordistl 1
		ifvarg countvar 0
		{
			  setvarvar e2 countvar
			  subvar e2 EBIKE_MAXBATTERYCHARGE
			  mulvar e2 8
			  divvar e2 EBIKE_MAXBATTERYCHARGE
			  // addvar e2 EBIKE_ENGINEPOWERF
			  setvarvar e4 lastangvel ifvarl e4 0 mulvar e4 -1
			  ifvarl e4 8192 setvar e4 8192
			  shiftvarl e2 15 divvarvar e2 e4
			  addvarvar lastangvel e2
			  setvar e1 1
			  subvar countvar 1
		}
		
	}
  }

  ifvare e1 1
    soundonce EBIKE_ACTIVE
  else
    stopsound EBIKE_ACTIVE
	
	subvarvar e3 lastangvel
	subvarvar eb e3
	setvar e6 64
	whilevarn e6 0
	{
	  ifvarn e2 0
	  {
	    ifvarg eb 0
	      subvar eb 1
	    else
	      addvar eb 1
	  }
		subvar e6 1
	}
	mulvar eb 8
	divvar eb 9
	addvarvar eb e3
	
	setvarvar e1 eb
	divvar e1 -16
	addvar e1 100
	
	ifn countvarb e1
	{
		set tempb e1
		sub tempb countvarb
		abs tempb
		ifle tempb 4 set countvarb e1 else
		{
			set temp e1
			sub temp countvarb
			div temp 4
			add countvarb temp
		}
	}

	ifn bikehudyoffset e1
	{
		set tempb e1
		sub tempb bikehudyoffset
		abs tempb
		ifle tempb 4 set bikehudyoffset e1 else
		{
			set temp e1
			sub temp bikehudyoffset
			div temp 4
			add bikehudyoffset temp
		}
	}
	
	getzrange sprite[].x sprite[].y bikez sprite[].sectnum temp temp z spriteid 192 CLIPMASK0
	set TMP_A YES
	ifge spriteid 49152
	{
		sub spriteid 49152
		ifvarand sprite[spriteid].cstat 32
		{
			geta[spriteid].z z
			sub z sprite[].z
			ifg z 0 ifl z 3072 set TMP_A NO
			
		}
	}
	
	ife TMP_A YES
	iffloordistl 8
	{
		// bikehoriz calc should be based on comparing height at front of bike and back
		set xvel sprite[].x
		add xvel 512
		rotatepoint sprite[].x sprite[].y xvel sprite[].y bikeang x y
		
		set z2 bikez
		sub z2 4096
		
		set mysector sprite[].sectnum
		updatesectorz x y z2 mysector
		ife mysector -1 { set mysector sprite[].sectnum updatesector x y mysector }
		ifn mysector -1
		{
			getflorzofslope mysector x y z
			
			set angle2 bikeang
			add angle2 1024
			
			rotatepoint sprite[].x sprite[].y xvel sprite[].y angle2 x2 y2

			set mysector sprite[].sectnum
			updatesectorz x2 y2 z2 mysector
			ife mysector -1 { set mysector sprite[].sectnum updatesector x y mysector }
			ifn mysector -1
			{
				getflorzofslope mysector x2 y2 zdist
				sub zdist z
				// negative numbers means front is pointing down, positive front is pointing up
				// starty is the horiz offset
				// 299 is looking all the way up and -99 is looking all the way down
				
				// extreme differences should be ignored
				ifl zdist -32768 set zdist bikehoriz else
				ifg zdist 32768 set zdist bikehoriz else
				{
					ifl zdist -20480 set zdist -20480
					ifg zdist 20480 set zdist 20480
					// shiftr zdist 7
					div zdist 96
					add zdist 100
				}
				
				ifl zdist bikehoriz // limit how much front wheel can fall per tic
				{
					set temp bikehoriz
					sub temp zdist
					ifg temp 8
					{
						set zdist bikehoriz
						sub zdist 8
					}
				}
				
				
				set starty zdist
			}
		}
		else set starty 100
	
		add starty startx
		div starty 2
	}
	else
	{
		ifg starty 100 sub starty 2
		ife TMP_A NO ifl starty 100 set starty 100
	}
		
	
	set startx starty // save old value

	add countvarb starty
	div countvarb 2
	set countvarb starty

	setplayer[THISACTOR].horiz countvarb
	set bikehoriz countvarb
	// set countvarb e1
  
  setvarvar e1 angvel
  mulvarvar e1 lastangvel
  divvar e1 -512
	mulvarvar e1 lastangvel
  divvar e1 -16384
	ifvarl e1 0
	{
	  mulvar e1 -1
		setvar ea 1
	}
	else
	  setvar ea 0
	setvar e9 0
	setvar e3 1
	whilevarn e3 0 // fake arctangent for screen rotation
	{
	    setvar e3 1
		sin e6 e9
		cos e7 e9
		mulvar e6 16384
		divvarvar e6 e7
		ifvarvarl e6 e1
		{
			addvar e9 1
		}
		else
		{
		  setvar e3 0
		}

		ifvarg e9 512 setvar e3 0
	}
	ifvare ea 0
	  mulvar e9 -1
  
  // setplayer[THISACTOR].rotscrnang e9
  set bikerot e9
  
  mulvar angvel 32
  divvar angvel 33
  ifvarn angvel 0
  {
    ifvarg angvel 0
      subvar angvel 1
    else
      addvar angvel 1
  }
  setvarvar e3 lastangvel
  ifvarg e3 2048
    setvar e3 2048
  ifvarl e3 -2048
    setvar e3 -2048
  mulvarvar e3 angvel
  divvar e3 64
  addvarvar lastang e3
  
  setvarvar e1 lastang
  divvar e1 256
  andvar e1 2047
  setactor[THISACTOR].ang e1
  set bikeang e1
  
	getactor[THISACTOR].extra CURRENTBIKEINTEGRITY
	setvarvar CURRENTBIKEVELOCITY lastangvel
	divvar CURRENTBIKEVELOCITY 275 // km/h
	ifvarl CURRENTBIKEVELOCITY 0 mulvar CURRENTBIKEVELOCITY -1
	// setplayer[THISACTOR].shield_amount e1
	
	
  ifvarn CMD_LEFT 0
  {
    setvar e1 EBIKE_STEERINGMULL
    mulvarvar e1 CMD_LEFT
	ifn CURRENTBIKEVELOCITY 0
	{
		iffloordistl 1 nullop else div e1 3
		addvarvar angvel e1
	}
    setvar CMD_LEFT 0
  }
  ifvarn CMD_RIGHT 0
  {
    setvar e1 EBIKE_STEERINGMULR
    mulvarvar e1 CMD_RIGHT
	ifn CURRENTBIKEVELOCITY 0 
	{
		iffloordistl 1 nullop else div e1 3
		addvarvar angvel e1
	}
    setvar CMD_RIGHT 0
  }

  setplayer[THISACTOR].jumping_counter 0
  setplayer[THISACTOR].jumping_toggle 0
  ifg CURRENTBIKEVELOCITY 10 shoot ROCKETBULLET
  state regactorposition
}
/*
else ifvare initsprite 2
{
  // fall
  // espawn PRTMIDSMOKE state shiftit3
	setvar e1 192 // Width/2
  setvar e2 480 // Depth/2
  setvar e3 6144 // Height
  state makedummybox
  
}
*/
// state updatesprisect
// state regactorposition
enda


state velocitydigdisp


	// CURRENTBIKEVELOCITY
	ifvarl CURRENTBIKEVELOCITY 12 setvar picnum 18731 else
	ifvarl CURRENTBIKEVELOCITY 24 setvar picnum 18732 else
	ifvarl CURRENTBIKEVELOCITY 36 setvar picnum 18733 else
	ifvarl CURRENTBIKEVELOCITY 48 setvar picnum 18734 else
	ifvarl CURRENTBIKEVELOCITY 60 setvar picnum 18735 else
	ifvarl CURRENTBIKEVELOCITY 72 setvar picnum 18736 else
	ifvarl CURRENTBIKEVELOCITY 84 setvar picnum 18737 else
	ifvarl CURRENTBIKEVELOCITY 96 setvar picnum 18738 else
	ifvarl CURRENTBIKEVELOCITY 108 setvar picnum 18739 else
	ifvarl CURRENTBIKEVELOCITY 120 setvar picnum 18740 else
	ifvarl CURRENTBIKEVELOCITY 130 setvar picnum 18741 else
	ifvarl CURRENTBIKEVELOCITY 140 setvar picnum 18742 else
	ifvarl CURRENTBIKEVELOCITY 150 setvar picnum 18743 else
	setvar picnum 18744
	rotatesprite x y z 0 picnum gs pal orientation 0 0 xdim ydim
	
// ifvare e1 0
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3853
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3842
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 1
// {
  // subvar x 8
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3854
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3843
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 2
// {
  // subvar x 12
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3855
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3844
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 3
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3856
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3845
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 4
// {
  // subvar x 10
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3857
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3846
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 5
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3858
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3847
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 6
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3859
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3848
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 7
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3860
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3849
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 8
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3861
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3850
	// myospalx x y picnum shade orientation pal
// }
// ifvare e1 9
// {
  // subvar x 11
	// subvar y 1
	// setvar orientation 17
	// setvar picnum 3862
	// myospalx x y picnum shade orientation pal
	// addvar x 1
	// addvar y 1
	// setvar orientation 16
	// setvar picnum 3851
	// myospalx x y picnum shade orientation pal
// }
ends

state bikechargeinddisp
ifvarg e3 0
  setvar shade 0
else
  setvar shade 20
setvar pal 1
// myospalx x y picnum shade orientation pal
addvar x 48 // 1
subvar e3 48 // 1
ends

state bikeinteginddisp
ifvarg e3 0
  setvar shade 0
else
  setvar shade 20
setvar pal 8
// myospalx x y picnum shade orientation pal
addvar x 48 // 1
subvar e3 48 // 1
ends

state theebikehudstate

  getactor[BIKEID].ang e1
  getplayer[THISACTOR].oang e2
  
  ifn e1 e2
  {
	getincangle angle2 e1 e2
	set TMP_A angle2
	abs TMP_A
	ifg TMP_A 16
	{
		ifg angle2 0 set angle2 16 else set angle2 -16
		set e1 e2
		add e1 angle2
	}
  }
  // set e1 bikeang
  // set e2 bikeang
  
  getplayer[THISACTOR].look_ang e3
  addvarvar e2 e3
  subvarvar e1 e2
  
  sin e3 e1
  cos e4 e1
  mulvar e3 160
  ifvarn e4 0 divvarvar e3 e4
  addvar e3 160
  
  ifn e3 ohudx
  {
	add e3 ohudx
	div e3 2
	set ohudx e3
  }
  
  
  setvarvar x e3
  
  // getav[BIKEID].countvarb y
  set y bikehudyoffset
  
  ifl y 70 set y 70
  ifg y 140 set y 140
  addvar y 24
  setvar z 16777216
  setvarvar e1 CURRENTBIKEACCELERATION
  addvar e1 320
  ifvarn e1 0 divvarvar z e1

  getplayer[THISACTOR].cursectnum mysector
  ifn mysector -1
  {
	  getsector[mysector].floorpal pal
	  ifvare pal 0 getactor[BIKEID].pal pal
  }
  else set pal 0
  setvar orientation 0
  ife pchar 0 setvar picnum 18745
  else ife pchar 1 setvar picnum 18746
  else ife pchar 2 setvar picnum 18747
  rotatesprite x y z 0 picnum gs pal orientation 0 0 xdim ydim
  state velocitydigdisp
  
/*
  setvar picnum 3865
  setvar x 30
  setvar y 172
  setvar shade 0
  setvar orientation 0
  setvar pal 0
  // myospalx x y picnum shade orientation pal
  
  setvar picnum 3867
  setvar x 21
  setvar y 164
  setvar shade 0
  setvar orientation 0
  setvar pal 0
  // myospalx x y picnum shade orientation pal
  
  setvar picnum 3866
  setvar x 7
  setvar y 172
  setvar shade 0
  setvar orientation 257
  setvar pal 0
  setvarvar e3 CURRENTBIKECHARGE
  mulvar e3 48
  divvar e3 EBIKE_MAXBATTERYCHARGE

  state bikechargeinddisp
  
  setvar picnum 3865
  setvar x 30
  setvar y 153
  setvar shade 0
  setvar orientation 0
  setvar pal 0
  // myospalx x y picnum shade orientation pal
  
  setvar picnum 3868
  setvar x 27
  setvar y 145
  setvar shade 0
  setvar orientation 0
  setvar pal 0
  // myospalx x y picnum shade orientation pal
  
  setvar picnum 3866
  setvar x 7
  setvar y 153
  setvar shade 0
  setvar orientation 257
  setvar pal 0
  setvarvar e3 CURRENTBIKEINTEGRITY
  mulvar e3 48
  divvar e3 200

  state bikeinteginddisp
  
  setvar x 264
  setvar y 154
  setvar shade 0
  setvar pal 0
  subvar x 1
  subvar y 1
  setvar orientation 17
  setvar picnum 3863
  // myospalx x y picnum shade orientation pal
  addvar x 1
  addvar y 1
  setvar orientation 16
  setvar picnum 3852
  // myospalx x y picnum shade orientation pal
  
  setvar x 262
  setvar y 151
  setvarvar e1 CURRENTBIKEVELOCITY
  modvar e1 10
  // state velocitydigdisp
  ifvarg CURRENTBIKEVELOCITY 9
  {
    setvarvar e1 CURRENTBIKEVELOCITY
    divvar e1 10
    modvar e1 10
    // state velocitydigdisp
  }
  ifvarg CURRENTBIKEVELOCITY 99
  {
    setvarvar e1 CURRENTBIKEVELOCITY
    divvar e1 100
    modvar e1 10
    // state velocitydigdisp
  }
*/

ends